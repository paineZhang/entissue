// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"wing/models/ent"
)

// 登录返回信息
type LoginResponse struct {
	// 认证token。在其他接口方法中，增加'Authorization'的header项以及带有'Bearer '前缀的值
	Jwt string `json:"jwt"`
	// 返回当前登录的用户信息。
	CurUser *ent.User `json:"curUser"`
}

type PermissionMutation struct {
	UpdatePermissionPoliciesForRole bool `json:"updatePermissionPoliciesForRole"`
}

// 权限策略
type PermissionPolicy struct {
	OrgPosition *ent.OrgUnitPosition `json:"orgPosition"`
	Action      PermissionAction     `json:"action"`
	Effect      PermissionEffect     `json:"effect"`
}

type PermissionPolicyWhereInput struct {
	OrgPositionID *int              `json:"orgPositionId"`
	Action        *PermissionAction `json:"action"`
	Effect        *PermissionEffect `json:"effect"`
}

type PermissionQuery struct {
	// 资源的权限清单
	Resources []*ent.Resource `json:"resources"`
}

type PermissionResourceWhereInput struct {
	HasPermissionPolicyWith []*PermissionPolicyWhereInput `json:"HasPermissionPolicyWith"`
}

type RefreshTokenResponse struct {
	Jwt string `json:"jwt"`
}

type UpdatePermissionPolicyInput struct {
	ResourceID int              `json:"resourceId"`
	Action     PermissionAction `json:"action"`
	Effect     PermissionEffect `json:"effect"`
}

// 订阅用户消息
type UserSubscriptionInfo struct {
	ID int `json:"id"`
}

// 请求错误码。
type ErrorCode string

const (
	// 未知错误，通常是没有被具体定义的错误
	ErrorCodeUnknown ErrorCode = "UNKNOWN"
	// 参数错误
	ErrorCodeParameterError ErrorCode = "PARAMETER_ERROR"
	// 服务发生错误，这不是由于客户端调用引起的
	ErrorCodeServerError ErrorCode = "SERVER_ERROR"
	// 未认证。需要登录
	ErrorCodeNoAuth ErrorCode = "NO_AUTH"
	// 密码错误
	ErrorCodeWrongPassword ErrorCode = "WRONG_PASSWORD"
	// 已经存在
	ErrorCodeAlreadyExist ErrorCode = "ALREADY_EXIST"
	// 不存存在
	ErrorCodeNotExist ErrorCode = "NOT_EXIST"
	// 用户账户不被允许访问系统。通常是非在职状态
	ErrorCodeAccountNotAllowed ErrorCode = "ACCOUNT_NOT_ALLOWED"
)

var AllErrorCode = []ErrorCode{
	ErrorCodeUnknown,
	ErrorCodeParameterError,
	ErrorCodeServerError,
	ErrorCodeNoAuth,
	ErrorCodeWrongPassword,
	ErrorCodeAlreadyExist,
	ErrorCodeNotExist,
	ErrorCodeAccountNotAllowed,
}

func (e ErrorCode) IsValid() bool {
	switch e {
	case ErrorCodeUnknown, ErrorCodeParameterError, ErrorCodeServerError, ErrorCodeNoAuth, ErrorCodeWrongPassword, ErrorCodeAlreadyExist, ErrorCodeNotExist, ErrorCodeAccountNotAllowed:
		return true
	}
	return false
}

func (e ErrorCode) String() string {
	return string(e)
}

func (e *ErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ErrorCode", str)
	}
	return nil
}

func (e ErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 错误码在返回的错误消息（参考graphql规范中响应信息的错误消息格式）中的扩展信息的关键字
type ErrorCodeKey string

const (
	ErrorCodeKeyErrorCode ErrorCodeKey = "ERROR_CODE"
)

var AllErrorCodeKey = []ErrorCodeKey{
	ErrorCodeKeyErrorCode,
}

func (e ErrorCodeKey) IsValid() bool {
	switch e {
	case ErrorCodeKeyErrorCode:
		return true
	}
	return false
}

func (e ErrorCodeKey) String() string {
	return string(e)
}

func (e *ErrorCodeKey) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ErrorCodeKey(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ErrorCodeKey", str)
	}
	return nil
}

func (e ErrorCodeKey) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PermissionAction string

const (
	PermissionActionRead  PermissionAction = "read"
	PermissionActionWrite PermissionAction = "write"
)

var AllPermissionAction = []PermissionAction{
	PermissionActionRead,
	PermissionActionWrite,
}

func (e PermissionAction) IsValid() bool {
	switch e {
	case PermissionActionRead, PermissionActionWrite:
		return true
	}
	return false
}

func (e PermissionAction) String() string {
	return string(e)
}

func (e *PermissionAction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PermissionAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PermissionAction", str)
	}
	return nil
}

func (e PermissionAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 效果
type PermissionEffect string

const (
	// 允许
	PermissionEffectAllow PermissionEffect = "allow"
	// 阻止
	PermissionEffectDeny PermissionEffect = "deny"
)

var AllPermissionEffect = []PermissionEffect{
	PermissionEffectAllow,
	PermissionEffectDeny,
}

func (e PermissionEffect) IsValid() bool {
	switch e {
	case PermissionEffectAllow, PermissionEffectDeny:
		return true
	}
	return false
}

func (e PermissionEffect) String() string {
	return string(e)
}

func (e *PermissionEffect) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PermissionEffect(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PermissionEffect", str)
	}
	return nil
}

func (e PermissionEffect) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
