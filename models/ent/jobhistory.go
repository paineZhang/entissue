// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"wing/models/ent/jobhistory"
	"wing/models/ent/user"

	"entgo.io/ent/dialect/sql"
)

// JobHistory is the model entity for the JobHistory schema.
type JobHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateByUser holds the value of the "create_by_user" field.
	CreateByUser int `json:"create_by_user,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// JobEntryLeaveType holds the value of the "job_entry_leave_type" field.
	JobEntryLeaveType jobhistory.JobEntryLeaveType `json:"job_entry_leave_type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JobHistoryQuery when eager-loading is set.
	Edges              JobHistoryEdges `json:"edges"`
	user_job_histories *int
}

// JobHistoryEdges holds the relations/edges for other nodes in the graph.
type JobHistoryEdges struct {
	// CreateBy holds the value of the create_by edge.
	CreateBy *User `json:"create_by,omitempty"`
	// BelongTo holds the value of the belong_to edge.
	BelongTo *User `json:"belong_to,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CreateByOrErr returns the CreateBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobHistoryEdges) CreateByOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.CreateBy == nil {
			// The edge create_by was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.CreateBy, nil
	}
	return nil, &NotLoadedError{edge: "create_by"}
}

// BelongToOrErr returns the BelongTo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobHistoryEdges) BelongToOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.BelongTo == nil {
			// The edge belong_to was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.BelongTo, nil
	}
	return nil, &NotLoadedError{edge: "belong_to"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*JobHistory) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case jobhistory.FieldID, jobhistory.FieldCreateByUser:
			values[i] = new(sql.NullInt64)
		case jobhistory.FieldJobEntryLeaveType:
			values[i] = new(sql.NullString)
		case jobhistory.FieldCreateTime, jobhistory.FieldDate:
			values[i] = new(sql.NullTime)
		case jobhistory.ForeignKeys[0]: // user_job_histories
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type JobHistory", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the JobHistory fields.
func (jh *JobHistory) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case jobhistory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			jh.ID = int(value.Int64)
		case jobhistory.FieldCreateByUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by_user", values[i])
			} else if value.Valid {
				jh.CreateByUser = int(value.Int64)
			}
		case jobhistory.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				jh.CreateTime = value.Time
			}
		case jobhistory.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				jh.Date = value.Time
			}
		case jobhistory.FieldJobEntryLeaveType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job_entry_leave_type", values[i])
			} else if value.Valid {
				jh.JobEntryLeaveType = jobhistory.JobEntryLeaveType(value.String)
			}
		case jobhistory.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_job_histories", value)
			} else if value.Valid {
				jh.user_job_histories = new(int)
				*jh.user_job_histories = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCreateBy queries the "create_by" edge of the JobHistory entity.
func (jh *JobHistory) QueryCreateBy() *UserQuery {
	return (&JobHistoryClient{config: jh.config}).QueryCreateBy(jh)
}

// QueryBelongTo queries the "belong_to" edge of the JobHistory entity.
func (jh *JobHistory) QueryBelongTo() *UserQuery {
	return (&JobHistoryClient{config: jh.config}).QueryBelongTo(jh)
}

// Update returns a builder for updating this JobHistory.
// Note that you need to call JobHistory.Unwrap() before calling this method if this JobHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (jh *JobHistory) Update() *JobHistoryUpdateOne {
	return (&JobHistoryClient{config: jh.config}).UpdateOne(jh)
}

// Unwrap unwraps the JobHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (jh *JobHistory) Unwrap() *JobHistory {
	tx, ok := jh.config.driver.(*txDriver)
	if !ok {
		panic("ent: JobHistory is not a transactional entity")
	}
	jh.config.driver = tx.drv
	return jh
}

// String implements the fmt.Stringer.
func (jh *JobHistory) String() string {
	var builder strings.Builder
	builder.WriteString("JobHistory(")
	builder.WriteString(fmt.Sprintf("id=%v", jh.ID))
	builder.WriteString(", create_by_user=")
	builder.WriteString(fmt.Sprintf("%v", jh.CreateByUser))
	builder.WriteString(", create_time=")
	builder.WriteString(jh.CreateTime.Format(time.ANSIC))
	builder.WriteString(", date=")
	builder.WriteString(jh.Date.Format(time.ANSIC))
	builder.WriteString(", job_entry_leave_type=")
	builder.WriteString(fmt.Sprintf("%v", jh.JobEntryLeaveType))
	builder.WriteByte(')')
	return builder.String()
}

// JobHistories is a parsable slice of JobHistory.
type JobHistories []*JobHistory

func (jh JobHistories) config(cfg config) {
	for _i := range jh {
		jh[_i].config = cfg
	}
}
