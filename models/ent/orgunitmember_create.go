// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wing/models/ent/orgunit"
	"wing/models/ent/orgunitmember"
	"wing/models/ent/orgunitposition"
	"wing/models/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrgUnitMemberCreate is the builder for creating a OrgUnitMember entity.
type OrgUnitMemberCreate struct {
	config
	mutation *OrgUnitMemberMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateByUser sets the "create_by_user" field.
func (oumc *OrgUnitMemberCreate) SetCreateByUser(i int) *OrgUnitMemberCreate {
	oumc.mutation.SetCreateByUser(i)
	return oumc
}

// SetNillableCreateByUser sets the "create_by_user" field if the given value is not nil.
func (oumc *OrgUnitMemberCreate) SetNillableCreateByUser(i *int) *OrgUnitMemberCreate {
	if i != nil {
		oumc.SetCreateByUser(*i)
	}
	return oumc
}

// SetUpdateByUser sets the "update_by_user" field.
func (oumc *OrgUnitMemberCreate) SetUpdateByUser(i int) *OrgUnitMemberCreate {
	oumc.mutation.SetUpdateByUser(i)
	return oumc
}

// SetNillableUpdateByUser sets the "update_by_user" field if the given value is not nil.
func (oumc *OrgUnitMemberCreate) SetNillableUpdateByUser(i *int) *OrgUnitMemberCreate {
	if i != nil {
		oumc.SetUpdateByUser(*i)
	}
	return oumc
}

// SetCreateTime sets the "create_time" field.
func (oumc *OrgUnitMemberCreate) SetCreateTime(t time.Time) *OrgUnitMemberCreate {
	oumc.mutation.SetCreateTime(t)
	return oumc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (oumc *OrgUnitMemberCreate) SetNillableCreateTime(t *time.Time) *OrgUnitMemberCreate {
	if t != nil {
		oumc.SetCreateTime(*t)
	}
	return oumc
}

// SetUpdateTime sets the "update_time" field.
func (oumc *OrgUnitMemberCreate) SetUpdateTime(t time.Time) *OrgUnitMemberCreate {
	oumc.mutation.SetUpdateTime(t)
	return oumc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (oumc *OrgUnitMemberCreate) SetNillableUpdateTime(t *time.Time) *OrgUnitMemberCreate {
	if t != nil {
		oumc.SetUpdateTime(*t)
	}
	return oumc
}

// SetIsAdditional sets the "is_additional" field.
func (oumc *OrgUnitMemberCreate) SetIsAdditional(b bool) *OrgUnitMemberCreate {
	oumc.mutation.SetIsAdditional(b)
	return oumc
}

// SetUserID sets the "user_id" field.
func (oumc *OrgUnitMemberCreate) SetUserID(i int) *OrgUnitMemberCreate {
	oumc.mutation.SetUserID(i)
	return oumc
}

// SetOrgUnitID sets the "org_unit_id" field.
func (oumc *OrgUnitMemberCreate) SetOrgUnitID(i int) *OrgUnitMemberCreate {
	oumc.mutation.SetOrgUnitID(i)
	return oumc
}

// SetOrgUnitPositionID sets the "org_unit_position_id" field.
func (oumc *OrgUnitMemberCreate) SetOrgUnitPositionID(i int) *OrgUnitMemberCreate {
	oumc.mutation.SetOrgUnitPositionID(i)
	return oumc
}

// SetCreateByID sets the "create_by" edge to the User entity by ID.
func (oumc *OrgUnitMemberCreate) SetCreateByID(id int) *OrgUnitMemberCreate {
	oumc.mutation.SetCreateByID(id)
	return oumc
}

// SetNillableCreateByID sets the "create_by" edge to the User entity by ID if the given value is not nil.
func (oumc *OrgUnitMemberCreate) SetNillableCreateByID(id *int) *OrgUnitMemberCreate {
	if id != nil {
		oumc = oumc.SetCreateByID(*id)
	}
	return oumc
}

// SetCreateBy sets the "create_by" edge to the User entity.
func (oumc *OrgUnitMemberCreate) SetCreateBy(u *User) *OrgUnitMemberCreate {
	return oumc.SetCreateByID(u.ID)
}

// SetUpdateByID sets the "update_by" edge to the User entity by ID.
func (oumc *OrgUnitMemberCreate) SetUpdateByID(id int) *OrgUnitMemberCreate {
	oumc.mutation.SetUpdateByID(id)
	return oumc
}

// SetNillableUpdateByID sets the "update_by" edge to the User entity by ID if the given value is not nil.
func (oumc *OrgUnitMemberCreate) SetNillableUpdateByID(id *int) *OrgUnitMemberCreate {
	if id != nil {
		oumc = oumc.SetUpdateByID(*id)
	}
	return oumc
}

// SetUpdateBy sets the "update_by" edge to the User entity.
func (oumc *OrgUnitMemberCreate) SetUpdateBy(u *User) *OrgUnitMemberCreate {
	return oumc.SetUpdateByID(u.ID)
}

// SetUser sets the "user" edge to the User entity.
func (oumc *OrgUnitMemberCreate) SetUser(u *User) *OrgUnitMemberCreate {
	return oumc.SetUserID(u.ID)
}

// SetPositionID sets the "position" edge to the OrgUnitPosition entity by ID.
func (oumc *OrgUnitMemberCreate) SetPositionID(id int) *OrgUnitMemberCreate {
	oumc.mutation.SetPositionID(id)
	return oumc
}

// SetPosition sets the "position" edge to the OrgUnitPosition entity.
func (oumc *OrgUnitMemberCreate) SetPosition(o *OrgUnitPosition) *OrgUnitMemberCreate {
	return oumc.SetPositionID(o.ID)
}

// SetBelongToOrgUnitID sets the "belongToOrgUnit" edge to the OrgUnit entity by ID.
func (oumc *OrgUnitMemberCreate) SetBelongToOrgUnitID(id int) *OrgUnitMemberCreate {
	oumc.mutation.SetBelongToOrgUnitID(id)
	return oumc
}

// SetBelongToOrgUnit sets the "belongToOrgUnit" edge to the OrgUnit entity.
func (oumc *OrgUnitMemberCreate) SetBelongToOrgUnit(o *OrgUnit) *OrgUnitMemberCreate {
	return oumc.SetBelongToOrgUnitID(o.ID)
}

// Mutation returns the OrgUnitMemberMutation object of the builder.
func (oumc *OrgUnitMemberCreate) Mutation() *OrgUnitMemberMutation {
	return oumc.mutation
}

// Save creates the OrgUnitMember in the database.
func (oumc *OrgUnitMemberCreate) Save(ctx context.Context) (*OrgUnitMember, error) {
	var (
		err  error
		node *OrgUnitMember
	)
	if err := oumc.defaults(); err != nil {
		return nil, err
	}
	if len(oumc.hooks) == 0 {
		if err = oumc.check(); err != nil {
			return nil, err
		}
		node, err = oumc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrgUnitMemberMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oumc.check(); err != nil {
				return nil, err
			}
			oumc.mutation = mutation
			if node, err = oumc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(oumc.hooks) - 1; i >= 0; i-- {
			if oumc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oumc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oumc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oumc *OrgUnitMemberCreate) SaveX(ctx context.Context) *OrgUnitMember {
	v, err := oumc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oumc *OrgUnitMemberCreate) Exec(ctx context.Context) error {
	_, err := oumc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oumc *OrgUnitMemberCreate) ExecX(ctx context.Context) {
	if err := oumc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oumc *OrgUnitMemberCreate) defaults() error {
	if _, ok := oumc.mutation.CreateTime(); !ok {
		if orgunitmember.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized orgunitmember.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := orgunitmember.DefaultCreateTime()
		oumc.mutation.SetCreateTime(v)
	}
	if _, ok := oumc.mutation.UpdateTime(); !ok {
		if orgunitmember.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized orgunitmember.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := orgunitmember.DefaultUpdateTime()
		oumc.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (oumc *OrgUnitMemberCreate) check() error {
	if _, ok := oumc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "create_time"`)}
	}
	if _, ok := oumc.mutation.IsAdditional(); !ok {
		return &ValidationError{Name: "is_additional", err: errors.New(`ent: missing required field "is_additional"`)}
	}
	if _, ok := oumc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "user_id"`)}
	}
	if _, ok := oumc.mutation.OrgUnitID(); !ok {
		return &ValidationError{Name: "org_unit_id", err: errors.New(`ent: missing required field "org_unit_id"`)}
	}
	if _, ok := oumc.mutation.OrgUnitPositionID(); !ok {
		return &ValidationError{Name: "org_unit_position_id", err: errors.New(`ent: missing required field "org_unit_position_id"`)}
	}
	if _, ok := oumc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New("ent: missing required edge \"user\"")}
	}
	if _, ok := oumc.mutation.PositionID(); !ok {
		return &ValidationError{Name: "position", err: errors.New("ent: missing required edge \"position\"")}
	}
	if _, ok := oumc.mutation.BelongToOrgUnitID(); !ok {
		return &ValidationError{Name: "belongToOrgUnit", err: errors.New("ent: missing required edge \"belongToOrgUnit\"")}
	}
	return nil
}

func (oumc *OrgUnitMemberCreate) sqlSave(ctx context.Context) (*OrgUnitMember, error) {
	_node, _spec := oumc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oumc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (oumc *OrgUnitMemberCreate) createSpec() (*OrgUnitMember, *sqlgraph.CreateSpec) {
	var (
		_node = &OrgUnitMember{config: oumc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: orgunitmember.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orgunitmember.FieldID,
			},
		}
	)
	_spec.Schema = oumc.schemaConfig.OrgUnitMember
	_spec.OnConflict = oumc.conflict
	if value, ok := oumc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orgunitmember.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := oumc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orgunitmember.FieldUpdateTime,
		})
		_node.UpdateTime = &value
	}
	if value, ok := oumc.mutation.IsAdditional(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: orgunitmember.FieldIsAdditional,
		})
		_node.IsAdditional = value
	}
	if nodes := oumc.mutation.CreateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitmember.CreateByTable,
			Columns: []string{orgunitmember.CreateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = oumc.schemaConfig.OrgUnitMember
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreateByUser = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oumc.mutation.UpdateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitmember.UpdateByTable,
			Columns: []string{orgunitmember.UpdateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = oumc.schemaConfig.OrgUnitMember
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UpdateByUser = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oumc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitmember.UserTable,
			Columns: []string{orgunitmember.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = oumc.schemaConfig.OrgUnitMember
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oumc.mutation.PositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitmember.PositionTable,
			Columns: []string{orgunitmember.PositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunitposition.FieldID,
				},
			},
		}
		edge.Schema = oumc.schemaConfig.OrgUnitMember
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrgUnitPositionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oumc.mutation.BelongToOrgUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgunitmember.BelongToOrgUnitTable,
			Columns: []string{orgunitmember.BelongToOrgUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunit.FieldID,
				},
			},
		}
		edge.Schema = oumc.schemaConfig.OrgUnitMember
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrgUnitID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrgUnitMember.Create().
//		SetCreateByUser(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrgUnitMemberUpsert) {
//			SetCreateByUser(v+v).
//		}).
//		Exec(ctx)
//
func (oumc *OrgUnitMemberCreate) OnConflict(opts ...sql.ConflictOption) *OrgUnitMemberUpsertOne {
	oumc.conflict = opts
	return &OrgUnitMemberUpsertOne{
		create: oumc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrgUnitMember.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (oumc *OrgUnitMemberCreate) OnConflictColumns(columns ...string) *OrgUnitMemberUpsertOne {
	oumc.conflict = append(oumc.conflict, sql.ConflictColumns(columns...))
	return &OrgUnitMemberUpsertOne{
		create: oumc,
	}
}

type (
	// OrgUnitMemberUpsertOne is the builder for "upsert"-ing
	//  one OrgUnitMember node.
	OrgUnitMemberUpsertOne struct {
		create *OrgUnitMemberCreate
	}

	// OrgUnitMemberUpsert is the "OnConflict" setter.
	OrgUnitMemberUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreateByUser sets the "create_by_user" field.
func (u *OrgUnitMemberUpsert) SetCreateByUser(v int) *OrgUnitMemberUpsert {
	u.Set(orgunitmember.FieldCreateByUser, v)
	return u
}

// UpdateCreateByUser sets the "create_by_user" field to the value that was provided on create.
func (u *OrgUnitMemberUpsert) UpdateCreateByUser() *OrgUnitMemberUpsert {
	u.SetExcluded(orgunitmember.FieldCreateByUser)
	return u
}

// ClearCreateByUser clears the value of the "create_by_user" field.
func (u *OrgUnitMemberUpsert) ClearCreateByUser() *OrgUnitMemberUpsert {
	u.SetNull(orgunitmember.FieldCreateByUser)
	return u
}

// SetUpdateByUser sets the "update_by_user" field.
func (u *OrgUnitMemberUpsert) SetUpdateByUser(v int) *OrgUnitMemberUpsert {
	u.Set(orgunitmember.FieldUpdateByUser, v)
	return u
}

// UpdateUpdateByUser sets the "update_by_user" field to the value that was provided on create.
func (u *OrgUnitMemberUpsert) UpdateUpdateByUser() *OrgUnitMemberUpsert {
	u.SetExcluded(orgunitmember.FieldUpdateByUser)
	return u
}

// ClearUpdateByUser clears the value of the "update_by_user" field.
func (u *OrgUnitMemberUpsert) ClearUpdateByUser() *OrgUnitMemberUpsert {
	u.SetNull(orgunitmember.FieldUpdateByUser)
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *OrgUnitMemberUpsert) SetCreateTime(v time.Time) *OrgUnitMemberUpsert {
	u.Set(orgunitmember.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *OrgUnitMemberUpsert) UpdateCreateTime() *OrgUnitMemberUpsert {
	u.SetExcluded(orgunitmember.FieldCreateTime)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *OrgUnitMemberUpsert) SetUpdateTime(v time.Time) *OrgUnitMemberUpsert {
	u.Set(orgunitmember.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *OrgUnitMemberUpsert) UpdateUpdateTime() *OrgUnitMemberUpsert {
	u.SetExcluded(orgunitmember.FieldUpdateTime)
	return u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *OrgUnitMemberUpsert) ClearUpdateTime() *OrgUnitMemberUpsert {
	u.SetNull(orgunitmember.FieldUpdateTime)
	return u
}

// SetIsAdditional sets the "is_additional" field.
func (u *OrgUnitMemberUpsert) SetIsAdditional(v bool) *OrgUnitMemberUpsert {
	u.Set(orgunitmember.FieldIsAdditional, v)
	return u
}

// UpdateIsAdditional sets the "is_additional" field to the value that was provided on create.
func (u *OrgUnitMemberUpsert) UpdateIsAdditional() *OrgUnitMemberUpsert {
	u.SetExcluded(orgunitmember.FieldIsAdditional)
	return u
}

// SetUserID sets the "user_id" field.
func (u *OrgUnitMemberUpsert) SetUserID(v int) *OrgUnitMemberUpsert {
	u.Set(orgunitmember.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OrgUnitMemberUpsert) UpdateUserID() *OrgUnitMemberUpsert {
	u.SetExcluded(orgunitmember.FieldUserID)
	return u
}

// SetOrgUnitID sets the "org_unit_id" field.
func (u *OrgUnitMemberUpsert) SetOrgUnitID(v int) *OrgUnitMemberUpsert {
	u.Set(orgunitmember.FieldOrgUnitID, v)
	return u
}

// UpdateOrgUnitID sets the "org_unit_id" field to the value that was provided on create.
func (u *OrgUnitMemberUpsert) UpdateOrgUnitID() *OrgUnitMemberUpsert {
	u.SetExcluded(orgunitmember.FieldOrgUnitID)
	return u
}

// SetOrgUnitPositionID sets the "org_unit_position_id" field.
func (u *OrgUnitMemberUpsert) SetOrgUnitPositionID(v int) *OrgUnitMemberUpsert {
	u.Set(orgunitmember.FieldOrgUnitPositionID, v)
	return u
}

// UpdateOrgUnitPositionID sets the "org_unit_position_id" field to the value that was provided on create.
func (u *OrgUnitMemberUpsert) UpdateOrgUnitPositionID() *OrgUnitMemberUpsert {
	u.SetExcluded(orgunitmember.FieldOrgUnitPositionID)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.OrgUnitMember.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *OrgUnitMemberUpsertOne) UpdateNewValues() *OrgUnitMemberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.OrgUnitMember.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *OrgUnitMemberUpsertOne) Ignore() *OrgUnitMemberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrgUnitMemberUpsertOne) DoNothing() *OrgUnitMemberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrgUnitMemberCreate.OnConflict
// documentation for more info.
func (u *OrgUnitMemberUpsertOne) Update(set func(*OrgUnitMemberUpsert)) *OrgUnitMemberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrgUnitMemberUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateByUser sets the "create_by_user" field.
func (u *OrgUnitMemberUpsertOne) SetCreateByUser(v int) *OrgUnitMemberUpsertOne {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.SetCreateByUser(v)
	})
}

// UpdateCreateByUser sets the "create_by_user" field to the value that was provided on create.
func (u *OrgUnitMemberUpsertOne) UpdateCreateByUser() *OrgUnitMemberUpsertOne {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.UpdateCreateByUser()
	})
}

// ClearCreateByUser clears the value of the "create_by_user" field.
func (u *OrgUnitMemberUpsertOne) ClearCreateByUser() *OrgUnitMemberUpsertOne {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.ClearCreateByUser()
	})
}

// SetUpdateByUser sets the "update_by_user" field.
func (u *OrgUnitMemberUpsertOne) SetUpdateByUser(v int) *OrgUnitMemberUpsertOne {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.SetUpdateByUser(v)
	})
}

// UpdateUpdateByUser sets the "update_by_user" field to the value that was provided on create.
func (u *OrgUnitMemberUpsertOne) UpdateUpdateByUser() *OrgUnitMemberUpsertOne {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.UpdateUpdateByUser()
	})
}

// ClearUpdateByUser clears the value of the "update_by_user" field.
func (u *OrgUnitMemberUpsertOne) ClearUpdateByUser() *OrgUnitMemberUpsertOne {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.ClearUpdateByUser()
	})
}

// SetCreateTime sets the "create_time" field.
func (u *OrgUnitMemberUpsertOne) SetCreateTime(v time.Time) *OrgUnitMemberUpsertOne {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *OrgUnitMemberUpsertOne) UpdateCreateTime() *OrgUnitMemberUpsertOne {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *OrgUnitMemberUpsertOne) SetUpdateTime(v time.Time) *OrgUnitMemberUpsertOne {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *OrgUnitMemberUpsertOne) UpdateUpdateTime() *OrgUnitMemberUpsertOne {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *OrgUnitMemberUpsertOne) ClearUpdateTime() *OrgUnitMemberUpsertOne {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.ClearUpdateTime()
	})
}

// SetIsAdditional sets the "is_additional" field.
func (u *OrgUnitMemberUpsertOne) SetIsAdditional(v bool) *OrgUnitMemberUpsertOne {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.SetIsAdditional(v)
	})
}

// UpdateIsAdditional sets the "is_additional" field to the value that was provided on create.
func (u *OrgUnitMemberUpsertOne) UpdateIsAdditional() *OrgUnitMemberUpsertOne {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.UpdateIsAdditional()
	})
}

// SetUserID sets the "user_id" field.
func (u *OrgUnitMemberUpsertOne) SetUserID(v int) *OrgUnitMemberUpsertOne {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OrgUnitMemberUpsertOne) UpdateUserID() *OrgUnitMemberUpsertOne {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.UpdateUserID()
	})
}

// SetOrgUnitID sets the "org_unit_id" field.
func (u *OrgUnitMemberUpsertOne) SetOrgUnitID(v int) *OrgUnitMemberUpsertOne {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.SetOrgUnitID(v)
	})
}

// UpdateOrgUnitID sets the "org_unit_id" field to the value that was provided on create.
func (u *OrgUnitMemberUpsertOne) UpdateOrgUnitID() *OrgUnitMemberUpsertOne {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.UpdateOrgUnitID()
	})
}

// SetOrgUnitPositionID sets the "org_unit_position_id" field.
func (u *OrgUnitMemberUpsertOne) SetOrgUnitPositionID(v int) *OrgUnitMemberUpsertOne {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.SetOrgUnitPositionID(v)
	})
}

// UpdateOrgUnitPositionID sets the "org_unit_position_id" field to the value that was provided on create.
func (u *OrgUnitMemberUpsertOne) UpdateOrgUnitPositionID() *OrgUnitMemberUpsertOne {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.UpdateOrgUnitPositionID()
	})
}

// Exec executes the query.
func (u *OrgUnitMemberUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrgUnitMemberCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrgUnitMemberUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrgUnitMemberUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrgUnitMemberUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrgUnitMemberCreateBulk is the builder for creating many OrgUnitMember entities in bulk.
type OrgUnitMemberCreateBulk struct {
	config
	builders []*OrgUnitMemberCreate
	conflict []sql.ConflictOption
}

// Save creates the OrgUnitMember entities in the database.
func (oumcb *OrgUnitMemberCreateBulk) Save(ctx context.Context) ([]*OrgUnitMember, error) {
	specs := make([]*sqlgraph.CreateSpec, len(oumcb.builders))
	nodes := make([]*OrgUnitMember, len(oumcb.builders))
	mutators := make([]Mutator, len(oumcb.builders))
	for i := range oumcb.builders {
		func(i int, root context.Context) {
			builder := oumcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrgUnitMemberMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oumcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = oumcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oumcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oumcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oumcb *OrgUnitMemberCreateBulk) SaveX(ctx context.Context) []*OrgUnitMember {
	v, err := oumcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oumcb *OrgUnitMemberCreateBulk) Exec(ctx context.Context) error {
	_, err := oumcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oumcb *OrgUnitMemberCreateBulk) ExecX(ctx context.Context) {
	if err := oumcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrgUnitMember.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrgUnitMemberUpsert) {
//			SetCreateByUser(v+v).
//		}).
//		Exec(ctx)
//
func (oumcb *OrgUnitMemberCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrgUnitMemberUpsertBulk {
	oumcb.conflict = opts
	return &OrgUnitMemberUpsertBulk{
		create: oumcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrgUnitMember.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (oumcb *OrgUnitMemberCreateBulk) OnConflictColumns(columns ...string) *OrgUnitMemberUpsertBulk {
	oumcb.conflict = append(oumcb.conflict, sql.ConflictColumns(columns...))
	return &OrgUnitMemberUpsertBulk{
		create: oumcb,
	}
}

// OrgUnitMemberUpsertBulk is the builder for "upsert"-ing
// a bulk of OrgUnitMember nodes.
type OrgUnitMemberUpsertBulk struct {
	create *OrgUnitMemberCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrgUnitMember.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *OrgUnitMemberUpsertBulk) UpdateNewValues() *OrgUnitMemberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrgUnitMember.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *OrgUnitMemberUpsertBulk) Ignore() *OrgUnitMemberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrgUnitMemberUpsertBulk) DoNothing() *OrgUnitMemberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrgUnitMemberCreateBulk.OnConflict
// documentation for more info.
func (u *OrgUnitMemberUpsertBulk) Update(set func(*OrgUnitMemberUpsert)) *OrgUnitMemberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrgUnitMemberUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateByUser sets the "create_by_user" field.
func (u *OrgUnitMemberUpsertBulk) SetCreateByUser(v int) *OrgUnitMemberUpsertBulk {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.SetCreateByUser(v)
	})
}

// UpdateCreateByUser sets the "create_by_user" field to the value that was provided on create.
func (u *OrgUnitMemberUpsertBulk) UpdateCreateByUser() *OrgUnitMemberUpsertBulk {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.UpdateCreateByUser()
	})
}

// ClearCreateByUser clears the value of the "create_by_user" field.
func (u *OrgUnitMemberUpsertBulk) ClearCreateByUser() *OrgUnitMemberUpsertBulk {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.ClearCreateByUser()
	})
}

// SetUpdateByUser sets the "update_by_user" field.
func (u *OrgUnitMemberUpsertBulk) SetUpdateByUser(v int) *OrgUnitMemberUpsertBulk {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.SetUpdateByUser(v)
	})
}

// UpdateUpdateByUser sets the "update_by_user" field to the value that was provided on create.
func (u *OrgUnitMemberUpsertBulk) UpdateUpdateByUser() *OrgUnitMemberUpsertBulk {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.UpdateUpdateByUser()
	})
}

// ClearUpdateByUser clears the value of the "update_by_user" field.
func (u *OrgUnitMemberUpsertBulk) ClearUpdateByUser() *OrgUnitMemberUpsertBulk {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.ClearUpdateByUser()
	})
}

// SetCreateTime sets the "create_time" field.
func (u *OrgUnitMemberUpsertBulk) SetCreateTime(v time.Time) *OrgUnitMemberUpsertBulk {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *OrgUnitMemberUpsertBulk) UpdateCreateTime() *OrgUnitMemberUpsertBulk {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *OrgUnitMemberUpsertBulk) SetUpdateTime(v time.Time) *OrgUnitMemberUpsertBulk {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *OrgUnitMemberUpsertBulk) UpdateUpdateTime() *OrgUnitMemberUpsertBulk {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *OrgUnitMemberUpsertBulk) ClearUpdateTime() *OrgUnitMemberUpsertBulk {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.ClearUpdateTime()
	})
}

// SetIsAdditional sets the "is_additional" field.
func (u *OrgUnitMemberUpsertBulk) SetIsAdditional(v bool) *OrgUnitMemberUpsertBulk {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.SetIsAdditional(v)
	})
}

// UpdateIsAdditional sets the "is_additional" field to the value that was provided on create.
func (u *OrgUnitMemberUpsertBulk) UpdateIsAdditional() *OrgUnitMemberUpsertBulk {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.UpdateIsAdditional()
	})
}

// SetUserID sets the "user_id" field.
func (u *OrgUnitMemberUpsertBulk) SetUserID(v int) *OrgUnitMemberUpsertBulk {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OrgUnitMemberUpsertBulk) UpdateUserID() *OrgUnitMemberUpsertBulk {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.UpdateUserID()
	})
}

// SetOrgUnitID sets the "org_unit_id" field.
func (u *OrgUnitMemberUpsertBulk) SetOrgUnitID(v int) *OrgUnitMemberUpsertBulk {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.SetOrgUnitID(v)
	})
}

// UpdateOrgUnitID sets the "org_unit_id" field to the value that was provided on create.
func (u *OrgUnitMemberUpsertBulk) UpdateOrgUnitID() *OrgUnitMemberUpsertBulk {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.UpdateOrgUnitID()
	})
}

// SetOrgUnitPositionID sets the "org_unit_position_id" field.
func (u *OrgUnitMemberUpsertBulk) SetOrgUnitPositionID(v int) *OrgUnitMemberUpsertBulk {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.SetOrgUnitPositionID(v)
	})
}

// UpdateOrgUnitPositionID sets the "org_unit_position_id" field to the value that was provided on create.
func (u *OrgUnitMemberUpsertBulk) UpdateOrgUnitPositionID() *OrgUnitMemberUpsertBulk {
	return u.Update(func(s *OrgUnitMemberUpsert) {
		s.UpdateOrgUnitPositionID()
	})
}

// Exec executes the query.
func (u *OrgUnitMemberUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrgUnitMemberCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrgUnitMemberCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrgUnitMemberUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
