// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wing/models/ent/auth"
	"wing/models/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AuthCreate is the builder for creating a Auth entity.
type AuthCreate struct {
	config
	mutation *AuthMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetLastAuthTime sets the "last_auth_time" field.
func (ac *AuthCreate) SetLastAuthTime(t time.Time) *AuthCreate {
	ac.mutation.SetLastAuthTime(t)
	return ac
}

// SetNillableLastAuthTime sets the "last_auth_time" field if the given value is not nil.
func (ac *AuthCreate) SetNillableLastAuthTime(t *time.Time) *AuthCreate {
	if t != nil {
		ac.SetLastAuthTime(*t)
	}
	return ac
}

// SetAuthType sets the "auth_type" field.
func (ac *AuthCreate) SetAuthType(at auth.AuthType) *AuthCreate {
	ac.mutation.SetAuthType(at)
	return ac
}

// SetBelongToID sets the "belong_to" edge to the User entity by ID.
func (ac *AuthCreate) SetBelongToID(id int) *AuthCreate {
	ac.mutation.SetBelongToID(id)
	return ac
}

// SetNillableBelongToID sets the "belong_to" edge to the User entity by ID if the given value is not nil.
func (ac *AuthCreate) SetNillableBelongToID(id *int) *AuthCreate {
	if id != nil {
		ac = ac.SetBelongToID(*id)
	}
	return ac
}

// SetBelongTo sets the "belong_to" edge to the User entity.
func (ac *AuthCreate) SetBelongTo(u *User) *AuthCreate {
	return ac.SetBelongToID(u.ID)
}

// Mutation returns the AuthMutation object of the builder.
func (ac *AuthCreate) Mutation() *AuthMutation {
	return ac.mutation
}

// Save creates the Auth in the database.
func (ac *AuthCreate) Save(ctx context.Context) (*Auth, error) {
	var (
		err  error
		node *Auth
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuthMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AuthCreate) SaveX(ctx context.Context) *Auth {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AuthCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AuthCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AuthCreate) defaults() {
	if _, ok := ac.mutation.LastAuthTime(); !ok {
		v := auth.DefaultLastAuthTime()
		ac.mutation.SetLastAuthTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AuthCreate) check() error {
	if _, ok := ac.mutation.LastAuthTime(); !ok {
		return &ValidationError{Name: "last_auth_time", err: errors.New(`ent: missing required field "last_auth_time"`)}
	}
	if _, ok := ac.mutation.AuthType(); !ok {
		return &ValidationError{Name: "auth_type", err: errors.New(`ent: missing required field "auth_type"`)}
	}
	if v, ok := ac.mutation.AuthType(); ok {
		if err := auth.AuthTypeValidator(v); err != nil {
			return &ValidationError{Name: "auth_type", err: fmt.Errorf(`ent: validator failed for field "auth_type": %w`, err)}
		}
	}
	return nil
}

func (ac *AuthCreate) sqlSave(ctx context.Context) (*Auth, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ac *AuthCreate) createSpec() (*Auth, *sqlgraph.CreateSpec) {
	var (
		_node = &Auth{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: auth.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: auth.FieldID,
			},
		}
	)
	_spec.Schema = ac.schemaConfig.Auth
	_spec.OnConflict = ac.conflict
	if value, ok := ac.mutation.LastAuthTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: auth.FieldLastAuthTime,
		})
		_node.LastAuthTime = value
	}
	if value, ok := ac.mutation.AuthType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: auth.FieldAuthType,
		})
		_node.AuthType = value
	}
	if nodes := ac.mutation.BelongToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   auth.BelongToTable,
			Columns: []string{auth.BelongToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = ac.schemaConfig.Auth
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_auth_histories = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Auth.Create().
//		SetLastAuthTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AuthUpsert) {
//			SetLastAuthTime(v+v).
//		}).
//		Exec(ctx)
//
func (ac *AuthCreate) OnConflict(opts ...sql.ConflictOption) *AuthUpsertOne {
	ac.conflict = opts
	return &AuthUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Auth.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ac *AuthCreate) OnConflictColumns(columns ...string) *AuthUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AuthUpsertOne{
		create: ac,
	}
}

type (
	// AuthUpsertOne is the builder for "upsert"-ing
	//  one Auth node.
	AuthUpsertOne struct {
		create *AuthCreate
	}

	// AuthUpsert is the "OnConflict" setter.
	AuthUpsert struct {
		*sql.UpdateSet
	}
)

// SetLastAuthTime sets the "last_auth_time" field.
func (u *AuthUpsert) SetLastAuthTime(v time.Time) *AuthUpsert {
	u.Set(auth.FieldLastAuthTime, v)
	return u
}

// UpdateLastAuthTime sets the "last_auth_time" field to the value that was provided on create.
func (u *AuthUpsert) UpdateLastAuthTime() *AuthUpsert {
	u.SetExcluded(auth.FieldLastAuthTime)
	return u
}

// SetAuthType sets the "auth_type" field.
func (u *AuthUpsert) SetAuthType(v auth.AuthType) *AuthUpsert {
	u.Set(auth.FieldAuthType, v)
	return u
}

// UpdateAuthType sets the "auth_type" field to the value that was provided on create.
func (u *AuthUpsert) UpdateAuthType() *AuthUpsert {
	u.SetExcluded(auth.FieldAuthType)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Auth.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *AuthUpsertOne) UpdateNewValues() *AuthUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Auth.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AuthUpsertOne) Ignore() *AuthUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AuthUpsertOne) DoNothing() *AuthUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AuthCreate.OnConflict
// documentation for more info.
func (u *AuthUpsertOne) Update(set func(*AuthUpsert)) *AuthUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AuthUpsert{UpdateSet: update})
	}))
	return u
}

// SetLastAuthTime sets the "last_auth_time" field.
func (u *AuthUpsertOne) SetLastAuthTime(v time.Time) *AuthUpsertOne {
	return u.Update(func(s *AuthUpsert) {
		s.SetLastAuthTime(v)
	})
}

// UpdateLastAuthTime sets the "last_auth_time" field to the value that was provided on create.
func (u *AuthUpsertOne) UpdateLastAuthTime() *AuthUpsertOne {
	return u.Update(func(s *AuthUpsert) {
		s.UpdateLastAuthTime()
	})
}

// SetAuthType sets the "auth_type" field.
func (u *AuthUpsertOne) SetAuthType(v auth.AuthType) *AuthUpsertOne {
	return u.Update(func(s *AuthUpsert) {
		s.SetAuthType(v)
	})
}

// UpdateAuthType sets the "auth_type" field to the value that was provided on create.
func (u *AuthUpsertOne) UpdateAuthType() *AuthUpsertOne {
	return u.Update(func(s *AuthUpsert) {
		s.UpdateAuthType()
	})
}

// Exec executes the query.
func (u *AuthUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AuthCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AuthUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AuthUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AuthUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AuthCreateBulk is the builder for creating many Auth entities in bulk.
type AuthCreateBulk struct {
	config
	builders []*AuthCreate
	conflict []sql.ConflictOption
}

// Save creates the Auth entities in the database.
func (acb *AuthCreateBulk) Save(ctx context.Context) ([]*Auth, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Auth, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuthMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AuthCreateBulk) SaveX(ctx context.Context) []*Auth {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AuthCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AuthCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Auth.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AuthUpsert) {
//			SetLastAuthTime(v+v).
//		}).
//		Exec(ctx)
//
func (acb *AuthCreateBulk) OnConflict(opts ...sql.ConflictOption) *AuthUpsertBulk {
	acb.conflict = opts
	return &AuthUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Auth.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (acb *AuthCreateBulk) OnConflictColumns(columns ...string) *AuthUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AuthUpsertBulk{
		create: acb,
	}
}

// AuthUpsertBulk is the builder for "upsert"-ing
// a bulk of Auth nodes.
type AuthUpsertBulk struct {
	create *AuthCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Auth.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *AuthUpsertBulk) UpdateNewValues() *AuthUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Auth.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AuthUpsertBulk) Ignore() *AuthUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AuthUpsertBulk) DoNothing() *AuthUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AuthCreateBulk.OnConflict
// documentation for more info.
func (u *AuthUpsertBulk) Update(set func(*AuthUpsert)) *AuthUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AuthUpsert{UpdateSet: update})
	}))
	return u
}

// SetLastAuthTime sets the "last_auth_time" field.
func (u *AuthUpsertBulk) SetLastAuthTime(v time.Time) *AuthUpsertBulk {
	return u.Update(func(s *AuthUpsert) {
		s.SetLastAuthTime(v)
	})
}

// UpdateLastAuthTime sets the "last_auth_time" field to the value that was provided on create.
func (u *AuthUpsertBulk) UpdateLastAuthTime() *AuthUpsertBulk {
	return u.Update(func(s *AuthUpsert) {
		s.UpdateLastAuthTime()
	})
}

// SetAuthType sets the "auth_type" field.
func (u *AuthUpsertBulk) SetAuthType(v auth.AuthType) *AuthUpsertBulk {
	return u.Update(func(s *AuthUpsert) {
		s.SetAuthType(v)
	})
}

// UpdateAuthType sets the "auth_type" field to the value that was provided on create.
func (u *AuthUpsertBulk) UpdateAuthType() *AuthUpsertBulk {
	return u.Update(func(s *AuthUpsert) {
		s.UpdateAuthType()
	})
}

// Exec executes the query.
func (u *AuthUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AuthCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AuthCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AuthUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
