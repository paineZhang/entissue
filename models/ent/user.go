// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"wing/models/ent/user"

	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateByUser holds the value of the "create_by_user" field.
	CreateByUser int `json:"create_by_user,omitempty"`
	// UpdateByUser holds the value of the "update_by_user" field.
	UpdateByUser int `json:"update_by_user,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime *time.Time `json:"update_time,omitempty"`
	// AccountName holds the value of the "account_name" field.
	AccountName string `json:"account_name,omitempty"`
	// StaffType holds the value of the "staff_type" field.
	StaffType user.StaffType `json:"staff_type,omitempty"`
	// IsOnJob holds the value of the "is_on_job" field.
	IsOnJob bool `json:"is_on_job,omitempty"`
	// FamilyName holds the value of the "family_name" field.
	FamilyName string `json:"family_name,omitempty"`
	// GivenName holds the value of the "given_name" field.
	GivenName string `json:"given_name,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// Birthday holds the value of the "birthday" field.
	Birthday *time.Time `json:"birthday,omitempty"`
	// IDNumber holds the value of the "id_number" field.
	IDNumber *string `json:"id_number,omitempty"`
	// Sex holds the value of the "sex" field.
	Sex *user.Sex `json:"sex,omitempty"`
	// PhoneNumber holds the value of the "phone_number" field.
	PhoneNumber *string `json:"phone_number,omitempty"`
	// Address holds the value of the "address" field.
	Address *string `json:"address,omitempty"`
	// StaffID holds the value of the "staff_id" field.
	StaffID string `json:"staff_id,omitempty"`
	// PersonalEmail holds the value of the "personal_email" field.
	PersonalEmail string `json:"personal_email,omitempty"`
	// IntranetWorkEmail holds the value of the "intranet_work_email" field.
	IntranetWorkEmail string `json:"intranet_work_email,omitempty"`
	// ExtranetWorkEmail holds the value of the "extranet_work_email" field.
	ExtranetWorkEmail string `json:"extranet_work_email,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges UserEdges `json:"edges"`
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// CreateBy holds the value of the create_by edge.
	CreateBy *User `json:"create_by,omitempty"`
	// UpdateBy holds the value of the update_by edge.
	UpdateBy *User `json:"update_by,omitempty"`
	// AuthHistories holds the value of the authHistories edge.
	AuthHistories []*Auth `json:"authHistories,omitempty"`
	// JobHistories holds the value of the jobHistories edge.
	JobHistories []*JobHistory `json:"jobHistories,omitempty"`
	// Creates holds the value of the creates edge.
	Creates []*User `json:"creates,omitempty"`
	// Updates holds the value of the updates edge.
	Updates []*User `json:"updates,omitempty"`
	// BelongToOrgUnitMembers holds the value of the belongToOrgUnitMembers edge.
	BelongToOrgUnitMembers []*OrgUnitMember `json:"belongToOrgUnitMembers,omitempty"`
	// BelongToOg holds the value of the belongToOg edge.
	BelongToOg []*Organization `json:"belongToOg,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// CreateByOrErr returns the CreateBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) CreateByOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.CreateBy == nil {
			// The edge create_by was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.CreateBy, nil
	}
	return nil, &NotLoadedError{edge: "create_by"}
}

// UpdateByOrErr returns the UpdateBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) UpdateByOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.UpdateBy == nil {
			// The edge update_by was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.UpdateBy, nil
	}
	return nil, &NotLoadedError{edge: "update_by"}
}

// AuthHistoriesOrErr returns the AuthHistories value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AuthHistoriesOrErr() ([]*Auth, error) {
	if e.loadedTypes[2] {
		return e.AuthHistories, nil
	}
	return nil, &NotLoadedError{edge: "authHistories"}
}

// JobHistoriesOrErr returns the JobHistories value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) JobHistoriesOrErr() ([]*JobHistory, error) {
	if e.loadedTypes[3] {
		return e.JobHistories, nil
	}
	return nil, &NotLoadedError{edge: "jobHistories"}
}

// CreatesOrErr returns the Creates value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CreatesOrErr() ([]*User, error) {
	if e.loadedTypes[4] {
		return e.Creates, nil
	}
	return nil, &NotLoadedError{edge: "creates"}
}

// UpdatesOrErr returns the Updates value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UpdatesOrErr() ([]*User, error) {
	if e.loadedTypes[5] {
		return e.Updates, nil
	}
	return nil, &NotLoadedError{edge: "updates"}
}

// BelongToOrgUnitMembersOrErr returns the BelongToOrgUnitMembers value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) BelongToOrgUnitMembersOrErr() ([]*OrgUnitMember, error) {
	if e.loadedTypes[6] {
		return e.BelongToOrgUnitMembers, nil
	}
	return nil, &NotLoadedError{edge: "belongToOrgUnitMembers"}
}

// BelongToOgOrErr returns the BelongToOg value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) BelongToOgOrErr() ([]*Organization, error) {
	if e.loadedTypes[7] {
		return e.BelongToOg, nil
	}
	return nil, &NotLoadedError{edge: "belongToOg"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldIsOnJob:
			values[i] = new(sql.NullBool)
		case user.FieldID, user.FieldCreateByUser, user.FieldUpdateByUser:
			values[i] = new(sql.NullInt64)
		case user.FieldAccountName, user.FieldStaffType, user.FieldFamilyName, user.FieldGivenName, user.FieldDisplayName, user.FieldIDNumber, user.FieldSex, user.FieldPhoneNumber, user.FieldAddress, user.FieldStaffID, user.FieldPersonalEmail, user.FieldIntranetWorkEmail, user.FieldExtranetWorkEmail:
			values[i] = new(sql.NullString)
		case user.FieldCreateTime, user.FieldUpdateTime, user.FieldBirthday:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldCreateByUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by_user", values[i])
			} else if value.Valid {
				u.CreateByUser = int(value.Int64)
			}
		case user.FieldUpdateByUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_by_user", values[i])
			} else if value.Valid {
				u.UpdateByUser = int(value.Int64)
			}
		case user.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				u.CreateTime = value.Time
			}
		case user.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				u.UpdateTime = new(time.Time)
				*u.UpdateTime = value.Time
			}
		case user.FieldAccountName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account_name", values[i])
			} else if value.Valid {
				u.AccountName = value.String
			}
		case user.FieldStaffType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field staff_type", values[i])
			} else if value.Valid {
				u.StaffType = user.StaffType(value.String)
			}
		case user.FieldIsOnJob:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_on_job", values[i])
			} else if value.Valid {
				u.IsOnJob = value.Bool
			}
		case user.FieldFamilyName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field family_name", values[i])
			} else if value.Valid {
				u.FamilyName = value.String
			}
		case user.FieldGivenName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field given_name", values[i])
			} else if value.Valid {
				u.GivenName = value.String
			}
		case user.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				u.DisplayName = value.String
			}
		case user.FieldBirthday:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field birthday", values[i])
			} else if value.Valid {
				u.Birthday = new(time.Time)
				*u.Birthday = value.Time
			}
		case user.FieldIDNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id_number", values[i])
			} else if value.Valid {
				u.IDNumber = new(string)
				*u.IDNumber = value.String
			}
		case user.FieldSex:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sex", values[i])
			} else if value.Valid {
				u.Sex = new(user.Sex)
				*u.Sex = user.Sex(value.String)
			}
		case user.FieldPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number", values[i])
			} else if value.Valid {
				u.PhoneNumber = new(string)
				*u.PhoneNumber = value.String
			}
		case user.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				u.Address = new(string)
				*u.Address = value.String
			}
		case user.FieldStaffID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field staff_id", values[i])
			} else if value.Valid {
				u.StaffID = value.String
			}
		case user.FieldPersonalEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field personal_email", values[i])
			} else if value.Valid {
				u.PersonalEmail = value.String
			}
		case user.FieldIntranetWorkEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field intranet_work_email", values[i])
			} else if value.Valid {
				u.IntranetWorkEmail = value.String
			}
		case user.FieldExtranetWorkEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field extranet_work_email", values[i])
			} else if value.Valid {
				u.ExtranetWorkEmail = value.String
			}
		}
	}
	return nil
}

// QueryCreateBy queries the "create_by" edge of the User entity.
func (u *User) QueryCreateBy() *UserQuery {
	return (&UserClient{config: u.config}).QueryCreateBy(u)
}

// QueryUpdateBy queries the "update_by" edge of the User entity.
func (u *User) QueryUpdateBy() *UserQuery {
	return (&UserClient{config: u.config}).QueryUpdateBy(u)
}

// QueryAuthHistories queries the "authHistories" edge of the User entity.
func (u *User) QueryAuthHistories() *AuthQuery {
	return (&UserClient{config: u.config}).QueryAuthHistories(u)
}

// QueryJobHistories queries the "jobHistories" edge of the User entity.
func (u *User) QueryJobHistories() *JobHistoryQuery {
	return (&UserClient{config: u.config}).QueryJobHistories(u)
}

// QueryCreates queries the "creates" edge of the User entity.
func (u *User) QueryCreates() *UserQuery {
	return (&UserClient{config: u.config}).QueryCreates(u)
}

// QueryUpdates queries the "updates" edge of the User entity.
func (u *User) QueryUpdates() *UserQuery {
	return (&UserClient{config: u.config}).QueryUpdates(u)
}

// QueryBelongToOrgUnitMembers queries the "belongToOrgUnitMembers" edge of the User entity.
func (u *User) QueryBelongToOrgUnitMembers() *OrgUnitMemberQuery {
	return (&UserClient{config: u.config}).QueryBelongToOrgUnitMembers(u)
}

// QueryBelongToOg queries the "belongToOg" edge of the User entity.
func (u *User) QueryBelongToOg() *OrganizationQuery {
	return (&UserClient{config: u.config}).QueryBelongToOg(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", create_by_user=")
	builder.WriteString(fmt.Sprintf("%v", u.CreateByUser))
	builder.WriteString(", update_by_user=")
	builder.WriteString(fmt.Sprintf("%v", u.UpdateByUser))
	builder.WriteString(", create_time=")
	builder.WriteString(u.CreateTime.Format(time.ANSIC))
	if v := u.UpdateTime; v != nil {
		builder.WriteString(", update_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", account_name=")
	builder.WriteString(u.AccountName)
	builder.WriteString(", staff_type=")
	builder.WriteString(fmt.Sprintf("%v", u.StaffType))
	builder.WriteString(", is_on_job=")
	builder.WriteString(fmt.Sprintf("%v", u.IsOnJob))
	builder.WriteString(", family_name=")
	builder.WriteString(u.FamilyName)
	builder.WriteString(", given_name=")
	builder.WriteString(u.GivenName)
	builder.WriteString(", display_name=")
	builder.WriteString(u.DisplayName)
	if v := u.Birthday; v != nil {
		builder.WriteString(", birthday=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := u.IDNumber; v != nil {
		builder.WriteString(", id_number=")
		builder.WriteString(*v)
	}
	if v := u.Sex; v != nil {
		builder.WriteString(", sex=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := u.PhoneNumber; v != nil {
		builder.WriteString(", phone_number=")
		builder.WriteString(*v)
	}
	if v := u.Address; v != nil {
		builder.WriteString(", address=")
		builder.WriteString(*v)
	}
	builder.WriteString(", staff_id=")
	builder.WriteString(u.StaffID)
	builder.WriteString(", personal_email=")
	builder.WriteString(u.PersonalEmail)
	builder.WriteString(", intranet_work_email=")
	builder.WriteString(u.IntranetWorkEmail)
	builder.WriteString(", extranet_work_email=")
	builder.WriteString(u.ExtranetWorkEmail)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
