// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"wing/models/ent/auth"
	"wing/models/ent/internal"
	"wing/models/ent/jobhistory"
	"wing/models/ent/organization"
	"wing/models/ent/orgunitmember"
	"wing/models/ent/predicate"
	"wing/models/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetCreateByUser sets the "create_by_user" field.
func (uu *UserUpdate) SetCreateByUser(i int) *UserUpdate {
	uu.mutation.SetCreateByUser(i)
	return uu
}

// SetNillableCreateByUser sets the "create_by_user" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreateByUser(i *int) *UserUpdate {
	if i != nil {
		uu.SetCreateByUser(*i)
	}
	return uu
}

// ClearCreateByUser clears the value of the "create_by_user" field.
func (uu *UserUpdate) ClearCreateByUser() *UserUpdate {
	uu.mutation.ClearCreateByUser()
	return uu
}

// SetUpdateByUser sets the "update_by_user" field.
func (uu *UserUpdate) SetUpdateByUser(i int) *UserUpdate {
	uu.mutation.SetUpdateByUser(i)
	return uu
}

// SetNillableUpdateByUser sets the "update_by_user" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUpdateByUser(i *int) *UserUpdate {
	if i != nil {
		uu.SetUpdateByUser(*i)
	}
	return uu
}

// ClearUpdateByUser clears the value of the "update_by_user" field.
func (uu *UserUpdate) ClearUpdateByUser() *UserUpdate {
	uu.mutation.ClearUpdateByUser()
	return uu
}

// SetUpdateTime sets the "update_time" field.
func (uu *UserUpdate) SetUpdateTime(t time.Time) *UserUpdate {
	uu.mutation.SetUpdateTime(t)
	return uu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (uu *UserUpdate) ClearUpdateTime() *UserUpdate {
	uu.mutation.ClearUpdateTime()
	return uu
}

// SetAccountName sets the "account_name" field.
func (uu *UserUpdate) SetAccountName(s string) *UserUpdate {
	uu.mutation.SetAccountName(s)
	return uu
}

// SetStaffType sets the "staff_type" field.
func (uu *UserUpdate) SetStaffType(ut user.StaffType) *UserUpdate {
	uu.mutation.SetStaffType(ut)
	return uu
}

// SetIsOnJob sets the "is_on_job" field.
func (uu *UserUpdate) SetIsOnJob(b bool) *UserUpdate {
	uu.mutation.SetIsOnJob(b)
	return uu
}

// SetNillableIsOnJob sets the "is_on_job" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsOnJob(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsOnJob(*b)
	}
	return uu
}

// SetFamilyName sets the "family_name" field.
func (uu *UserUpdate) SetFamilyName(s string) *UserUpdate {
	uu.mutation.SetFamilyName(s)
	return uu
}

// SetGivenName sets the "given_name" field.
func (uu *UserUpdate) SetGivenName(s string) *UserUpdate {
	uu.mutation.SetGivenName(s)
	return uu
}

// SetDisplayName sets the "display_name" field.
func (uu *UserUpdate) SetDisplayName(s string) *UserUpdate {
	uu.mutation.SetDisplayName(s)
	return uu
}

// SetBirthday sets the "birthday" field.
func (uu *UserUpdate) SetBirthday(t time.Time) *UserUpdate {
	uu.mutation.SetBirthday(t)
	return uu
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBirthday(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetBirthday(*t)
	}
	return uu
}

// ClearBirthday clears the value of the "birthday" field.
func (uu *UserUpdate) ClearBirthday() *UserUpdate {
	uu.mutation.ClearBirthday()
	return uu
}

// SetIDNumber sets the "id_number" field.
func (uu *UserUpdate) SetIDNumber(s string) *UserUpdate {
	uu.mutation.SetIDNumber(s)
	return uu
}

// SetNillableIDNumber sets the "id_number" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIDNumber(s *string) *UserUpdate {
	if s != nil {
		uu.SetIDNumber(*s)
	}
	return uu
}

// ClearIDNumber clears the value of the "id_number" field.
func (uu *UserUpdate) ClearIDNumber() *UserUpdate {
	uu.mutation.ClearIDNumber()
	return uu
}

// SetSex sets the "sex" field.
func (uu *UserUpdate) SetSex(u user.Sex) *UserUpdate {
	uu.mutation.SetSex(u)
	return uu
}

// SetNillableSex sets the "sex" field if the given value is not nil.
func (uu *UserUpdate) SetNillableSex(u *user.Sex) *UserUpdate {
	if u != nil {
		uu.SetSex(*u)
	}
	return uu
}

// ClearSex clears the value of the "sex" field.
func (uu *UserUpdate) ClearSex() *UserUpdate {
	uu.mutation.ClearSex()
	return uu
}

// SetPhoneNumber sets the "phone_number" field.
func (uu *UserUpdate) SetPhoneNumber(s string) *UserUpdate {
	uu.mutation.SetPhoneNumber(s)
	return uu
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhoneNumber(s *string) *UserUpdate {
	if s != nil {
		uu.SetPhoneNumber(*s)
	}
	return uu
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (uu *UserUpdate) ClearPhoneNumber() *UserUpdate {
	uu.mutation.ClearPhoneNumber()
	return uu
}

// SetAddress sets the "address" field.
func (uu *UserUpdate) SetAddress(s string) *UserUpdate {
	uu.mutation.SetAddress(s)
	return uu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAddress(s *string) *UserUpdate {
	if s != nil {
		uu.SetAddress(*s)
	}
	return uu
}

// ClearAddress clears the value of the "address" field.
func (uu *UserUpdate) ClearAddress() *UserUpdate {
	uu.mutation.ClearAddress()
	return uu
}

// SetStaffID sets the "staff_id" field.
func (uu *UserUpdate) SetStaffID(s string) *UserUpdate {
	uu.mutation.SetStaffID(s)
	return uu
}

// SetNillableStaffID sets the "staff_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableStaffID(s *string) *UserUpdate {
	if s != nil {
		uu.SetStaffID(*s)
	}
	return uu
}

// ClearStaffID clears the value of the "staff_id" field.
func (uu *UserUpdate) ClearStaffID() *UserUpdate {
	uu.mutation.ClearStaffID()
	return uu
}

// SetPersonalEmail sets the "personal_email" field.
func (uu *UserUpdate) SetPersonalEmail(s string) *UserUpdate {
	uu.mutation.SetPersonalEmail(s)
	return uu
}

// SetNillablePersonalEmail sets the "personal_email" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePersonalEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetPersonalEmail(*s)
	}
	return uu
}

// ClearPersonalEmail clears the value of the "personal_email" field.
func (uu *UserUpdate) ClearPersonalEmail() *UserUpdate {
	uu.mutation.ClearPersonalEmail()
	return uu
}

// SetIntranetWorkEmail sets the "intranet_work_email" field.
func (uu *UserUpdate) SetIntranetWorkEmail(s string) *UserUpdate {
	uu.mutation.SetIntranetWorkEmail(s)
	return uu
}

// SetExtranetWorkEmail sets the "extranet_work_email" field.
func (uu *UserUpdate) SetExtranetWorkEmail(s string) *UserUpdate {
	uu.mutation.SetExtranetWorkEmail(s)
	return uu
}

// SetNillableExtranetWorkEmail sets the "extranet_work_email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableExtranetWorkEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetExtranetWorkEmail(*s)
	}
	return uu
}

// ClearExtranetWorkEmail clears the value of the "extranet_work_email" field.
func (uu *UserUpdate) ClearExtranetWorkEmail() *UserUpdate {
	uu.mutation.ClearExtranetWorkEmail()
	return uu
}

// SetCreateByID sets the "create_by" edge to the User entity by ID.
func (uu *UserUpdate) SetCreateByID(id int) *UserUpdate {
	uu.mutation.SetCreateByID(id)
	return uu
}

// SetNillableCreateByID sets the "create_by" edge to the User entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableCreateByID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetCreateByID(*id)
	}
	return uu
}

// SetCreateBy sets the "create_by" edge to the User entity.
func (uu *UserUpdate) SetCreateBy(u *User) *UserUpdate {
	return uu.SetCreateByID(u.ID)
}

// SetUpdateByID sets the "update_by" edge to the User entity by ID.
func (uu *UserUpdate) SetUpdateByID(id int) *UserUpdate {
	uu.mutation.SetUpdateByID(id)
	return uu
}

// SetNillableUpdateByID sets the "update_by" edge to the User entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableUpdateByID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetUpdateByID(*id)
	}
	return uu
}

// SetUpdateBy sets the "update_by" edge to the User entity.
func (uu *UserUpdate) SetUpdateBy(u *User) *UserUpdate {
	return uu.SetUpdateByID(u.ID)
}

// AddAuthHistoryIDs adds the "authHistories" edge to the Auth entity by IDs.
func (uu *UserUpdate) AddAuthHistoryIDs(ids ...int) *UserUpdate {
	uu.mutation.AddAuthHistoryIDs(ids...)
	return uu
}

// AddAuthHistories adds the "authHistories" edges to the Auth entity.
func (uu *UserUpdate) AddAuthHistories(a ...*Auth) *UserUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddAuthHistoryIDs(ids...)
}

// AddJobHistoryIDs adds the "jobHistories" edge to the JobHistory entity by IDs.
func (uu *UserUpdate) AddJobHistoryIDs(ids ...int) *UserUpdate {
	uu.mutation.AddJobHistoryIDs(ids...)
	return uu
}

// AddJobHistories adds the "jobHistories" edges to the JobHistory entity.
func (uu *UserUpdate) AddJobHistories(j ...*JobHistory) *UserUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uu.AddJobHistoryIDs(ids...)
}

// AddCreateIDs adds the "creates" edge to the User entity by IDs.
func (uu *UserUpdate) AddCreateIDs(ids ...int) *UserUpdate {
	uu.mutation.AddCreateIDs(ids...)
	return uu
}

// AddCreates adds the "creates" edges to the User entity.
func (uu *UserUpdate) AddCreates(u ...*User) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddCreateIDs(ids...)
}

// AddUpdateIDs adds the "updates" edge to the User entity by IDs.
func (uu *UserUpdate) AddUpdateIDs(ids ...int) *UserUpdate {
	uu.mutation.AddUpdateIDs(ids...)
	return uu
}

// AddUpdates adds the "updates" edges to the User entity.
func (uu *UserUpdate) AddUpdates(u ...*User) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddUpdateIDs(ids...)
}

// AddBelongToOrgUnitMemberIDs adds the "belongToOrgUnitMembers" edge to the OrgUnitMember entity by IDs.
func (uu *UserUpdate) AddBelongToOrgUnitMemberIDs(ids ...int) *UserUpdate {
	uu.mutation.AddBelongToOrgUnitMemberIDs(ids...)
	return uu
}

// AddBelongToOrgUnitMembers adds the "belongToOrgUnitMembers" edges to the OrgUnitMember entity.
func (uu *UserUpdate) AddBelongToOrgUnitMembers(o ...*OrgUnitMember) *UserUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.AddBelongToOrgUnitMemberIDs(ids...)
}

// AddBelongToOgIDs adds the "belongToOg" edge to the Organization entity by IDs.
func (uu *UserUpdate) AddBelongToOgIDs(ids ...int) *UserUpdate {
	uu.mutation.AddBelongToOgIDs(ids...)
	return uu
}

// AddBelongToOg adds the "belongToOg" edges to the Organization entity.
func (uu *UserUpdate) AddBelongToOg(o ...*Organization) *UserUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.AddBelongToOgIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearCreateBy clears the "create_by" edge to the User entity.
func (uu *UserUpdate) ClearCreateBy() *UserUpdate {
	uu.mutation.ClearCreateBy()
	return uu
}

// ClearUpdateBy clears the "update_by" edge to the User entity.
func (uu *UserUpdate) ClearUpdateBy() *UserUpdate {
	uu.mutation.ClearUpdateBy()
	return uu
}

// ClearAuthHistories clears all "authHistories" edges to the Auth entity.
func (uu *UserUpdate) ClearAuthHistories() *UserUpdate {
	uu.mutation.ClearAuthHistories()
	return uu
}

// RemoveAuthHistoryIDs removes the "authHistories" edge to Auth entities by IDs.
func (uu *UserUpdate) RemoveAuthHistoryIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveAuthHistoryIDs(ids...)
	return uu
}

// RemoveAuthHistories removes "authHistories" edges to Auth entities.
func (uu *UserUpdate) RemoveAuthHistories(a ...*Auth) *UserUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemoveAuthHistoryIDs(ids...)
}

// ClearJobHistories clears all "jobHistories" edges to the JobHistory entity.
func (uu *UserUpdate) ClearJobHistories() *UserUpdate {
	uu.mutation.ClearJobHistories()
	return uu
}

// RemoveJobHistoryIDs removes the "jobHistories" edge to JobHistory entities by IDs.
func (uu *UserUpdate) RemoveJobHistoryIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveJobHistoryIDs(ids...)
	return uu
}

// RemoveJobHistories removes "jobHistories" edges to JobHistory entities.
func (uu *UserUpdate) RemoveJobHistories(j ...*JobHistory) *UserUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uu.RemoveJobHistoryIDs(ids...)
}

// ClearCreates clears all "creates" edges to the User entity.
func (uu *UserUpdate) ClearCreates() *UserUpdate {
	uu.mutation.ClearCreates()
	return uu
}

// RemoveCreateIDs removes the "creates" edge to User entities by IDs.
func (uu *UserUpdate) RemoveCreateIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveCreateIDs(ids...)
	return uu
}

// RemoveCreates removes "creates" edges to User entities.
func (uu *UserUpdate) RemoveCreates(u ...*User) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveCreateIDs(ids...)
}

// ClearUpdates clears all "updates" edges to the User entity.
func (uu *UserUpdate) ClearUpdates() *UserUpdate {
	uu.mutation.ClearUpdates()
	return uu
}

// RemoveUpdateIDs removes the "updates" edge to User entities by IDs.
func (uu *UserUpdate) RemoveUpdateIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveUpdateIDs(ids...)
	return uu
}

// RemoveUpdates removes "updates" edges to User entities.
func (uu *UserUpdate) RemoveUpdates(u ...*User) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveUpdateIDs(ids...)
}

// ClearBelongToOrgUnitMembers clears all "belongToOrgUnitMembers" edges to the OrgUnitMember entity.
func (uu *UserUpdate) ClearBelongToOrgUnitMembers() *UserUpdate {
	uu.mutation.ClearBelongToOrgUnitMembers()
	return uu
}

// RemoveBelongToOrgUnitMemberIDs removes the "belongToOrgUnitMembers" edge to OrgUnitMember entities by IDs.
func (uu *UserUpdate) RemoveBelongToOrgUnitMemberIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveBelongToOrgUnitMemberIDs(ids...)
	return uu
}

// RemoveBelongToOrgUnitMembers removes "belongToOrgUnitMembers" edges to OrgUnitMember entities.
func (uu *UserUpdate) RemoveBelongToOrgUnitMembers(o ...*OrgUnitMember) *UserUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.RemoveBelongToOrgUnitMemberIDs(ids...)
}

// ClearBelongToOg clears all "belongToOg" edges to the Organization entity.
func (uu *UserUpdate) ClearBelongToOg() *UserUpdate {
	uu.mutation.ClearBelongToOg()
	return uu
}

// RemoveBelongToOgIDs removes the "belongToOg" edge to Organization entities by IDs.
func (uu *UserUpdate) RemoveBelongToOgIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveBelongToOgIDs(ids...)
	return uu
}

// RemoveBelongToOg removes "belongToOg" edges to Organization entities.
func (uu *UserUpdate) RemoveBelongToOg(o ...*Organization) *UserUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.RemoveBelongToOgIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := uu.defaults(); err != nil {
		return 0, err
	}
	if len(uu.hooks) == 0 {
		if err = uu.check(); err != nil {
			return 0, err
		}
		affected, err = uu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uu.check(); err != nil {
				return 0, err
			}
			uu.mutation = mutation
			affected, err = uu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uu.hooks) - 1; i >= 0; i-- {
			if uu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() error {
	if _, ok := uu.mutation.UpdateTime(); !ok && !uu.mutation.UpdateTimeCleared() {
		if user.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized user.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := user.UpdateDefaultUpdateTime()
		uu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.AccountName(); ok {
		if err := user.AccountNameValidator(v); err != nil {
			return &ValidationError{Name: "account_name", err: fmt.Errorf("ent: validator failed for field \"account_name\": %w", err)}
		}
	}
	if v, ok := uu.mutation.StaffType(); ok {
		if err := user.StaffTypeValidator(v); err != nil {
			return &ValidationError{Name: "staff_type", err: fmt.Errorf("ent: validator failed for field \"staff_type\": %w", err)}
		}
	}
	if v, ok := uu.mutation.FamilyName(); ok {
		if err := user.FamilyNameValidator(v); err != nil {
			return &ValidationError{Name: "family_name", err: fmt.Errorf("ent: validator failed for field \"family_name\": %w", err)}
		}
	}
	if v, ok := uu.mutation.GivenName(); ok {
		if err := user.GivenNameValidator(v); err != nil {
			return &ValidationError{Name: "given_name", err: fmt.Errorf("ent: validator failed for field \"given_name\": %w", err)}
		}
	}
	if v, ok := uu.mutation.DisplayName(); ok {
		if err := user.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf("ent: validator failed for field \"display_name\": %w", err)}
		}
	}
	if v, ok := uu.mutation.IDNumber(); ok {
		if err := user.IDNumberValidator(v); err != nil {
			return &ValidationError{Name: "id_number", err: fmt.Errorf("ent: validator failed for field \"id_number\": %w", err)}
		}
	}
	if v, ok := uu.mutation.Sex(); ok {
		if err := user.SexValidator(v); err != nil {
			return &ValidationError{Name: "sex", err: fmt.Errorf("ent: validator failed for field \"sex\": %w", err)}
		}
	}
	if v, ok := uu.mutation.PhoneNumber(); ok {
		if err := user.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf("ent: validator failed for field \"phone_number\": %w", err)}
		}
	}
	if v, ok := uu.mutation.Address(); ok {
		if err := user.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf("ent: validator failed for field \"address\": %w", err)}
		}
	}
	if v, ok := uu.mutation.StaffID(); ok {
		if err := user.StaffIDValidator(v); err != nil {
			return &ValidationError{Name: "staff_id", err: fmt.Errorf("ent: validator failed for field \"staff_id\": %w", err)}
		}
	}
	if v, ok := uu.mutation.PersonalEmail(); ok {
		if err := user.PersonalEmailValidator(v); err != nil {
			return &ValidationError{Name: "personal_email", err: fmt.Errorf("ent: validator failed for field \"personal_email\": %w", err)}
		}
	}
	if v, ok := uu.mutation.IntranetWorkEmail(); ok {
		if err := user.IntranetWorkEmailValidator(v); err != nil {
			return &ValidationError{Name: "intranet_work_email", err: fmt.Errorf("ent: validator failed for field \"intranet_work_email\": %w", err)}
		}
	}
	if v, ok := uu.mutation.ExtranetWorkEmail(); ok {
		if err := user.ExtranetWorkEmailValidator(v); err != nil {
			return &ValidationError{Name: "extranet_work_email", err: fmt.Errorf("ent: validator failed for field \"extranet_work_email\": %w", err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldUpdateTime,
		})
	}
	if uu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldUpdateTime,
		})
	}
	if value, ok := uu.mutation.AccountName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldAccountName,
		})
	}
	if value, ok := uu.mutation.StaffType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: user.FieldStaffType,
		})
	}
	if value, ok := uu.mutation.IsOnJob(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldIsOnJob,
		})
	}
	if value, ok := uu.mutation.FamilyName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldFamilyName,
		})
	}
	if value, ok := uu.mutation.GivenName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldGivenName,
		})
	}
	if value, ok := uu.mutation.DisplayName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldDisplayName,
		})
	}
	if value, ok := uu.mutation.Birthday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldBirthday,
		})
	}
	if uu.mutation.BirthdayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldBirthday,
		})
	}
	if value, ok := uu.mutation.IDNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldIDNumber,
		})
	}
	if uu.mutation.IDNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldIDNumber,
		})
	}
	if value, ok := uu.mutation.Sex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: user.FieldSex,
		})
	}
	if uu.mutation.SexCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: user.FieldSex,
		})
	}
	if value, ok := uu.mutation.PhoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPhoneNumber,
		})
	}
	if uu.mutation.PhoneNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldPhoneNumber,
		})
	}
	if value, ok := uu.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldAddress,
		})
	}
	if uu.mutation.AddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldAddress,
		})
	}
	if value, ok := uu.mutation.StaffID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldStaffID,
		})
	}
	if uu.mutation.StaffIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldStaffID,
		})
	}
	if value, ok := uu.mutation.PersonalEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPersonalEmail,
		})
	}
	if uu.mutation.PersonalEmailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldPersonalEmail,
		})
	}
	if value, ok := uu.mutation.IntranetWorkEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldIntranetWorkEmail,
		})
	}
	if value, ok := uu.mutation.ExtranetWorkEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldExtranetWorkEmail,
		})
	}
	if uu.mutation.ExtranetWorkEmailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldExtranetWorkEmail,
		})
	}
	if uu.mutation.CreateByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.CreateByTable,
			Columns: []string{user.CreateByColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = uu.schemaConfig.User
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CreateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.CreateByTable,
			Columns: []string{user.CreateByColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = uu.schemaConfig.User
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UpdateByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.UpdateByTable,
			Columns: []string{user.UpdateByColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = uu.schemaConfig.User
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UpdateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.UpdateByTable,
			Columns: []string{user.UpdateByColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = uu.schemaConfig.User
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.AuthHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuthHistoriesTable,
			Columns: []string{user.AuthHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: auth.FieldID,
				},
			},
		}
		edge.Schema = uu.schemaConfig.Auth
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAuthHistoriesIDs(); len(nodes) > 0 && !uu.mutation.AuthHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuthHistoriesTable,
			Columns: []string{user.AuthHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: auth.FieldID,
				},
			},
		}
		edge.Schema = uu.schemaConfig.Auth
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AuthHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuthHistoriesTable,
			Columns: []string{user.AuthHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: auth.FieldID,
				},
			},
		}
		edge.Schema = uu.schemaConfig.Auth
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.JobHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobHistoriesTable,
			Columns: []string{user.JobHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: jobhistory.FieldID,
				},
			},
		}
		edge.Schema = uu.schemaConfig.JobHistory
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedJobHistoriesIDs(); len(nodes) > 0 && !uu.mutation.JobHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobHistoriesTable,
			Columns: []string{user.JobHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: jobhistory.FieldID,
				},
			},
		}
		edge.Schema = uu.schemaConfig.JobHistory
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.JobHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobHistoriesTable,
			Columns: []string{user.JobHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: jobhistory.FieldID,
				},
			},
		}
		edge.Schema = uu.schemaConfig.JobHistory
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CreatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.CreatesTable,
			Columns: []string{user.CreatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = uu.schemaConfig.User
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCreatesIDs(); len(nodes) > 0 && !uu.mutation.CreatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.CreatesTable,
			Columns: []string{user.CreatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = uu.schemaConfig.User
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CreatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.CreatesTable,
			Columns: []string{user.CreatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = uu.schemaConfig.User
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UpdatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UpdatesTable,
			Columns: []string{user.UpdatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = uu.schemaConfig.User
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUpdatesIDs(); len(nodes) > 0 && !uu.mutation.UpdatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UpdatesTable,
			Columns: []string{user.UpdatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = uu.schemaConfig.User
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UpdatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UpdatesTable,
			Columns: []string{user.UpdatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = uu.schemaConfig.User
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.BelongToOrgUnitMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.BelongToOrgUnitMembersTable,
			Columns: []string{user.BelongToOrgUnitMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunitmember.FieldID,
				},
			},
		}
		edge.Schema = uu.schemaConfig.OrgUnitMember
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedBelongToOrgUnitMembersIDs(); len(nodes) > 0 && !uu.mutation.BelongToOrgUnitMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.BelongToOrgUnitMembersTable,
			Columns: []string{user.BelongToOrgUnitMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunitmember.FieldID,
				},
			},
		}
		edge.Schema = uu.schemaConfig.OrgUnitMember
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.BelongToOrgUnitMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.BelongToOrgUnitMembersTable,
			Columns: []string{user.BelongToOrgUnitMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunitmember.FieldID,
				},
			},
		}
		edge.Schema = uu.schemaConfig.OrgUnitMember
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.BelongToOgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.BelongToOgTable,
			Columns: user.BelongToOgPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		edge.Schema = uu.schemaConfig.OrganizationStaffs
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedBelongToOgIDs(); len(nodes) > 0 && !uu.mutation.BelongToOgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.BelongToOgTable,
			Columns: user.BelongToOgPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		edge.Schema = uu.schemaConfig.OrganizationStaffs
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.BelongToOgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.BelongToOgTable,
			Columns: user.BelongToOgPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		edge.Schema = uu.schemaConfig.OrganizationStaffs
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = uu.schemaConfig.User
	ctx = internal.NewSchemaConfigContext(ctx, uu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetCreateByUser sets the "create_by_user" field.
func (uuo *UserUpdateOne) SetCreateByUser(i int) *UserUpdateOne {
	uuo.mutation.SetCreateByUser(i)
	return uuo
}

// SetNillableCreateByUser sets the "create_by_user" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreateByUser(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetCreateByUser(*i)
	}
	return uuo
}

// ClearCreateByUser clears the value of the "create_by_user" field.
func (uuo *UserUpdateOne) ClearCreateByUser() *UserUpdateOne {
	uuo.mutation.ClearCreateByUser()
	return uuo
}

// SetUpdateByUser sets the "update_by_user" field.
func (uuo *UserUpdateOne) SetUpdateByUser(i int) *UserUpdateOne {
	uuo.mutation.SetUpdateByUser(i)
	return uuo
}

// SetNillableUpdateByUser sets the "update_by_user" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUpdateByUser(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetUpdateByUser(*i)
	}
	return uuo
}

// ClearUpdateByUser clears the value of the "update_by_user" field.
func (uuo *UserUpdateOne) ClearUpdateByUser() *UserUpdateOne {
	uuo.mutation.ClearUpdateByUser()
	return uuo
}

// SetUpdateTime sets the "update_time" field.
func (uuo *UserUpdateOne) SetUpdateTime(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdateTime(t)
	return uuo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (uuo *UserUpdateOne) ClearUpdateTime() *UserUpdateOne {
	uuo.mutation.ClearUpdateTime()
	return uuo
}

// SetAccountName sets the "account_name" field.
func (uuo *UserUpdateOne) SetAccountName(s string) *UserUpdateOne {
	uuo.mutation.SetAccountName(s)
	return uuo
}

// SetStaffType sets the "staff_type" field.
func (uuo *UserUpdateOne) SetStaffType(ut user.StaffType) *UserUpdateOne {
	uuo.mutation.SetStaffType(ut)
	return uuo
}

// SetIsOnJob sets the "is_on_job" field.
func (uuo *UserUpdateOne) SetIsOnJob(b bool) *UserUpdateOne {
	uuo.mutation.SetIsOnJob(b)
	return uuo
}

// SetNillableIsOnJob sets the "is_on_job" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsOnJob(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsOnJob(*b)
	}
	return uuo
}

// SetFamilyName sets the "family_name" field.
func (uuo *UserUpdateOne) SetFamilyName(s string) *UserUpdateOne {
	uuo.mutation.SetFamilyName(s)
	return uuo
}

// SetGivenName sets the "given_name" field.
func (uuo *UserUpdateOne) SetGivenName(s string) *UserUpdateOne {
	uuo.mutation.SetGivenName(s)
	return uuo
}

// SetDisplayName sets the "display_name" field.
func (uuo *UserUpdateOne) SetDisplayName(s string) *UserUpdateOne {
	uuo.mutation.SetDisplayName(s)
	return uuo
}

// SetBirthday sets the "birthday" field.
func (uuo *UserUpdateOne) SetBirthday(t time.Time) *UserUpdateOne {
	uuo.mutation.SetBirthday(t)
	return uuo
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBirthday(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetBirthday(*t)
	}
	return uuo
}

// ClearBirthday clears the value of the "birthday" field.
func (uuo *UserUpdateOne) ClearBirthday() *UserUpdateOne {
	uuo.mutation.ClearBirthday()
	return uuo
}

// SetIDNumber sets the "id_number" field.
func (uuo *UserUpdateOne) SetIDNumber(s string) *UserUpdateOne {
	uuo.mutation.SetIDNumber(s)
	return uuo
}

// SetNillableIDNumber sets the "id_number" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIDNumber(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetIDNumber(*s)
	}
	return uuo
}

// ClearIDNumber clears the value of the "id_number" field.
func (uuo *UserUpdateOne) ClearIDNumber() *UserUpdateOne {
	uuo.mutation.ClearIDNumber()
	return uuo
}

// SetSex sets the "sex" field.
func (uuo *UserUpdateOne) SetSex(u user.Sex) *UserUpdateOne {
	uuo.mutation.SetSex(u)
	return uuo
}

// SetNillableSex sets the "sex" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableSex(u *user.Sex) *UserUpdateOne {
	if u != nil {
		uuo.SetSex(*u)
	}
	return uuo
}

// ClearSex clears the value of the "sex" field.
func (uuo *UserUpdateOne) ClearSex() *UserUpdateOne {
	uuo.mutation.ClearSex()
	return uuo
}

// SetPhoneNumber sets the "phone_number" field.
func (uuo *UserUpdateOne) SetPhoneNumber(s string) *UserUpdateOne {
	uuo.mutation.SetPhoneNumber(s)
	return uuo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhoneNumber(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPhoneNumber(*s)
	}
	return uuo
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (uuo *UserUpdateOne) ClearPhoneNumber() *UserUpdateOne {
	uuo.mutation.ClearPhoneNumber()
	return uuo
}

// SetAddress sets the "address" field.
func (uuo *UserUpdateOne) SetAddress(s string) *UserUpdateOne {
	uuo.mutation.SetAddress(s)
	return uuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAddress(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAddress(*s)
	}
	return uuo
}

// ClearAddress clears the value of the "address" field.
func (uuo *UserUpdateOne) ClearAddress() *UserUpdateOne {
	uuo.mutation.ClearAddress()
	return uuo
}

// SetStaffID sets the "staff_id" field.
func (uuo *UserUpdateOne) SetStaffID(s string) *UserUpdateOne {
	uuo.mutation.SetStaffID(s)
	return uuo
}

// SetNillableStaffID sets the "staff_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableStaffID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetStaffID(*s)
	}
	return uuo
}

// ClearStaffID clears the value of the "staff_id" field.
func (uuo *UserUpdateOne) ClearStaffID() *UserUpdateOne {
	uuo.mutation.ClearStaffID()
	return uuo
}

// SetPersonalEmail sets the "personal_email" field.
func (uuo *UserUpdateOne) SetPersonalEmail(s string) *UserUpdateOne {
	uuo.mutation.SetPersonalEmail(s)
	return uuo
}

// SetNillablePersonalEmail sets the "personal_email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePersonalEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPersonalEmail(*s)
	}
	return uuo
}

// ClearPersonalEmail clears the value of the "personal_email" field.
func (uuo *UserUpdateOne) ClearPersonalEmail() *UserUpdateOne {
	uuo.mutation.ClearPersonalEmail()
	return uuo
}

// SetIntranetWorkEmail sets the "intranet_work_email" field.
func (uuo *UserUpdateOne) SetIntranetWorkEmail(s string) *UserUpdateOne {
	uuo.mutation.SetIntranetWorkEmail(s)
	return uuo
}

// SetExtranetWorkEmail sets the "extranet_work_email" field.
func (uuo *UserUpdateOne) SetExtranetWorkEmail(s string) *UserUpdateOne {
	uuo.mutation.SetExtranetWorkEmail(s)
	return uuo
}

// SetNillableExtranetWorkEmail sets the "extranet_work_email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableExtranetWorkEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetExtranetWorkEmail(*s)
	}
	return uuo
}

// ClearExtranetWorkEmail clears the value of the "extranet_work_email" field.
func (uuo *UserUpdateOne) ClearExtranetWorkEmail() *UserUpdateOne {
	uuo.mutation.ClearExtranetWorkEmail()
	return uuo
}

// SetCreateByID sets the "create_by" edge to the User entity by ID.
func (uuo *UserUpdateOne) SetCreateByID(id int) *UserUpdateOne {
	uuo.mutation.SetCreateByID(id)
	return uuo
}

// SetNillableCreateByID sets the "create_by" edge to the User entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreateByID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetCreateByID(*id)
	}
	return uuo
}

// SetCreateBy sets the "create_by" edge to the User entity.
func (uuo *UserUpdateOne) SetCreateBy(u *User) *UserUpdateOne {
	return uuo.SetCreateByID(u.ID)
}

// SetUpdateByID sets the "update_by" edge to the User entity by ID.
func (uuo *UserUpdateOne) SetUpdateByID(id int) *UserUpdateOne {
	uuo.mutation.SetUpdateByID(id)
	return uuo
}

// SetNillableUpdateByID sets the "update_by" edge to the User entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUpdateByID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetUpdateByID(*id)
	}
	return uuo
}

// SetUpdateBy sets the "update_by" edge to the User entity.
func (uuo *UserUpdateOne) SetUpdateBy(u *User) *UserUpdateOne {
	return uuo.SetUpdateByID(u.ID)
}

// AddAuthHistoryIDs adds the "authHistories" edge to the Auth entity by IDs.
func (uuo *UserUpdateOne) AddAuthHistoryIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddAuthHistoryIDs(ids...)
	return uuo
}

// AddAuthHistories adds the "authHistories" edges to the Auth entity.
func (uuo *UserUpdateOne) AddAuthHistories(a ...*Auth) *UserUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddAuthHistoryIDs(ids...)
}

// AddJobHistoryIDs adds the "jobHistories" edge to the JobHistory entity by IDs.
func (uuo *UserUpdateOne) AddJobHistoryIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddJobHistoryIDs(ids...)
	return uuo
}

// AddJobHistories adds the "jobHistories" edges to the JobHistory entity.
func (uuo *UserUpdateOne) AddJobHistories(j ...*JobHistory) *UserUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uuo.AddJobHistoryIDs(ids...)
}

// AddCreateIDs adds the "creates" edge to the User entity by IDs.
func (uuo *UserUpdateOne) AddCreateIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddCreateIDs(ids...)
	return uuo
}

// AddCreates adds the "creates" edges to the User entity.
func (uuo *UserUpdateOne) AddCreates(u ...*User) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddCreateIDs(ids...)
}

// AddUpdateIDs adds the "updates" edge to the User entity by IDs.
func (uuo *UserUpdateOne) AddUpdateIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddUpdateIDs(ids...)
	return uuo
}

// AddUpdates adds the "updates" edges to the User entity.
func (uuo *UserUpdateOne) AddUpdates(u ...*User) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddUpdateIDs(ids...)
}

// AddBelongToOrgUnitMemberIDs adds the "belongToOrgUnitMembers" edge to the OrgUnitMember entity by IDs.
func (uuo *UserUpdateOne) AddBelongToOrgUnitMemberIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddBelongToOrgUnitMemberIDs(ids...)
	return uuo
}

// AddBelongToOrgUnitMembers adds the "belongToOrgUnitMembers" edges to the OrgUnitMember entity.
func (uuo *UserUpdateOne) AddBelongToOrgUnitMembers(o ...*OrgUnitMember) *UserUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.AddBelongToOrgUnitMemberIDs(ids...)
}

// AddBelongToOgIDs adds the "belongToOg" edge to the Organization entity by IDs.
func (uuo *UserUpdateOne) AddBelongToOgIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddBelongToOgIDs(ids...)
	return uuo
}

// AddBelongToOg adds the "belongToOg" edges to the Organization entity.
func (uuo *UserUpdateOne) AddBelongToOg(o ...*Organization) *UserUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.AddBelongToOgIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearCreateBy clears the "create_by" edge to the User entity.
func (uuo *UserUpdateOne) ClearCreateBy() *UserUpdateOne {
	uuo.mutation.ClearCreateBy()
	return uuo
}

// ClearUpdateBy clears the "update_by" edge to the User entity.
func (uuo *UserUpdateOne) ClearUpdateBy() *UserUpdateOne {
	uuo.mutation.ClearUpdateBy()
	return uuo
}

// ClearAuthHistories clears all "authHistories" edges to the Auth entity.
func (uuo *UserUpdateOne) ClearAuthHistories() *UserUpdateOne {
	uuo.mutation.ClearAuthHistories()
	return uuo
}

// RemoveAuthHistoryIDs removes the "authHistories" edge to Auth entities by IDs.
func (uuo *UserUpdateOne) RemoveAuthHistoryIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveAuthHistoryIDs(ids...)
	return uuo
}

// RemoveAuthHistories removes "authHistories" edges to Auth entities.
func (uuo *UserUpdateOne) RemoveAuthHistories(a ...*Auth) *UserUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemoveAuthHistoryIDs(ids...)
}

// ClearJobHistories clears all "jobHistories" edges to the JobHistory entity.
func (uuo *UserUpdateOne) ClearJobHistories() *UserUpdateOne {
	uuo.mutation.ClearJobHistories()
	return uuo
}

// RemoveJobHistoryIDs removes the "jobHistories" edge to JobHistory entities by IDs.
func (uuo *UserUpdateOne) RemoveJobHistoryIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveJobHistoryIDs(ids...)
	return uuo
}

// RemoveJobHistories removes "jobHistories" edges to JobHistory entities.
func (uuo *UserUpdateOne) RemoveJobHistories(j ...*JobHistory) *UserUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uuo.RemoveJobHistoryIDs(ids...)
}

// ClearCreates clears all "creates" edges to the User entity.
func (uuo *UserUpdateOne) ClearCreates() *UserUpdateOne {
	uuo.mutation.ClearCreates()
	return uuo
}

// RemoveCreateIDs removes the "creates" edge to User entities by IDs.
func (uuo *UserUpdateOne) RemoveCreateIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveCreateIDs(ids...)
	return uuo
}

// RemoveCreates removes "creates" edges to User entities.
func (uuo *UserUpdateOne) RemoveCreates(u ...*User) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveCreateIDs(ids...)
}

// ClearUpdates clears all "updates" edges to the User entity.
func (uuo *UserUpdateOne) ClearUpdates() *UserUpdateOne {
	uuo.mutation.ClearUpdates()
	return uuo
}

// RemoveUpdateIDs removes the "updates" edge to User entities by IDs.
func (uuo *UserUpdateOne) RemoveUpdateIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveUpdateIDs(ids...)
	return uuo
}

// RemoveUpdates removes "updates" edges to User entities.
func (uuo *UserUpdateOne) RemoveUpdates(u ...*User) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveUpdateIDs(ids...)
}

// ClearBelongToOrgUnitMembers clears all "belongToOrgUnitMembers" edges to the OrgUnitMember entity.
func (uuo *UserUpdateOne) ClearBelongToOrgUnitMembers() *UserUpdateOne {
	uuo.mutation.ClearBelongToOrgUnitMembers()
	return uuo
}

// RemoveBelongToOrgUnitMemberIDs removes the "belongToOrgUnitMembers" edge to OrgUnitMember entities by IDs.
func (uuo *UserUpdateOne) RemoveBelongToOrgUnitMemberIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveBelongToOrgUnitMemberIDs(ids...)
	return uuo
}

// RemoveBelongToOrgUnitMembers removes "belongToOrgUnitMembers" edges to OrgUnitMember entities.
func (uuo *UserUpdateOne) RemoveBelongToOrgUnitMembers(o ...*OrgUnitMember) *UserUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.RemoveBelongToOrgUnitMemberIDs(ids...)
}

// ClearBelongToOg clears all "belongToOg" edges to the Organization entity.
func (uuo *UserUpdateOne) ClearBelongToOg() *UserUpdateOne {
	uuo.mutation.ClearBelongToOg()
	return uuo
}

// RemoveBelongToOgIDs removes the "belongToOg" edge to Organization entities by IDs.
func (uuo *UserUpdateOne) RemoveBelongToOgIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveBelongToOgIDs(ids...)
	return uuo
}

// RemoveBelongToOg removes "belongToOg" edges to Organization entities.
func (uuo *UserUpdateOne) RemoveBelongToOg(o ...*Organization) *UserUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.RemoveBelongToOgIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	if err := uuo.defaults(); err != nil {
		return nil, err
	}
	if len(uuo.hooks) == 0 {
		if err = uuo.check(); err != nil {
			return nil, err
		}
		node, err = uuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uuo.check(); err != nil {
				return nil, err
			}
			uuo.mutation = mutation
			node, err = uuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uuo.hooks) - 1; i >= 0; i-- {
			if uuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() error {
	if _, ok := uuo.mutation.UpdateTime(); !ok && !uuo.mutation.UpdateTimeCleared() {
		if user.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized user.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := user.UpdateDefaultUpdateTime()
		uuo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.AccountName(); ok {
		if err := user.AccountNameValidator(v); err != nil {
			return &ValidationError{Name: "account_name", err: fmt.Errorf("ent: validator failed for field \"account_name\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.StaffType(); ok {
		if err := user.StaffTypeValidator(v); err != nil {
			return &ValidationError{Name: "staff_type", err: fmt.Errorf("ent: validator failed for field \"staff_type\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.FamilyName(); ok {
		if err := user.FamilyNameValidator(v); err != nil {
			return &ValidationError{Name: "family_name", err: fmt.Errorf("ent: validator failed for field \"family_name\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.GivenName(); ok {
		if err := user.GivenNameValidator(v); err != nil {
			return &ValidationError{Name: "given_name", err: fmt.Errorf("ent: validator failed for field \"given_name\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.DisplayName(); ok {
		if err := user.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf("ent: validator failed for field \"display_name\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.IDNumber(); ok {
		if err := user.IDNumberValidator(v); err != nil {
			return &ValidationError{Name: "id_number", err: fmt.Errorf("ent: validator failed for field \"id_number\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.Sex(); ok {
		if err := user.SexValidator(v); err != nil {
			return &ValidationError{Name: "sex", err: fmt.Errorf("ent: validator failed for field \"sex\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.PhoneNumber(); ok {
		if err := user.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf("ent: validator failed for field \"phone_number\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.Address(); ok {
		if err := user.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf("ent: validator failed for field \"address\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.StaffID(); ok {
		if err := user.StaffIDValidator(v); err != nil {
			return &ValidationError{Name: "staff_id", err: fmt.Errorf("ent: validator failed for field \"staff_id\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.PersonalEmail(); ok {
		if err := user.PersonalEmailValidator(v); err != nil {
			return &ValidationError{Name: "personal_email", err: fmt.Errorf("ent: validator failed for field \"personal_email\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.IntranetWorkEmail(); ok {
		if err := user.IntranetWorkEmailValidator(v); err != nil {
			return &ValidationError{Name: "intranet_work_email", err: fmt.Errorf("ent: validator failed for field \"intranet_work_email\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.ExtranetWorkEmail(); ok {
		if err := user.ExtranetWorkEmailValidator(v); err != nil {
			return &ValidationError{Name: "extranet_work_email", err: fmt.Errorf("ent: validator failed for field \"extranet_work_email\": %w", err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing User.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldUpdateTime,
		})
	}
	if uuo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldUpdateTime,
		})
	}
	if value, ok := uuo.mutation.AccountName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldAccountName,
		})
	}
	if value, ok := uuo.mutation.StaffType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: user.FieldStaffType,
		})
	}
	if value, ok := uuo.mutation.IsOnJob(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldIsOnJob,
		})
	}
	if value, ok := uuo.mutation.FamilyName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldFamilyName,
		})
	}
	if value, ok := uuo.mutation.GivenName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldGivenName,
		})
	}
	if value, ok := uuo.mutation.DisplayName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldDisplayName,
		})
	}
	if value, ok := uuo.mutation.Birthday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldBirthday,
		})
	}
	if uuo.mutation.BirthdayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldBirthday,
		})
	}
	if value, ok := uuo.mutation.IDNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldIDNumber,
		})
	}
	if uuo.mutation.IDNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldIDNumber,
		})
	}
	if value, ok := uuo.mutation.Sex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: user.FieldSex,
		})
	}
	if uuo.mutation.SexCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: user.FieldSex,
		})
	}
	if value, ok := uuo.mutation.PhoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPhoneNumber,
		})
	}
	if uuo.mutation.PhoneNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldPhoneNumber,
		})
	}
	if value, ok := uuo.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldAddress,
		})
	}
	if uuo.mutation.AddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldAddress,
		})
	}
	if value, ok := uuo.mutation.StaffID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldStaffID,
		})
	}
	if uuo.mutation.StaffIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldStaffID,
		})
	}
	if value, ok := uuo.mutation.PersonalEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPersonalEmail,
		})
	}
	if uuo.mutation.PersonalEmailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldPersonalEmail,
		})
	}
	if value, ok := uuo.mutation.IntranetWorkEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldIntranetWorkEmail,
		})
	}
	if value, ok := uuo.mutation.ExtranetWorkEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldExtranetWorkEmail,
		})
	}
	if uuo.mutation.ExtranetWorkEmailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldExtranetWorkEmail,
		})
	}
	if uuo.mutation.CreateByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.CreateByTable,
			Columns: []string{user.CreateByColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = uuo.schemaConfig.User
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CreateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.CreateByTable,
			Columns: []string{user.CreateByColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = uuo.schemaConfig.User
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UpdateByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.UpdateByTable,
			Columns: []string{user.UpdateByColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = uuo.schemaConfig.User
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UpdateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.UpdateByTable,
			Columns: []string{user.UpdateByColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = uuo.schemaConfig.User
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.AuthHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuthHistoriesTable,
			Columns: []string{user.AuthHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: auth.FieldID,
				},
			},
		}
		edge.Schema = uuo.schemaConfig.Auth
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAuthHistoriesIDs(); len(nodes) > 0 && !uuo.mutation.AuthHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuthHistoriesTable,
			Columns: []string{user.AuthHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: auth.FieldID,
				},
			},
		}
		edge.Schema = uuo.schemaConfig.Auth
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AuthHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuthHistoriesTable,
			Columns: []string{user.AuthHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: auth.FieldID,
				},
			},
		}
		edge.Schema = uuo.schemaConfig.Auth
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.JobHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobHistoriesTable,
			Columns: []string{user.JobHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: jobhistory.FieldID,
				},
			},
		}
		edge.Schema = uuo.schemaConfig.JobHistory
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedJobHistoriesIDs(); len(nodes) > 0 && !uuo.mutation.JobHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobHistoriesTable,
			Columns: []string{user.JobHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: jobhistory.FieldID,
				},
			},
		}
		edge.Schema = uuo.schemaConfig.JobHistory
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.JobHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobHistoriesTable,
			Columns: []string{user.JobHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: jobhistory.FieldID,
				},
			},
		}
		edge.Schema = uuo.schemaConfig.JobHistory
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CreatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.CreatesTable,
			Columns: []string{user.CreatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = uuo.schemaConfig.User
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCreatesIDs(); len(nodes) > 0 && !uuo.mutation.CreatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.CreatesTable,
			Columns: []string{user.CreatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = uuo.schemaConfig.User
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CreatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.CreatesTable,
			Columns: []string{user.CreatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = uuo.schemaConfig.User
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UpdatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UpdatesTable,
			Columns: []string{user.UpdatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = uuo.schemaConfig.User
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUpdatesIDs(); len(nodes) > 0 && !uuo.mutation.UpdatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UpdatesTable,
			Columns: []string{user.UpdatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = uuo.schemaConfig.User
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UpdatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UpdatesTable,
			Columns: []string{user.UpdatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = uuo.schemaConfig.User
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.BelongToOrgUnitMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.BelongToOrgUnitMembersTable,
			Columns: []string{user.BelongToOrgUnitMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunitmember.FieldID,
				},
			},
		}
		edge.Schema = uuo.schemaConfig.OrgUnitMember
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedBelongToOrgUnitMembersIDs(); len(nodes) > 0 && !uuo.mutation.BelongToOrgUnitMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.BelongToOrgUnitMembersTable,
			Columns: []string{user.BelongToOrgUnitMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunitmember.FieldID,
				},
			},
		}
		edge.Schema = uuo.schemaConfig.OrgUnitMember
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.BelongToOrgUnitMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.BelongToOrgUnitMembersTable,
			Columns: []string{user.BelongToOrgUnitMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunitmember.FieldID,
				},
			},
		}
		edge.Schema = uuo.schemaConfig.OrgUnitMember
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.BelongToOgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.BelongToOgTable,
			Columns: user.BelongToOgPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		edge.Schema = uuo.schemaConfig.OrganizationStaffs
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedBelongToOgIDs(); len(nodes) > 0 && !uuo.mutation.BelongToOgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.BelongToOgTable,
			Columns: user.BelongToOgPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		edge.Schema = uuo.schemaConfig.OrganizationStaffs
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.BelongToOgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.BelongToOgTable,
			Columns: user.BelongToOgPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		edge.Schema = uuo.schemaConfig.OrganizationStaffs
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = uuo.schemaConfig.User
	ctx = internal.NewSchemaConfigContext(ctx, uuo.schemaConfig)
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
