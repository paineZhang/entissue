// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wing/models/ent/orgunit"
	"wing/models/ent/orgunitmember"
	"wing/models/ent/orgunitposition"
	"wing/models/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrgUnitPositionCreate is the builder for creating a OrgUnitPosition entity.
type OrgUnitPositionCreate struct {
	config
	mutation *OrgUnitPositionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateByUser sets the "create_by_user" field.
func (oupc *OrgUnitPositionCreate) SetCreateByUser(i int) *OrgUnitPositionCreate {
	oupc.mutation.SetCreateByUser(i)
	return oupc
}

// SetNillableCreateByUser sets the "create_by_user" field if the given value is not nil.
func (oupc *OrgUnitPositionCreate) SetNillableCreateByUser(i *int) *OrgUnitPositionCreate {
	if i != nil {
		oupc.SetCreateByUser(*i)
	}
	return oupc
}

// SetUpdateByUser sets the "update_by_user" field.
func (oupc *OrgUnitPositionCreate) SetUpdateByUser(i int) *OrgUnitPositionCreate {
	oupc.mutation.SetUpdateByUser(i)
	return oupc
}

// SetNillableUpdateByUser sets the "update_by_user" field if the given value is not nil.
func (oupc *OrgUnitPositionCreate) SetNillableUpdateByUser(i *int) *OrgUnitPositionCreate {
	if i != nil {
		oupc.SetUpdateByUser(*i)
	}
	return oupc
}

// SetCreateTime sets the "create_time" field.
func (oupc *OrgUnitPositionCreate) SetCreateTime(t time.Time) *OrgUnitPositionCreate {
	oupc.mutation.SetCreateTime(t)
	return oupc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (oupc *OrgUnitPositionCreate) SetNillableCreateTime(t *time.Time) *OrgUnitPositionCreate {
	if t != nil {
		oupc.SetCreateTime(*t)
	}
	return oupc
}

// SetUpdateTime sets the "update_time" field.
func (oupc *OrgUnitPositionCreate) SetUpdateTime(t time.Time) *OrgUnitPositionCreate {
	oupc.mutation.SetUpdateTime(t)
	return oupc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (oupc *OrgUnitPositionCreate) SetNillableUpdateTime(t *time.Time) *OrgUnitPositionCreate {
	if t != nil {
		oupc.SetUpdateTime(*t)
	}
	return oupc
}

// SetName sets the "name" field.
func (oupc *OrgUnitPositionCreate) SetName(s string) *OrgUnitPositionCreate {
	oupc.mutation.SetName(s)
	return oupc
}

// SetDuty sets the "duty" field.
func (oupc *OrgUnitPositionCreate) SetDuty(s string) *OrgUnitPositionCreate {
	oupc.mutation.SetDuty(s)
	return oupc
}

// SetNillableDuty sets the "duty" field if the given value is not nil.
func (oupc *OrgUnitPositionCreate) SetNillableDuty(s *string) *OrgUnitPositionCreate {
	if s != nil {
		oupc.SetDuty(*s)
	}
	return oupc
}

// SetLevel sets the "level" field.
func (oupc *OrgUnitPositionCreate) SetLevel(i int) *OrgUnitPositionCreate {
	oupc.mutation.SetLevel(i)
	return oupc
}

// SetOrgUnitID sets the "org_unit_id" field.
func (oupc *OrgUnitPositionCreate) SetOrgUnitID(i int) *OrgUnitPositionCreate {
	oupc.mutation.SetOrgUnitID(i)
	return oupc
}

// SetCreateByID sets the "create_by" edge to the User entity by ID.
func (oupc *OrgUnitPositionCreate) SetCreateByID(id int) *OrgUnitPositionCreate {
	oupc.mutation.SetCreateByID(id)
	return oupc
}

// SetNillableCreateByID sets the "create_by" edge to the User entity by ID if the given value is not nil.
func (oupc *OrgUnitPositionCreate) SetNillableCreateByID(id *int) *OrgUnitPositionCreate {
	if id != nil {
		oupc = oupc.SetCreateByID(*id)
	}
	return oupc
}

// SetCreateBy sets the "create_by" edge to the User entity.
func (oupc *OrgUnitPositionCreate) SetCreateBy(u *User) *OrgUnitPositionCreate {
	return oupc.SetCreateByID(u.ID)
}

// SetUpdateByID sets the "update_by" edge to the User entity by ID.
func (oupc *OrgUnitPositionCreate) SetUpdateByID(id int) *OrgUnitPositionCreate {
	oupc.mutation.SetUpdateByID(id)
	return oupc
}

// SetNillableUpdateByID sets the "update_by" edge to the User entity by ID if the given value is not nil.
func (oupc *OrgUnitPositionCreate) SetNillableUpdateByID(id *int) *OrgUnitPositionCreate {
	if id != nil {
		oupc = oupc.SetUpdateByID(*id)
	}
	return oupc
}

// SetUpdateBy sets the "update_by" edge to the User entity.
func (oupc *OrgUnitPositionCreate) SetUpdateBy(u *User) *OrgUnitPositionCreate {
	return oupc.SetUpdateByID(u.ID)
}

// AddBelongToOrgUnitMemberIDs adds the "belongToOrgUnitMembers" edge to the OrgUnitMember entity by IDs.
func (oupc *OrgUnitPositionCreate) AddBelongToOrgUnitMemberIDs(ids ...int) *OrgUnitPositionCreate {
	oupc.mutation.AddBelongToOrgUnitMemberIDs(ids...)
	return oupc
}

// AddBelongToOrgUnitMembers adds the "belongToOrgUnitMembers" edges to the OrgUnitMember entity.
func (oupc *OrgUnitPositionCreate) AddBelongToOrgUnitMembers(o ...*OrgUnitMember) *OrgUnitPositionCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oupc.AddBelongToOrgUnitMemberIDs(ids...)
}

// SetBelongToOrgUnitID sets the "belongToOrgUnit" edge to the OrgUnit entity by ID.
func (oupc *OrgUnitPositionCreate) SetBelongToOrgUnitID(id int) *OrgUnitPositionCreate {
	oupc.mutation.SetBelongToOrgUnitID(id)
	return oupc
}

// SetBelongToOrgUnit sets the "belongToOrgUnit" edge to the OrgUnit entity.
func (oupc *OrgUnitPositionCreate) SetBelongToOrgUnit(o *OrgUnit) *OrgUnitPositionCreate {
	return oupc.SetBelongToOrgUnitID(o.ID)
}

// Mutation returns the OrgUnitPositionMutation object of the builder.
func (oupc *OrgUnitPositionCreate) Mutation() *OrgUnitPositionMutation {
	return oupc.mutation
}

// Save creates the OrgUnitPosition in the database.
func (oupc *OrgUnitPositionCreate) Save(ctx context.Context) (*OrgUnitPosition, error) {
	var (
		err  error
		node *OrgUnitPosition
	)
	if err := oupc.defaults(); err != nil {
		return nil, err
	}
	if len(oupc.hooks) == 0 {
		if err = oupc.check(); err != nil {
			return nil, err
		}
		node, err = oupc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrgUnitPositionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oupc.check(); err != nil {
				return nil, err
			}
			oupc.mutation = mutation
			if node, err = oupc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(oupc.hooks) - 1; i >= 0; i-- {
			if oupc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oupc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oupc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oupc *OrgUnitPositionCreate) SaveX(ctx context.Context) *OrgUnitPosition {
	v, err := oupc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oupc *OrgUnitPositionCreate) Exec(ctx context.Context) error {
	_, err := oupc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oupc *OrgUnitPositionCreate) ExecX(ctx context.Context) {
	if err := oupc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oupc *OrgUnitPositionCreate) defaults() error {
	if _, ok := oupc.mutation.CreateTime(); !ok {
		if orgunitposition.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized orgunitposition.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := orgunitposition.DefaultCreateTime()
		oupc.mutation.SetCreateTime(v)
	}
	if _, ok := oupc.mutation.UpdateTime(); !ok {
		if orgunitposition.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized orgunitposition.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := orgunitposition.DefaultUpdateTime()
		oupc.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (oupc *OrgUnitPositionCreate) check() error {
	if _, ok := oupc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "create_time"`)}
	}
	if _, ok := oupc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if _, ok := oupc.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "level"`)}
	}
	if v, ok := oupc.mutation.Level(); ok {
		if err := orgunitposition.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "level": %w`, err)}
		}
	}
	if _, ok := oupc.mutation.OrgUnitID(); !ok {
		return &ValidationError{Name: "org_unit_id", err: errors.New(`ent: missing required field "org_unit_id"`)}
	}
	if _, ok := oupc.mutation.BelongToOrgUnitID(); !ok {
		return &ValidationError{Name: "belongToOrgUnit", err: errors.New("ent: missing required edge \"belongToOrgUnit\"")}
	}
	return nil
}

func (oupc *OrgUnitPositionCreate) sqlSave(ctx context.Context) (*OrgUnitPosition, error) {
	_node, _spec := oupc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oupc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (oupc *OrgUnitPositionCreate) createSpec() (*OrgUnitPosition, *sqlgraph.CreateSpec) {
	var (
		_node = &OrgUnitPosition{config: oupc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: orgunitposition.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orgunitposition.FieldID,
			},
		}
	)
	_spec.Schema = oupc.schemaConfig.OrgUnitPosition
	_spec.OnConflict = oupc.conflict
	if value, ok := oupc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orgunitposition.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := oupc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orgunitposition.FieldUpdateTime,
		})
		_node.UpdateTime = &value
	}
	if value, ok := oupc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orgunitposition.FieldName,
		})
		_node.Name = value
	}
	if value, ok := oupc.mutation.Duty(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orgunitposition.FieldDuty,
		})
		_node.Duty = value
	}
	if value, ok := oupc.mutation.Level(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orgunitposition.FieldLevel,
		})
		_node.Level = value
	}
	if nodes := oupc.mutation.CreateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitposition.CreateByTable,
			Columns: []string{orgunitposition.CreateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = oupc.schemaConfig.OrgUnitPosition
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreateByUser = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oupc.mutation.UpdateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitposition.UpdateByTable,
			Columns: []string{orgunitposition.UpdateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = oupc.schemaConfig.OrgUnitPosition
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UpdateByUser = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oupc.mutation.BelongToOrgUnitMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   orgunitposition.BelongToOrgUnitMembersTable,
			Columns: []string{orgunitposition.BelongToOrgUnitMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunitmember.FieldID,
				},
			},
		}
		edge.Schema = oupc.schemaConfig.OrgUnitMember
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oupc.mutation.BelongToOrgUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgunitposition.BelongToOrgUnitTable,
			Columns: []string{orgunitposition.BelongToOrgUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunit.FieldID,
				},
			},
		}
		edge.Schema = oupc.schemaConfig.OrgUnitPosition
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrgUnitID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrgUnitPosition.Create().
//		SetCreateByUser(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrgUnitPositionUpsert) {
//			SetCreateByUser(v+v).
//		}).
//		Exec(ctx)
//
func (oupc *OrgUnitPositionCreate) OnConflict(opts ...sql.ConflictOption) *OrgUnitPositionUpsertOne {
	oupc.conflict = opts
	return &OrgUnitPositionUpsertOne{
		create: oupc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrgUnitPosition.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (oupc *OrgUnitPositionCreate) OnConflictColumns(columns ...string) *OrgUnitPositionUpsertOne {
	oupc.conflict = append(oupc.conflict, sql.ConflictColumns(columns...))
	return &OrgUnitPositionUpsertOne{
		create: oupc,
	}
}

type (
	// OrgUnitPositionUpsertOne is the builder for "upsert"-ing
	//  one OrgUnitPosition node.
	OrgUnitPositionUpsertOne struct {
		create *OrgUnitPositionCreate
	}

	// OrgUnitPositionUpsert is the "OnConflict" setter.
	OrgUnitPositionUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreateByUser sets the "create_by_user" field.
func (u *OrgUnitPositionUpsert) SetCreateByUser(v int) *OrgUnitPositionUpsert {
	u.Set(orgunitposition.FieldCreateByUser, v)
	return u
}

// UpdateCreateByUser sets the "create_by_user" field to the value that was provided on create.
func (u *OrgUnitPositionUpsert) UpdateCreateByUser() *OrgUnitPositionUpsert {
	u.SetExcluded(orgunitposition.FieldCreateByUser)
	return u
}

// ClearCreateByUser clears the value of the "create_by_user" field.
func (u *OrgUnitPositionUpsert) ClearCreateByUser() *OrgUnitPositionUpsert {
	u.SetNull(orgunitposition.FieldCreateByUser)
	return u
}

// SetUpdateByUser sets the "update_by_user" field.
func (u *OrgUnitPositionUpsert) SetUpdateByUser(v int) *OrgUnitPositionUpsert {
	u.Set(orgunitposition.FieldUpdateByUser, v)
	return u
}

// UpdateUpdateByUser sets the "update_by_user" field to the value that was provided on create.
func (u *OrgUnitPositionUpsert) UpdateUpdateByUser() *OrgUnitPositionUpsert {
	u.SetExcluded(orgunitposition.FieldUpdateByUser)
	return u
}

// ClearUpdateByUser clears the value of the "update_by_user" field.
func (u *OrgUnitPositionUpsert) ClearUpdateByUser() *OrgUnitPositionUpsert {
	u.SetNull(orgunitposition.FieldUpdateByUser)
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *OrgUnitPositionUpsert) SetCreateTime(v time.Time) *OrgUnitPositionUpsert {
	u.Set(orgunitposition.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *OrgUnitPositionUpsert) UpdateCreateTime() *OrgUnitPositionUpsert {
	u.SetExcluded(orgunitposition.FieldCreateTime)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *OrgUnitPositionUpsert) SetUpdateTime(v time.Time) *OrgUnitPositionUpsert {
	u.Set(orgunitposition.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *OrgUnitPositionUpsert) UpdateUpdateTime() *OrgUnitPositionUpsert {
	u.SetExcluded(orgunitposition.FieldUpdateTime)
	return u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *OrgUnitPositionUpsert) ClearUpdateTime() *OrgUnitPositionUpsert {
	u.SetNull(orgunitposition.FieldUpdateTime)
	return u
}

// SetName sets the "name" field.
func (u *OrgUnitPositionUpsert) SetName(v string) *OrgUnitPositionUpsert {
	u.Set(orgunitposition.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrgUnitPositionUpsert) UpdateName() *OrgUnitPositionUpsert {
	u.SetExcluded(orgunitposition.FieldName)
	return u
}

// SetDuty sets the "duty" field.
func (u *OrgUnitPositionUpsert) SetDuty(v string) *OrgUnitPositionUpsert {
	u.Set(orgunitposition.FieldDuty, v)
	return u
}

// UpdateDuty sets the "duty" field to the value that was provided on create.
func (u *OrgUnitPositionUpsert) UpdateDuty() *OrgUnitPositionUpsert {
	u.SetExcluded(orgunitposition.FieldDuty)
	return u
}

// ClearDuty clears the value of the "duty" field.
func (u *OrgUnitPositionUpsert) ClearDuty() *OrgUnitPositionUpsert {
	u.SetNull(orgunitposition.FieldDuty)
	return u
}

// SetLevel sets the "level" field.
func (u *OrgUnitPositionUpsert) SetLevel(v int) *OrgUnitPositionUpsert {
	u.Set(orgunitposition.FieldLevel, v)
	return u
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *OrgUnitPositionUpsert) UpdateLevel() *OrgUnitPositionUpsert {
	u.SetExcluded(orgunitposition.FieldLevel)
	return u
}

// SetOrgUnitID sets the "org_unit_id" field.
func (u *OrgUnitPositionUpsert) SetOrgUnitID(v int) *OrgUnitPositionUpsert {
	u.Set(orgunitposition.FieldOrgUnitID, v)
	return u
}

// UpdateOrgUnitID sets the "org_unit_id" field to the value that was provided on create.
func (u *OrgUnitPositionUpsert) UpdateOrgUnitID() *OrgUnitPositionUpsert {
	u.SetExcluded(orgunitposition.FieldOrgUnitID)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.OrgUnitPosition.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *OrgUnitPositionUpsertOne) UpdateNewValues() *OrgUnitPositionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.OrgUnitPosition.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *OrgUnitPositionUpsertOne) Ignore() *OrgUnitPositionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrgUnitPositionUpsertOne) DoNothing() *OrgUnitPositionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrgUnitPositionCreate.OnConflict
// documentation for more info.
func (u *OrgUnitPositionUpsertOne) Update(set func(*OrgUnitPositionUpsert)) *OrgUnitPositionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrgUnitPositionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateByUser sets the "create_by_user" field.
func (u *OrgUnitPositionUpsertOne) SetCreateByUser(v int) *OrgUnitPositionUpsertOne {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.SetCreateByUser(v)
	})
}

// UpdateCreateByUser sets the "create_by_user" field to the value that was provided on create.
func (u *OrgUnitPositionUpsertOne) UpdateCreateByUser() *OrgUnitPositionUpsertOne {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.UpdateCreateByUser()
	})
}

// ClearCreateByUser clears the value of the "create_by_user" field.
func (u *OrgUnitPositionUpsertOne) ClearCreateByUser() *OrgUnitPositionUpsertOne {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.ClearCreateByUser()
	})
}

// SetUpdateByUser sets the "update_by_user" field.
func (u *OrgUnitPositionUpsertOne) SetUpdateByUser(v int) *OrgUnitPositionUpsertOne {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.SetUpdateByUser(v)
	})
}

// UpdateUpdateByUser sets the "update_by_user" field to the value that was provided on create.
func (u *OrgUnitPositionUpsertOne) UpdateUpdateByUser() *OrgUnitPositionUpsertOne {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.UpdateUpdateByUser()
	})
}

// ClearUpdateByUser clears the value of the "update_by_user" field.
func (u *OrgUnitPositionUpsertOne) ClearUpdateByUser() *OrgUnitPositionUpsertOne {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.ClearUpdateByUser()
	})
}

// SetCreateTime sets the "create_time" field.
func (u *OrgUnitPositionUpsertOne) SetCreateTime(v time.Time) *OrgUnitPositionUpsertOne {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *OrgUnitPositionUpsertOne) UpdateCreateTime() *OrgUnitPositionUpsertOne {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *OrgUnitPositionUpsertOne) SetUpdateTime(v time.Time) *OrgUnitPositionUpsertOne {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *OrgUnitPositionUpsertOne) UpdateUpdateTime() *OrgUnitPositionUpsertOne {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *OrgUnitPositionUpsertOne) ClearUpdateTime() *OrgUnitPositionUpsertOne {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.ClearUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *OrgUnitPositionUpsertOne) SetName(v string) *OrgUnitPositionUpsertOne {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrgUnitPositionUpsertOne) UpdateName() *OrgUnitPositionUpsertOne {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.UpdateName()
	})
}

// SetDuty sets the "duty" field.
func (u *OrgUnitPositionUpsertOne) SetDuty(v string) *OrgUnitPositionUpsertOne {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.SetDuty(v)
	})
}

// UpdateDuty sets the "duty" field to the value that was provided on create.
func (u *OrgUnitPositionUpsertOne) UpdateDuty() *OrgUnitPositionUpsertOne {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.UpdateDuty()
	})
}

// ClearDuty clears the value of the "duty" field.
func (u *OrgUnitPositionUpsertOne) ClearDuty() *OrgUnitPositionUpsertOne {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.ClearDuty()
	})
}

// SetLevel sets the "level" field.
func (u *OrgUnitPositionUpsertOne) SetLevel(v int) *OrgUnitPositionUpsertOne {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.SetLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *OrgUnitPositionUpsertOne) UpdateLevel() *OrgUnitPositionUpsertOne {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.UpdateLevel()
	})
}

// SetOrgUnitID sets the "org_unit_id" field.
func (u *OrgUnitPositionUpsertOne) SetOrgUnitID(v int) *OrgUnitPositionUpsertOne {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.SetOrgUnitID(v)
	})
}

// UpdateOrgUnitID sets the "org_unit_id" field to the value that was provided on create.
func (u *OrgUnitPositionUpsertOne) UpdateOrgUnitID() *OrgUnitPositionUpsertOne {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.UpdateOrgUnitID()
	})
}

// Exec executes the query.
func (u *OrgUnitPositionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrgUnitPositionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrgUnitPositionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrgUnitPositionUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrgUnitPositionUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrgUnitPositionCreateBulk is the builder for creating many OrgUnitPosition entities in bulk.
type OrgUnitPositionCreateBulk struct {
	config
	builders []*OrgUnitPositionCreate
	conflict []sql.ConflictOption
}

// Save creates the OrgUnitPosition entities in the database.
func (oupcb *OrgUnitPositionCreateBulk) Save(ctx context.Context) ([]*OrgUnitPosition, error) {
	specs := make([]*sqlgraph.CreateSpec, len(oupcb.builders))
	nodes := make([]*OrgUnitPosition, len(oupcb.builders))
	mutators := make([]Mutator, len(oupcb.builders))
	for i := range oupcb.builders {
		func(i int, root context.Context) {
			builder := oupcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrgUnitPositionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oupcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = oupcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oupcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oupcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oupcb *OrgUnitPositionCreateBulk) SaveX(ctx context.Context) []*OrgUnitPosition {
	v, err := oupcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oupcb *OrgUnitPositionCreateBulk) Exec(ctx context.Context) error {
	_, err := oupcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oupcb *OrgUnitPositionCreateBulk) ExecX(ctx context.Context) {
	if err := oupcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrgUnitPosition.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrgUnitPositionUpsert) {
//			SetCreateByUser(v+v).
//		}).
//		Exec(ctx)
//
func (oupcb *OrgUnitPositionCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrgUnitPositionUpsertBulk {
	oupcb.conflict = opts
	return &OrgUnitPositionUpsertBulk{
		create: oupcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrgUnitPosition.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (oupcb *OrgUnitPositionCreateBulk) OnConflictColumns(columns ...string) *OrgUnitPositionUpsertBulk {
	oupcb.conflict = append(oupcb.conflict, sql.ConflictColumns(columns...))
	return &OrgUnitPositionUpsertBulk{
		create: oupcb,
	}
}

// OrgUnitPositionUpsertBulk is the builder for "upsert"-ing
// a bulk of OrgUnitPosition nodes.
type OrgUnitPositionUpsertBulk struct {
	create *OrgUnitPositionCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrgUnitPosition.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *OrgUnitPositionUpsertBulk) UpdateNewValues() *OrgUnitPositionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrgUnitPosition.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *OrgUnitPositionUpsertBulk) Ignore() *OrgUnitPositionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrgUnitPositionUpsertBulk) DoNothing() *OrgUnitPositionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrgUnitPositionCreateBulk.OnConflict
// documentation for more info.
func (u *OrgUnitPositionUpsertBulk) Update(set func(*OrgUnitPositionUpsert)) *OrgUnitPositionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrgUnitPositionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateByUser sets the "create_by_user" field.
func (u *OrgUnitPositionUpsertBulk) SetCreateByUser(v int) *OrgUnitPositionUpsertBulk {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.SetCreateByUser(v)
	})
}

// UpdateCreateByUser sets the "create_by_user" field to the value that was provided on create.
func (u *OrgUnitPositionUpsertBulk) UpdateCreateByUser() *OrgUnitPositionUpsertBulk {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.UpdateCreateByUser()
	})
}

// ClearCreateByUser clears the value of the "create_by_user" field.
func (u *OrgUnitPositionUpsertBulk) ClearCreateByUser() *OrgUnitPositionUpsertBulk {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.ClearCreateByUser()
	})
}

// SetUpdateByUser sets the "update_by_user" field.
func (u *OrgUnitPositionUpsertBulk) SetUpdateByUser(v int) *OrgUnitPositionUpsertBulk {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.SetUpdateByUser(v)
	})
}

// UpdateUpdateByUser sets the "update_by_user" field to the value that was provided on create.
func (u *OrgUnitPositionUpsertBulk) UpdateUpdateByUser() *OrgUnitPositionUpsertBulk {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.UpdateUpdateByUser()
	})
}

// ClearUpdateByUser clears the value of the "update_by_user" field.
func (u *OrgUnitPositionUpsertBulk) ClearUpdateByUser() *OrgUnitPositionUpsertBulk {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.ClearUpdateByUser()
	})
}

// SetCreateTime sets the "create_time" field.
func (u *OrgUnitPositionUpsertBulk) SetCreateTime(v time.Time) *OrgUnitPositionUpsertBulk {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *OrgUnitPositionUpsertBulk) UpdateCreateTime() *OrgUnitPositionUpsertBulk {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *OrgUnitPositionUpsertBulk) SetUpdateTime(v time.Time) *OrgUnitPositionUpsertBulk {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *OrgUnitPositionUpsertBulk) UpdateUpdateTime() *OrgUnitPositionUpsertBulk {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *OrgUnitPositionUpsertBulk) ClearUpdateTime() *OrgUnitPositionUpsertBulk {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.ClearUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *OrgUnitPositionUpsertBulk) SetName(v string) *OrgUnitPositionUpsertBulk {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrgUnitPositionUpsertBulk) UpdateName() *OrgUnitPositionUpsertBulk {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.UpdateName()
	})
}

// SetDuty sets the "duty" field.
func (u *OrgUnitPositionUpsertBulk) SetDuty(v string) *OrgUnitPositionUpsertBulk {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.SetDuty(v)
	})
}

// UpdateDuty sets the "duty" field to the value that was provided on create.
func (u *OrgUnitPositionUpsertBulk) UpdateDuty() *OrgUnitPositionUpsertBulk {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.UpdateDuty()
	})
}

// ClearDuty clears the value of the "duty" field.
func (u *OrgUnitPositionUpsertBulk) ClearDuty() *OrgUnitPositionUpsertBulk {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.ClearDuty()
	})
}

// SetLevel sets the "level" field.
func (u *OrgUnitPositionUpsertBulk) SetLevel(v int) *OrgUnitPositionUpsertBulk {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.SetLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *OrgUnitPositionUpsertBulk) UpdateLevel() *OrgUnitPositionUpsertBulk {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.UpdateLevel()
	})
}

// SetOrgUnitID sets the "org_unit_id" field.
func (u *OrgUnitPositionUpsertBulk) SetOrgUnitID(v int) *OrgUnitPositionUpsertBulk {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.SetOrgUnitID(v)
	})
}

// UpdateOrgUnitID sets the "org_unit_id" field to the value that was provided on create.
func (u *OrgUnitPositionUpsertBulk) UpdateOrgUnitID() *OrgUnitPositionUpsertBulk {
	return u.Update(func(s *OrgUnitPositionUpsert) {
		s.UpdateOrgUnitID()
	})
}

// Exec executes the query.
func (u *OrgUnitPositionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrgUnitPositionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrgUnitPositionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrgUnitPositionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
