// Code generated by entc, DO NOT EDIT.

package system

import (
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the system type in the database.
	Label = "system"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateByUser holds the string denoting the create_by_user field in the database.
	FieldCreateByUser = "create_by_user"
	// FieldUpdateByUser holds the string denoting the update_by_user field in the database.
	FieldUpdateByUser = "update_by_user"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeCreateBy holds the string denoting the create_by edge name in mutations.
	EdgeCreateBy = "create_by"
	// EdgeUpdateBy holds the string denoting the update_by edge name in mutations.
	EdgeUpdateBy = "update_by"
	// Table holds the table name of the system in the database.
	Table = "systems"
	// CreateByTable is the table that holds the create_by relation/edge.
	CreateByTable = "systems"
	// CreateByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreateByInverseTable = "users"
	// CreateByColumn is the table column denoting the create_by relation/edge.
	CreateByColumn = "create_by_user"
	// UpdateByTable is the table that holds the update_by relation/edge.
	UpdateByTable = "systems"
	// UpdateByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UpdateByInverseTable = "users"
	// UpdateByColumn is the table column denoting the update_by relation/edge.
	UpdateByColumn = "update_by_user"
)

// Columns holds all SQL columns for system fields.
var Columns = []string{
	FieldID,
	FieldCreateByUser,
	FieldUpdateByUser,
	FieldCreateTime,
	FieldUpdateTime,
	FieldName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "wing/models/ent/runtime"
//
var (
	Hooks [2]ent.Hook
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)
