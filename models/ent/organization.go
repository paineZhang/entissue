// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"wing/models/ent/organization"
	"wing/models/ent/user"

	"entgo.io/ent/dialect/sql"
)

// Organization is the model entity for the Organization schema.
type Organization struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateByUser holds the value of the "create_by_user" field.
	CreateByUser int `json:"create_by_user,omitempty"`
	// UpdateByUser holds the value of the "update_by_user" field.
	UpdateByUser int `json:"update_by_user,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime *time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrganizationQuery when eager-loading is set.
	Edges OrganizationEdges `json:"edges"`
}

// OrganizationEdges holds the relations/edges for other nodes in the graph.
type OrganizationEdges struct {
	// CreateBy holds the value of the create_by edge.
	CreateBy *User `json:"create_by,omitempty"`
	// UpdateBy holds the value of the update_by edge.
	UpdateBy *User `json:"update_by,omitempty"`
	// Units holds the value of the units edge.
	Units []*OrgUnit `json:"units,omitempty"`
	// Staffs holds the value of the staffs edge.
	Staffs []*User `json:"staffs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// CreateByOrErr returns the CreateBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrganizationEdges) CreateByOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.CreateBy == nil {
			// The edge create_by was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.CreateBy, nil
	}
	return nil, &NotLoadedError{edge: "create_by"}
}

// UpdateByOrErr returns the UpdateBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrganizationEdges) UpdateByOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.UpdateBy == nil {
			// The edge update_by was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.UpdateBy, nil
	}
	return nil, &NotLoadedError{edge: "update_by"}
}

// UnitsOrErr returns the Units value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) UnitsOrErr() ([]*OrgUnit, error) {
	if e.loadedTypes[2] {
		return e.Units, nil
	}
	return nil, &NotLoadedError{edge: "units"}
}

// StaffsOrErr returns the Staffs value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) StaffsOrErr() ([]*User, error) {
	if e.loadedTypes[3] {
		return e.Staffs, nil
	}
	return nil, &NotLoadedError{edge: "staffs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Organization) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case organization.FieldID, organization.FieldCreateByUser, organization.FieldUpdateByUser:
			values[i] = new(sql.NullInt64)
		case organization.FieldName:
			values[i] = new(sql.NullString)
		case organization.FieldCreateTime, organization.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Organization", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Organization fields.
func (o *Organization) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case organization.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case organization.FieldCreateByUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by_user", values[i])
			} else if value.Valid {
				o.CreateByUser = int(value.Int64)
			}
		case organization.FieldUpdateByUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_by_user", values[i])
			} else if value.Valid {
				o.UpdateByUser = int(value.Int64)
			}
		case organization.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				o.CreateTime = value.Time
			}
		case organization.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				o.UpdateTime = new(time.Time)
				*o.UpdateTime = value.Time
			}
		case organization.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				o.Name = value.String
			}
		}
	}
	return nil
}

// QueryCreateBy queries the "create_by" edge of the Organization entity.
func (o *Organization) QueryCreateBy() *UserQuery {
	return (&OrganizationClient{config: o.config}).QueryCreateBy(o)
}

// QueryUpdateBy queries the "update_by" edge of the Organization entity.
func (o *Organization) QueryUpdateBy() *UserQuery {
	return (&OrganizationClient{config: o.config}).QueryUpdateBy(o)
}

// QueryUnits queries the "units" edge of the Organization entity.
func (o *Organization) QueryUnits() *OrgUnitQuery {
	return (&OrganizationClient{config: o.config}).QueryUnits(o)
}

// QueryStaffs queries the "staffs" edge of the Organization entity.
func (o *Organization) QueryStaffs() *UserQuery {
	return (&OrganizationClient{config: o.config}).QueryStaffs(o)
}

// Update returns a builder for updating this Organization.
// Note that you need to call Organization.Unwrap() before calling this method if this Organization
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Organization) Update() *OrganizationUpdateOne {
	return (&OrganizationClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the Organization entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Organization) Unwrap() *Organization {
	tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Organization is not a transactional entity")
	}
	o.config.driver = tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Organization) String() string {
	var builder strings.Builder
	builder.WriteString("Organization(")
	builder.WriteString(fmt.Sprintf("id=%v", o.ID))
	builder.WriteString(", create_by_user=")
	builder.WriteString(fmt.Sprintf("%v", o.CreateByUser))
	builder.WriteString(", update_by_user=")
	builder.WriteString(fmt.Sprintf("%v", o.UpdateByUser))
	builder.WriteString(", create_time=")
	builder.WriteString(o.CreateTime.Format(time.ANSIC))
	if v := o.UpdateTime; v != nil {
		builder.WriteString(", update_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", name=")
	builder.WriteString(o.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Organizations is a parsable slice of Organization.
type Organizations []*Organization

func (o Organizations) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
