// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"wing/models/ent/internal"
	"wing/models/ent/organization"
	"wing/models/ent/orgunit"
	"wing/models/ent/predicate"
	"wing/models/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrganizationUpdate is the builder for updating Organization entities.
type OrganizationUpdate struct {
	config
	hooks    []Hook
	mutation *OrganizationMutation
}

// Where appends a list predicates to the OrganizationUpdate builder.
func (ou *OrganizationUpdate) Where(ps ...predicate.Organization) *OrganizationUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetCreateByUser sets the "create_by_user" field.
func (ou *OrganizationUpdate) SetCreateByUser(i int) *OrganizationUpdate {
	ou.mutation.SetCreateByUser(i)
	return ou
}

// SetNillableCreateByUser sets the "create_by_user" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableCreateByUser(i *int) *OrganizationUpdate {
	if i != nil {
		ou.SetCreateByUser(*i)
	}
	return ou
}

// ClearCreateByUser clears the value of the "create_by_user" field.
func (ou *OrganizationUpdate) ClearCreateByUser() *OrganizationUpdate {
	ou.mutation.ClearCreateByUser()
	return ou
}

// SetUpdateByUser sets the "update_by_user" field.
func (ou *OrganizationUpdate) SetUpdateByUser(i int) *OrganizationUpdate {
	ou.mutation.SetUpdateByUser(i)
	return ou
}

// SetNillableUpdateByUser sets the "update_by_user" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableUpdateByUser(i *int) *OrganizationUpdate {
	if i != nil {
		ou.SetUpdateByUser(*i)
	}
	return ou
}

// ClearUpdateByUser clears the value of the "update_by_user" field.
func (ou *OrganizationUpdate) ClearUpdateByUser() *OrganizationUpdate {
	ou.mutation.ClearUpdateByUser()
	return ou
}

// SetUpdateTime sets the "update_time" field.
func (ou *OrganizationUpdate) SetUpdateTime(t time.Time) *OrganizationUpdate {
	ou.mutation.SetUpdateTime(t)
	return ou
}

// ClearUpdateTime clears the value of the "update_time" field.
func (ou *OrganizationUpdate) ClearUpdateTime() *OrganizationUpdate {
	ou.mutation.ClearUpdateTime()
	return ou
}

// SetName sets the "name" field.
func (ou *OrganizationUpdate) SetName(s string) *OrganizationUpdate {
	ou.mutation.SetName(s)
	return ou
}

// SetCreateByID sets the "create_by" edge to the User entity by ID.
func (ou *OrganizationUpdate) SetCreateByID(id int) *OrganizationUpdate {
	ou.mutation.SetCreateByID(id)
	return ou
}

// SetNillableCreateByID sets the "create_by" edge to the User entity by ID if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableCreateByID(id *int) *OrganizationUpdate {
	if id != nil {
		ou = ou.SetCreateByID(*id)
	}
	return ou
}

// SetCreateBy sets the "create_by" edge to the User entity.
func (ou *OrganizationUpdate) SetCreateBy(u *User) *OrganizationUpdate {
	return ou.SetCreateByID(u.ID)
}

// SetUpdateByID sets the "update_by" edge to the User entity by ID.
func (ou *OrganizationUpdate) SetUpdateByID(id int) *OrganizationUpdate {
	ou.mutation.SetUpdateByID(id)
	return ou
}

// SetNillableUpdateByID sets the "update_by" edge to the User entity by ID if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableUpdateByID(id *int) *OrganizationUpdate {
	if id != nil {
		ou = ou.SetUpdateByID(*id)
	}
	return ou
}

// SetUpdateBy sets the "update_by" edge to the User entity.
func (ou *OrganizationUpdate) SetUpdateBy(u *User) *OrganizationUpdate {
	return ou.SetUpdateByID(u.ID)
}

// AddUnitIDs adds the "units" edge to the OrgUnit entity by IDs.
func (ou *OrganizationUpdate) AddUnitIDs(ids ...int) *OrganizationUpdate {
	ou.mutation.AddUnitIDs(ids...)
	return ou
}

// AddUnits adds the "units" edges to the OrgUnit entity.
func (ou *OrganizationUpdate) AddUnits(o ...*OrgUnit) *OrganizationUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddUnitIDs(ids...)
}

// AddStaffIDs adds the "staffs" edge to the User entity by IDs.
func (ou *OrganizationUpdate) AddStaffIDs(ids ...int) *OrganizationUpdate {
	ou.mutation.AddStaffIDs(ids...)
	return ou
}

// AddStaffs adds the "staffs" edges to the User entity.
func (ou *OrganizationUpdate) AddStaffs(u ...*User) *OrganizationUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ou.AddStaffIDs(ids...)
}

// Mutation returns the OrganizationMutation object of the builder.
func (ou *OrganizationUpdate) Mutation() *OrganizationMutation {
	return ou.mutation
}

// ClearCreateBy clears the "create_by" edge to the User entity.
func (ou *OrganizationUpdate) ClearCreateBy() *OrganizationUpdate {
	ou.mutation.ClearCreateBy()
	return ou
}

// ClearUpdateBy clears the "update_by" edge to the User entity.
func (ou *OrganizationUpdate) ClearUpdateBy() *OrganizationUpdate {
	ou.mutation.ClearUpdateBy()
	return ou
}

// ClearUnits clears all "units" edges to the OrgUnit entity.
func (ou *OrganizationUpdate) ClearUnits() *OrganizationUpdate {
	ou.mutation.ClearUnits()
	return ou
}

// RemoveUnitIDs removes the "units" edge to OrgUnit entities by IDs.
func (ou *OrganizationUpdate) RemoveUnitIDs(ids ...int) *OrganizationUpdate {
	ou.mutation.RemoveUnitIDs(ids...)
	return ou
}

// RemoveUnits removes "units" edges to OrgUnit entities.
func (ou *OrganizationUpdate) RemoveUnits(o ...*OrgUnit) *OrganizationUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveUnitIDs(ids...)
}

// ClearStaffs clears all "staffs" edges to the User entity.
func (ou *OrganizationUpdate) ClearStaffs() *OrganizationUpdate {
	ou.mutation.ClearStaffs()
	return ou
}

// RemoveStaffIDs removes the "staffs" edge to User entities by IDs.
func (ou *OrganizationUpdate) RemoveStaffIDs(ids ...int) *OrganizationUpdate {
	ou.mutation.RemoveStaffIDs(ids...)
	return ou
}

// RemoveStaffs removes "staffs" edges to User entities.
func (ou *OrganizationUpdate) RemoveStaffs(u ...*User) *OrganizationUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ou.RemoveStaffIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrganizationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := ou.defaults(); err != nil {
		return 0, err
	}
	if len(ou.hooks) == 0 {
		affected, err = ou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrganizationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ou.mutation = mutation
			affected, err = ou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ou.hooks) - 1; i >= 0; i-- {
			if ou.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrganizationUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrganizationUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrganizationUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OrganizationUpdate) defaults() error {
	if _, ok := ou.mutation.UpdateTime(); !ok && !ou.mutation.UpdateTimeCleared() {
		if organization.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized organization.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := organization.UpdateDefaultUpdateTime()
		ou.mutation.SetUpdateTime(v)
	}
	return nil
}

func (ou *OrganizationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   organization.Table,
			Columns: organization.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: organization.FieldID,
			},
		},
	}
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: organization.FieldUpdateTime,
		})
	}
	if ou.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: organization.FieldUpdateTime,
		})
	}
	if value, ok := ou.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: organization.FieldName,
		})
	}
	if ou.mutation.CreateByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organization.CreateByTable,
			Columns: []string{organization.CreateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = ou.schemaConfig.Organization
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.CreateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organization.CreateByTable,
			Columns: []string{organization.CreateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = ou.schemaConfig.Organization
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.UpdateByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organization.UpdateByTable,
			Columns: []string{organization.UpdateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = ou.schemaConfig.Organization
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.UpdateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organization.UpdateByTable,
			Columns: []string{organization.UpdateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = ou.schemaConfig.Organization
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.UnitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.UnitsTable,
			Columns: []string{organization.UnitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunit.FieldID,
				},
			},
		}
		edge.Schema = ou.schemaConfig.OrgUnit
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedUnitsIDs(); len(nodes) > 0 && !ou.mutation.UnitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.UnitsTable,
			Columns: []string{organization.UnitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunit.FieldID,
				},
			},
		}
		edge.Schema = ou.schemaConfig.OrgUnit
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.UnitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.UnitsTable,
			Columns: []string{organization.UnitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunit.FieldID,
				},
			},
		}
		edge.Schema = ou.schemaConfig.OrgUnit
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.StaffsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.StaffsTable,
			Columns: organization.StaffsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = ou.schemaConfig.OrganizationStaffs
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedStaffsIDs(); len(nodes) > 0 && !ou.mutation.StaffsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.StaffsTable,
			Columns: organization.StaffsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = ou.schemaConfig.OrganizationStaffs
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.StaffsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.StaffsTable,
			Columns: organization.StaffsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = ou.schemaConfig.OrganizationStaffs
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = ou.schemaConfig.Organization
	ctx = internal.NewSchemaConfigContext(ctx, ou.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// OrganizationUpdateOne is the builder for updating a single Organization entity.
type OrganizationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrganizationMutation
}

// SetCreateByUser sets the "create_by_user" field.
func (ouo *OrganizationUpdateOne) SetCreateByUser(i int) *OrganizationUpdateOne {
	ouo.mutation.SetCreateByUser(i)
	return ouo
}

// SetNillableCreateByUser sets the "create_by_user" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableCreateByUser(i *int) *OrganizationUpdateOne {
	if i != nil {
		ouo.SetCreateByUser(*i)
	}
	return ouo
}

// ClearCreateByUser clears the value of the "create_by_user" field.
func (ouo *OrganizationUpdateOne) ClearCreateByUser() *OrganizationUpdateOne {
	ouo.mutation.ClearCreateByUser()
	return ouo
}

// SetUpdateByUser sets the "update_by_user" field.
func (ouo *OrganizationUpdateOne) SetUpdateByUser(i int) *OrganizationUpdateOne {
	ouo.mutation.SetUpdateByUser(i)
	return ouo
}

// SetNillableUpdateByUser sets the "update_by_user" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableUpdateByUser(i *int) *OrganizationUpdateOne {
	if i != nil {
		ouo.SetUpdateByUser(*i)
	}
	return ouo
}

// ClearUpdateByUser clears the value of the "update_by_user" field.
func (ouo *OrganizationUpdateOne) ClearUpdateByUser() *OrganizationUpdateOne {
	ouo.mutation.ClearUpdateByUser()
	return ouo
}

// SetUpdateTime sets the "update_time" field.
func (ouo *OrganizationUpdateOne) SetUpdateTime(t time.Time) *OrganizationUpdateOne {
	ouo.mutation.SetUpdateTime(t)
	return ouo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (ouo *OrganizationUpdateOne) ClearUpdateTime() *OrganizationUpdateOne {
	ouo.mutation.ClearUpdateTime()
	return ouo
}

// SetName sets the "name" field.
func (ouo *OrganizationUpdateOne) SetName(s string) *OrganizationUpdateOne {
	ouo.mutation.SetName(s)
	return ouo
}

// SetCreateByID sets the "create_by" edge to the User entity by ID.
func (ouo *OrganizationUpdateOne) SetCreateByID(id int) *OrganizationUpdateOne {
	ouo.mutation.SetCreateByID(id)
	return ouo
}

// SetNillableCreateByID sets the "create_by" edge to the User entity by ID if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableCreateByID(id *int) *OrganizationUpdateOne {
	if id != nil {
		ouo = ouo.SetCreateByID(*id)
	}
	return ouo
}

// SetCreateBy sets the "create_by" edge to the User entity.
func (ouo *OrganizationUpdateOne) SetCreateBy(u *User) *OrganizationUpdateOne {
	return ouo.SetCreateByID(u.ID)
}

// SetUpdateByID sets the "update_by" edge to the User entity by ID.
func (ouo *OrganizationUpdateOne) SetUpdateByID(id int) *OrganizationUpdateOne {
	ouo.mutation.SetUpdateByID(id)
	return ouo
}

// SetNillableUpdateByID sets the "update_by" edge to the User entity by ID if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableUpdateByID(id *int) *OrganizationUpdateOne {
	if id != nil {
		ouo = ouo.SetUpdateByID(*id)
	}
	return ouo
}

// SetUpdateBy sets the "update_by" edge to the User entity.
func (ouo *OrganizationUpdateOne) SetUpdateBy(u *User) *OrganizationUpdateOne {
	return ouo.SetUpdateByID(u.ID)
}

// AddUnitIDs adds the "units" edge to the OrgUnit entity by IDs.
func (ouo *OrganizationUpdateOne) AddUnitIDs(ids ...int) *OrganizationUpdateOne {
	ouo.mutation.AddUnitIDs(ids...)
	return ouo
}

// AddUnits adds the "units" edges to the OrgUnit entity.
func (ouo *OrganizationUpdateOne) AddUnits(o ...*OrgUnit) *OrganizationUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddUnitIDs(ids...)
}

// AddStaffIDs adds the "staffs" edge to the User entity by IDs.
func (ouo *OrganizationUpdateOne) AddStaffIDs(ids ...int) *OrganizationUpdateOne {
	ouo.mutation.AddStaffIDs(ids...)
	return ouo
}

// AddStaffs adds the "staffs" edges to the User entity.
func (ouo *OrganizationUpdateOne) AddStaffs(u ...*User) *OrganizationUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ouo.AddStaffIDs(ids...)
}

// Mutation returns the OrganizationMutation object of the builder.
func (ouo *OrganizationUpdateOne) Mutation() *OrganizationMutation {
	return ouo.mutation
}

// ClearCreateBy clears the "create_by" edge to the User entity.
func (ouo *OrganizationUpdateOne) ClearCreateBy() *OrganizationUpdateOne {
	ouo.mutation.ClearCreateBy()
	return ouo
}

// ClearUpdateBy clears the "update_by" edge to the User entity.
func (ouo *OrganizationUpdateOne) ClearUpdateBy() *OrganizationUpdateOne {
	ouo.mutation.ClearUpdateBy()
	return ouo
}

// ClearUnits clears all "units" edges to the OrgUnit entity.
func (ouo *OrganizationUpdateOne) ClearUnits() *OrganizationUpdateOne {
	ouo.mutation.ClearUnits()
	return ouo
}

// RemoveUnitIDs removes the "units" edge to OrgUnit entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveUnitIDs(ids ...int) *OrganizationUpdateOne {
	ouo.mutation.RemoveUnitIDs(ids...)
	return ouo
}

// RemoveUnits removes "units" edges to OrgUnit entities.
func (ouo *OrganizationUpdateOne) RemoveUnits(o ...*OrgUnit) *OrganizationUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveUnitIDs(ids...)
}

// ClearStaffs clears all "staffs" edges to the User entity.
func (ouo *OrganizationUpdateOne) ClearStaffs() *OrganizationUpdateOne {
	ouo.mutation.ClearStaffs()
	return ouo
}

// RemoveStaffIDs removes the "staffs" edge to User entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveStaffIDs(ids ...int) *OrganizationUpdateOne {
	ouo.mutation.RemoveStaffIDs(ids...)
	return ouo
}

// RemoveStaffs removes "staffs" edges to User entities.
func (ouo *OrganizationUpdateOne) RemoveStaffs(u ...*User) *OrganizationUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ouo.RemoveStaffIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrganizationUpdateOne) Select(field string, fields ...string) *OrganizationUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Organization entity.
func (ouo *OrganizationUpdateOne) Save(ctx context.Context) (*Organization, error) {
	var (
		err  error
		node *Organization
	)
	if err := ouo.defaults(); err != nil {
		return nil, err
	}
	if len(ouo.hooks) == 0 {
		node, err = ouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrganizationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ouo.mutation = mutation
			node, err = ouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ouo.hooks) - 1; i >= 0; i-- {
			if ouo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ouo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ouo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrganizationUpdateOne) SaveX(ctx context.Context) *Organization {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrganizationUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrganizationUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OrganizationUpdateOne) defaults() error {
	if _, ok := ouo.mutation.UpdateTime(); !ok && !ouo.mutation.UpdateTimeCleared() {
		if organization.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized organization.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := organization.UpdateDefaultUpdateTime()
		ouo.mutation.SetUpdateTime(v)
	}
	return nil
}

func (ouo *OrganizationUpdateOne) sqlSave(ctx context.Context) (_node *Organization, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   organization.Table,
			Columns: organization.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: organization.FieldID,
			},
		},
	}
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Organization.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organization.FieldID)
		for _, f := range fields {
			if !organization.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != organization.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: organization.FieldUpdateTime,
		})
	}
	if ouo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: organization.FieldUpdateTime,
		})
	}
	if value, ok := ouo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: organization.FieldName,
		})
	}
	if ouo.mutation.CreateByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organization.CreateByTable,
			Columns: []string{organization.CreateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = ouo.schemaConfig.Organization
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.CreateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organization.CreateByTable,
			Columns: []string{organization.CreateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = ouo.schemaConfig.Organization
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.UpdateByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organization.UpdateByTable,
			Columns: []string{organization.UpdateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = ouo.schemaConfig.Organization
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.UpdateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organization.UpdateByTable,
			Columns: []string{organization.UpdateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = ouo.schemaConfig.Organization
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.UnitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.UnitsTable,
			Columns: []string{organization.UnitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunit.FieldID,
				},
			},
		}
		edge.Schema = ouo.schemaConfig.OrgUnit
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedUnitsIDs(); len(nodes) > 0 && !ouo.mutation.UnitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.UnitsTable,
			Columns: []string{organization.UnitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunit.FieldID,
				},
			},
		}
		edge.Schema = ouo.schemaConfig.OrgUnit
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.UnitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.UnitsTable,
			Columns: []string{organization.UnitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunit.FieldID,
				},
			},
		}
		edge.Schema = ouo.schemaConfig.OrgUnit
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.StaffsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.StaffsTable,
			Columns: organization.StaffsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = ouo.schemaConfig.OrganizationStaffs
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedStaffsIDs(); len(nodes) > 0 && !ouo.mutation.StaffsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.StaffsTable,
			Columns: organization.StaffsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = ouo.schemaConfig.OrganizationStaffs
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.StaffsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.StaffsTable,
			Columns: organization.StaffsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = ouo.schemaConfig.OrganizationStaffs
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = ouo.schemaConfig.Organization
	ctx = internal.NewSchemaConfigContext(ctx, ouo.schemaConfig)
	_node = &Organization{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
