// Code generated by entc, DO NOT EDIT.

package orgunitmember

import (
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the orgunitmember type in the database.
	Label = "org_unit_member"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateByUser holds the string denoting the create_by_user field in the database.
	FieldCreateByUser = "create_by_user"
	// FieldUpdateByUser holds the string denoting the update_by_user field in the database.
	FieldUpdateByUser = "update_by_user"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldIsAdditional holds the string denoting the is_additional field in the database.
	FieldIsAdditional = "is_additional"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldOrgUnitID holds the string denoting the org_unit_id field in the database.
	FieldOrgUnitID = "org_unit_id"
	// FieldOrgUnitPositionID holds the string denoting the org_unit_position_id field in the database.
	FieldOrgUnitPositionID = "org_unit_position_id"
	// EdgeCreateBy holds the string denoting the create_by edge name in mutations.
	EdgeCreateBy = "create_by"
	// EdgeUpdateBy holds the string denoting the update_by edge name in mutations.
	EdgeUpdateBy = "update_by"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgePosition holds the string denoting the position edge name in mutations.
	EdgePosition = "position"
	// EdgeBelongToOrgUnit holds the string denoting the belongtoorgunit edge name in mutations.
	EdgeBelongToOrgUnit = "belongToOrgUnit"
	// Table holds the table name of the orgunitmember in the database.
	Table = "org_unit_members"
	// CreateByTable is the table that holds the create_by relation/edge.
	CreateByTable = "org_unit_members"
	// CreateByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreateByInverseTable = "users"
	// CreateByColumn is the table column denoting the create_by relation/edge.
	CreateByColumn = "create_by_user"
	// UpdateByTable is the table that holds the update_by relation/edge.
	UpdateByTable = "org_unit_members"
	// UpdateByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UpdateByInverseTable = "users"
	// UpdateByColumn is the table column denoting the update_by relation/edge.
	UpdateByColumn = "update_by_user"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "org_unit_members"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// PositionTable is the table that holds the position relation/edge.
	PositionTable = "org_unit_members"
	// PositionInverseTable is the table name for the OrgUnitPosition entity.
	// It exists in this package in order to avoid circular dependency with the "orgunitposition" package.
	PositionInverseTable = "org_unit_positions"
	// PositionColumn is the table column denoting the position relation/edge.
	PositionColumn = "org_unit_position_id"
	// BelongToOrgUnitTable is the table that holds the belongToOrgUnit relation/edge.
	BelongToOrgUnitTable = "org_unit_members"
	// BelongToOrgUnitInverseTable is the table name for the OrgUnit entity.
	// It exists in this package in order to avoid circular dependency with the "orgunit" package.
	BelongToOrgUnitInverseTable = "org_units"
	// BelongToOrgUnitColumn is the table column denoting the belongToOrgUnit relation/edge.
	BelongToOrgUnitColumn = "org_unit_id"
)

// Columns holds all SQL columns for orgunitmember fields.
var Columns = []string{
	FieldID,
	FieldCreateByUser,
	FieldUpdateByUser,
	FieldCreateTime,
	FieldUpdateTime,
	FieldIsAdditional,
	FieldUserID,
	FieldOrgUnitID,
	FieldOrgUnitPositionID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "wing/models/ent/runtime"
//
var (
	Hooks [4]ent.Hook
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)
