// Code generated by entc, DO NOT EDIT.

package orgunitmember

import (
	"time"
	"wing/models/ent/internal"
	"wing/models/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateByUser applies equality check predicate on the "create_by_user" field. It's identical to CreateByUserEQ.
func CreateByUser(v int) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateByUser), v))
	})
}

// UpdateByUser applies equality check predicate on the "update_by_user" field. It's identical to UpdateByUserEQ.
func UpdateByUser(v int) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateByUser), v))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// IsAdditional applies equality check predicate on the "is_additional" field. It's identical to IsAdditionalEQ.
func IsAdditional(v bool) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsAdditional), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// OrgUnitID applies equality check predicate on the "org_unit_id" field. It's identical to OrgUnitIDEQ.
func OrgUnitID(v int) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrgUnitID), v))
	})
}

// OrgUnitPositionID applies equality check predicate on the "org_unit_position_id" field. It's identical to OrgUnitPositionIDEQ.
func OrgUnitPositionID(v int) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrgUnitPositionID), v))
	})
}

// CreateByUserEQ applies the EQ predicate on the "create_by_user" field.
func CreateByUserEQ(v int) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateByUser), v))
	})
}

// CreateByUserNEQ applies the NEQ predicate on the "create_by_user" field.
func CreateByUserNEQ(v int) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateByUser), v))
	})
}

// CreateByUserIn applies the In predicate on the "create_by_user" field.
func CreateByUserIn(vs ...int) predicate.OrgUnitMember {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateByUser), v...))
	})
}

// CreateByUserNotIn applies the NotIn predicate on the "create_by_user" field.
func CreateByUserNotIn(vs ...int) predicate.OrgUnitMember {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateByUser), v...))
	})
}

// CreateByUserIsNil applies the IsNil predicate on the "create_by_user" field.
func CreateByUserIsNil() predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateByUser)))
	})
}

// CreateByUserNotNil applies the NotNil predicate on the "create_by_user" field.
func CreateByUserNotNil() predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateByUser)))
	})
}

// UpdateByUserEQ applies the EQ predicate on the "update_by_user" field.
func UpdateByUserEQ(v int) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateByUser), v))
	})
}

// UpdateByUserNEQ applies the NEQ predicate on the "update_by_user" field.
func UpdateByUserNEQ(v int) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateByUser), v))
	})
}

// UpdateByUserIn applies the In predicate on the "update_by_user" field.
func UpdateByUserIn(vs ...int) predicate.OrgUnitMember {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateByUser), v...))
	})
}

// UpdateByUserNotIn applies the NotIn predicate on the "update_by_user" field.
func UpdateByUserNotIn(vs ...int) predicate.OrgUnitMember {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateByUser), v...))
	})
}

// UpdateByUserIsNil applies the IsNil predicate on the "update_by_user" field.
func UpdateByUserIsNil() predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateByUser)))
	})
}

// UpdateByUserNotNil applies the NotNil predicate on the "update_by_user" field.
func UpdateByUserNotNil() predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateByUser)))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.OrgUnitMember {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.OrgUnitMember {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.OrgUnitMember {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.OrgUnitMember {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIsNil applies the IsNil predicate on the "update_time" field.
func UpdateTimeIsNil() predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateTime)))
	})
}

// UpdateTimeNotNil applies the NotNil predicate on the "update_time" field.
func UpdateTimeNotNil() predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateTime)))
	})
}

// IsAdditionalEQ applies the EQ predicate on the "is_additional" field.
func IsAdditionalEQ(v bool) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsAdditional), v))
	})
}

// IsAdditionalNEQ applies the NEQ predicate on the "is_additional" field.
func IsAdditionalNEQ(v bool) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsAdditional), v))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.OrgUnitMember {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.OrgUnitMember {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// OrgUnitIDEQ applies the EQ predicate on the "org_unit_id" field.
func OrgUnitIDEQ(v int) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrgUnitID), v))
	})
}

// OrgUnitIDNEQ applies the NEQ predicate on the "org_unit_id" field.
func OrgUnitIDNEQ(v int) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrgUnitID), v))
	})
}

// OrgUnitIDIn applies the In predicate on the "org_unit_id" field.
func OrgUnitIDIn(vs ...int) predicate.OrgUnitMember {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrgUnitID), v...))
	})
}

// OrgUnitIDNotIn applies the NotIn predicate on the "org_unit_id" field.
func OrgUnitIDNotIn(vs ...int) predicate.OrgUnitMember {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrgUnitID), v...))
	})
}

// OrgUnitPositionIDEQ applies the EQ predicate on the "org_unit_position_id" field.
func OrgUnitPositionIDEQ(v int) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrgUnitPositionID), v))
	})
}

// OrgUnitPositionIDNEQ applies the NEQ predicate on the "org_unit_position_id" field.
func OrgUnitPositionIDNEQ(v int) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrgUnitPositionID), v))
	})
}

// OrgUnitPositionIDIn applies the In predicate on the "org_unit_position_id" field.
func OrgUnitPositionIDIn(vs ...int) predicate.OrgUnitMember {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrgUnitPositionID), v...))
	})
}

// OrgUnitPositionIDNotIn applies the NotIn predicate on the "org_unit_position_id" field.
func OrgUnitPositionIDNotIn(vs ...int) predicate.OrgUnitMember {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrgUnitPositionID), v...))
	})
}

// HasCreateBy applies the HasEdge predicate on the "create_by" edge.
func HasCreateBy() predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CreateByTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CreateByTable, CreateByColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.OrgUnitMember
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreateByWith applies the HasEdge predicate on the "create_by" edge with a given conditions (other predicates).
func HasCreateByWith(preds ...predicate.User) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CreateByInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CreateByTable, CreateByColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.OrgUnitMember
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUpdateBy applies the HasEdge predicate on the "update_by" edge.
func HasUpdateBy() predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UpdateByTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UpdateByTable, UpdateByColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.OrgUnitMember
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUpdateByWith applies the HasEdge predicate on the "update_by" edge with a given conditions (other predicates).
func HasUpdateByWith(preds ...predicate.User) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UpdateByInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UpdateByTable, UpdateByColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.OrgUnitMember
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.OrgUnitMember
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.OrgUnitMember
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPosition applies the HasEdge predicate on the "position" edge.
func HasPosition() predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PositionTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PositionTable, PositionColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgUnitPosition
		step.Edge.Schema = schemaConfig.OrgUnitMember
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPositionWith applies the HasEdge predicate on the "position" edge with a given conditions (other predicates).
func HasPositionWith(preds ...predicate.OrgUnitPosition) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PositionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PositionTable, PositionColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgUnitPosition
		step.Edge.Schema = schemaConfig.OrgUnitMember
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBelongToOrgUnit applies the HasEdge predicate on the "belongToOrgUnit" edge.
func HasBelongToOrgUnit() predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BelongToOrgUnitTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BelongToOrgUnitTable, BelongToOrgUnitColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgUnit
		step.Edge.Schema = schemaConfig.OrgUnitMember
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBelongToOrgUnitWith applies the HasEdge predicate on the "belongToOrgUnit" edge with a given conditions (other predicates).
func HasBelongToOrgUnitWith(preds ...predicate.OrgUnit) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BelongToOrgUnitInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BelongToOrgUnitTable, BelongToOrgUnitColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgUnit
		step.Edge.Schema = schemaConfig.OrgUnitMember
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrgUnitMember) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrgUnitMember) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrgUnitMember) predicate.OrgUnitMember {
	return predicate.OrgUnitMember(func(s *sql.Selector) {
		p(s.Not())
	})
}
