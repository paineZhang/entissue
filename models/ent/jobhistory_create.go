// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wing/models/ent/jobhistory"
	"wing/models/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JobHistoryCreate is the builder for creating a JobHistory entity.
type JobHistoryCreate struct {
	config
	mutation *JobHistoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateByUser sets the "create_by_user" field.
func (jhc *JobHistoryCreate) SetCreateByUser(i int) *JobHistoryCreate {
	jhc.mutation.SetCreateByUser(i)
	return jhc
}

// SetNillableCreateByUser sets the "create_by_user" field if the given value is not nil.
func (jhc *JobHistoryCreate) SetNillableCreateByUser(i *int) *JobHistoryCreate {
	if i != nil {
		jhc.SetCreateByUser(*i)
	}
	return jhc
}

// SetCreateTime sets the "create_time" field.
func (jhc *JobHistoryCreate) SetCreateTime(t time.Time) *JobHistoryCreate {
	jhc.mutation.SetCreateTime(t)
	return jhc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (jhc *JobHistoryCreate) SetNillableCreateTime(t *time.Time) *JobHistoryCreate {
	if t != nil {
		jhc.SetCreateTime(*t)
	}
	return jhc
}

// SetDate sets the "date" field.
func (jhc *JobHistoryCreate) SetDate(t time.Time) *JobHistoryCreate {
	jhc.mutation.SetDate(t)
	return jhc
}

// SetJobEntryLeaveType sets the "job_entry_leave_type" field.
func (jhc *JobHistoryCreate) SetJobEntryLeaveType(jelt jobhistory.JobEntryLeaveType) *JobHistoryCreate {
	jhc.mutation.SetJobEntryLeaveType(jelt)
	return jhc
}

// SetCreateByID sets the "create_by" edge to the User entity by ID.
func (jhc *JobHistoryCreate) SetCreateByID(id int) *JobHistoryCreate {
	jhc.mutation.SetCreateByID(id)
	return jhc
}

// SetNillableCreateByID sets the "create_by" edge to the User entity by ID if the given value is not nil.
func (jhc *JobHistoryCreate) SetNillableCreateByID(id *int) *JobHistoryCreate {
	if id != nil {
		jhc = jhc.SetCreateByID(*id)
	}
	return jhc
}

// SetCreateBy sets the "create_by" edge to the User entity.
func (jhc *JobHistoryCreate) SetCreateBy(u *User) *JobHistoryCreate {
	return jhc.SetCreateByID(u.ID)
}

// SetBelongToID sets the "belong_to" edge to the User entity by ID.
func (jhc *JobHistoryCreate) SetBelongToID(id int) *JobHistoryCreate {
	jhc.mutation.SetBelongToID(id)
	return jhc
}

// SetBelongTo sets the "belong_to" edge to the User entity.
func (jhc *JobHistoryCreate) SetBelongTo(u *User) *JobHistoryCreate {
	return jhc.SetBelongToID(u.ID)
}

// Mutation returns the JobHistoryMutation object of the builder.
func (jhc *JobHistoryCreate) Mutation() *JobHistoryMutation {
	return jhc.mutation
}

// Save creates the JobHistory in the database.
func (jhc *JobHistoryCreate) Save(ctx context.Context) (*JobHistory, error) {
	var (
		err  error
		node *JobHistory
	)
	if err := jhc.defaults(); err != nil {
		return nil, err
	}
	if len(jhc.hooks) == 0 {
		if err = jhc.check(); err != nil {
			return nil, err
		}
		node, err = jhc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JobHistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = jhc.check(); err != nil {
				return nil, err
			}
			jhc.mutation = mutation
			if node, err = jhc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(jhc.hooks) - 1; i >= 0; i-- {
			if jhc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = jhc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, jhc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (jhc *JobHistoryCreate) SaveX(ctx context.Context) *JobHistory {
	v, err := jhc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jhc *JobHistoryCreate) Exec(ctx context.Context) error {
	_, err := jhc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jhc *JobHistoryCreate) ExecX(ctx context.Context) {
	if err := jhc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jhc *JobHistoryCreate) defaults() error {
	if _, ok := jhc.mutation.CreateTime(); !ok {
		if jobhistory.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized jobhistory.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := jobhistory.DefaultCreateTime()
		jhc.mutation.SetCreateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (jhc *JobHistoryCreate) check() error {
	if _, ok := jhc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "create_time"`)}
	}
	if _, ok := jhc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "date"`)}
	}
	if _, ok := jhc.mutation.JobEntryLeaveType(); !ok {
		return &ValidationError{Name: "job_entry_leave_type", err: errors.New(`ent: missing required field "job_entry_leave_type"`)}
	}
	if v, ok := jhc.mutation.JobEntryLeaveType(); ok {
		if err := jobhistory.JobEntryLeaveTypeValidator(v); err != nil {
			return &ValidationError{Name: "job_entry_leave_type", err: fmt.Errorf(`ent: validator failed for field "job_entry_leave_type": %w`, err)}
		}
	}
	if _, ok := jhc.mutation.BelongToID(); !ok {
		return &ValidationError{Name: "belong_to", err: errors.New("ent: missing required edge \"belong_to\"")}
	}
	return nil
}

func (jhc *JobHistoryCreate) sqlSave(ctx context.Context) (*JobHistory, error) {
	_node, _spec := jhc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jhc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (jhc *JobHistoryCreate) createSpec() (*JobHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &JobHistory{config: jhc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: jobhistory.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: jobhistory.FieldID,
			},
		}
	)
	_spec.Schema = jhc.schemaConfig.JobHistory
	_spec.OnConflict = jhc.conflict
	if value, ok := jhc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: jobhistory.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := jhc.mutation.Date(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: jobhistory.FieldDate,
		})
		_node.Date = value
	}
	if value, ok := jhc.mutation.JobEntryLeaveType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: jobhistory.FieldJobEntryLeaveType,
		})
		_node.JobEntryLeaveType = value
	}
	if nodes := jhc.mutation.CreateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   jobhistory.CreateByTable,
			Columns: []string{jobhistory.CreateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = jhc.schemaConfig.JobHistory
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreateByUser = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jhc.mutation.BelongToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobhistory.BelongToTable,
			Columns: []string{jobhistory.BelongToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = jhc.schemaConfig.JobHistory
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_job_histories = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.JobHistory.Create().
//		SetCreateByUser(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.JobHistoryUpsert) {
//			SetCreateByUser(v+v).
//		}).
//		Exec(ctx)
//
func (jhc *JobHistoryCreate) OnConflict(opts ...sql.ConflictOption) *JobHistoryUpsertOne {
	jhc.conflict = opts
	return &JobHistoryUpsertOne{
		create: jhc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.JobHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (jhc *JobHistoryCreate) OnConflictColumns(columns ...string) *JobHistoryUpsertOne {
	jhc.conflict = append(jhc.conflict, sql.ConflictColumns(columns...))
	return &JobHistoryUpsertOne{
		create: jhc,
	}
}

type (
	// JobHistoryUpsertOne is the builder for "upsert"-ing
	//  one JobHistory node.
	JobHistoryUpsertOne struct {
		create *JobHistoryCreate
	}

	// JobHistoryUpsert is the "OnConflict" setter.
	JobHistoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreateByUser sets the "create_by_user" field.
func (u *JobHistoryUpsert) SetCreateByUser(v int) *JobHistoryUpsert {
	u.Set(jobhistory.FieldCreateByUser, v)
	return u
}

// UpdateCreateByUser sets the "create_by_user" field to the value that was provided on create.
func (u *JobHistoryUpsert) UpdateCreateByUser() *JobHistoryUpsert {
	u.SetExcluded(jobhistory.FieldCreateByUser)
	return u
}

// ClearCreateByUser clears the value of the "create_by_user" field.
func (u *JobHistoryUpsert) ClearCreateByUser() *JobHistoryUpsert {
	u.SetNull(jobhistory.FieldCreateByUser)
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *JobHistoryUpsert) SetCreateTime(v time.Time) *JobHistoryUpsert {
	u.Set(jobhistory.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *JobHistoryUpsert) UpdateCreateTime() *JobHistoryUpsert {
	u.SetExcluded(jobhistory.FieldCreateTime)
	return u
}

// SetDate sets the "date" field.
func (u *JobHistoryUpsert) SetDate(v time.Time) *JobHistoryUpsert {
	u.Set(jobhistory.FieldDate, v)
	return u
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *JobHistoryUpsert) UpdateDate() *JobHistoryUpsert {
	u.SetExcluded(jobhistory.FieldDate)
	return u
}

// SetJobEntryLeaveType sets the "job_entry_leave_type" field.
func (u *JobHistoryUpsert) SetJobEntryLeaveType(v jobhistory.JobEntryLeaveType) *JobHistoryUpsert {
	u.Set(jobhistory.FieldJobEntryLeaveType, v)
	return u
}

// UpdateJobEntryLeaveType sets the "job_entry_leave_type" field to the value that was provided on create.
func (u *JobHistoryUpsert) UpdateJobEntryLeaveType() *JobHistoryUpsert {
	u.SetExcluded(jobhistory.FieldJobEntryLeaveType)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.JobHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *JobHistoryUpsertOne) UpdateNewValues() *JobHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.JobHistory.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *JobHistoryUpsertOne) Ignore() *JobHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *JobHistoryUpsertOne) DoNothing() *JobHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the JobHistoryCreate.OnConflict
// documentation for more info.
func (u *JobHistoryUpsertOne) Update(set func(*JobHistoryUpsert)) *JobHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&JobHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateByUser sets the "create_by_user" field.
func (u *JobHistoryUpsertOne) SetCreateByUser(v int) *JobHistoryUpsertOne {
	return u.Update(func(s *JobHistoryUpsert) {
		s.SetCreateByUser(v)
	})
}

// UpdateCreateByUser sets the "create_by_user" field to the value that was provided on create.
func (u *JobHistoryUpsertOne) UpdateCreateByUser() *JobHistoryUpsertOne {
	return u.Update(func(s *JobHistoryUpsert) {
		s.UpdateCreateByUser()
	})
}

// ClearCreateByUser clears the value of the "create_by_user" field.
func (u *JobHistoryUpsertOne) ClearCreateByUser() *JobHistoryUpsertOne {
	return u.Update(func(s *JobHistoryUpsert) {
		s.ClearCreateByUser()
	})
}

// SetCreateTime sets the "create_time" field.
func (u *JobHistoryUpsertOne) SetCreateTime(v time.Time) *JobHistoryUpsertOne {
	return u.Update(func(s *JobHistoryUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *JobHistoryUpsertOne) UpdateCreateTime() *JobHistoryUpsertOne {
	return u.Update(func(s *JobHistoryUpsert) {
		s.UpdateCreateTime()
	})
}

// SetDate sets the "date" field.
func (u *JobHistoryUpsertOne) SetDate(v time.Time) *JobHistoryUpsertOne {
	return u.Update(func(s *JobHistoryUpsert) {
		s.SetDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *JobHistoryUpsertOne) UpdateDate() *JobHistoryUpsertOne {
	return u.Update(func(s *JobHistoryUpsert) {
		s.UpdateDate()
	})
}

// SetJobEntryLeaveType sets the "job_entry_leave_type" field.
func (u *JobHistoryUpsertOne) SetJobEntryLeaveType(v jobhistory.JobEntryLeaveType) *JobHistoryUpsertOne {
	return u.Update(func(s *JobHistoryUpsert) {
		s.SetJobEntryLeaveType(v)
	})
}

// UpdateJobEntryLeaveType sets the "job_entry_leave_type" field to the value that was provided on create.
func (u *JobHistoryUpsertOne) UpdateJobEntryLeaveType() *JobHistoryUpsertOne {
	return u.Update(func(s *JobHistoryUpsert) {
		s.UpdateJobEntryLeaveType()
	})
}

// Exec executes the query.
func (u *JobHistoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for JobHistoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *JobHistoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *JobHistoryUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *JobHistoryUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// JobHistoryCreateBulk is the builder for creating many JobHistory entities in bulk.
type JobHistoryCreateBulk struct {
	config
	builders []*JobHistoryCreate
	conflict []sql.ConflictOption
}

// Save creates the JobHistory entities in the database.
func (jhcb *JobHistoryCreateBulk) Save(ctx context.Context) ([]*JobHistory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(jhcb.builders))
	nodes := make([]*JobHistory, len(jhcb.builders))
	mutators := make([]Mutator, len(jhcb.builders))
	for i := range jhcb.builders {
		func(i int, root context.Context) {
			builder := jhcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jhcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = jhcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jhcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jhcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jhcb *JobHistoryCreateBulk) SaveX(ctx context.Context) []*JobHistory {
	v, err := jhcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jhcb *JobHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := jhcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jhcb *JobHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := jhcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.JobHistory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.JobHistoryUpsert) {
//			SetCreateByUser(v+v).
//		}).
//		Exec(ctx)
//
func (jhcb *JobHistoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *JobHistoryUpsertBulk {
	jhcb.conflict = opts
	return &JobHistoryUpsertBulk{
		create: jhcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.JobHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (jhcb *JobHistoryCreateBulk) OnConflictColumns(columns ...string) *JobHistoryUpsertBulk {
	jhcb.conflict = append(jhcb.conflict, sql.ConflictColumns(columns...))
	return &JobHistoryUpsertBulk{
		create: jhcb,
	}
}

// JobHistoryUpsertBulk is the builder for "upsert"-ing
// a bulk of JobHistory nodes.
type JobHistoryUpsertBulk struct {
	create *JobHistoryCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.JobHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *JobHistoryUpsertBulk) UpdateNewValues() *JobHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.JobHistory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *JobHistoryUpsertBulk) Ignore() *JobHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *JobHistoryUpsertBulk) DoNothing() *JobHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the JobHistoryCreateBulk.OnConflict
// documentation for more info.
func (u *JobHistoryUpsertBulk) Update(set func(*JobHistoryUpsert)) *JobHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&JobHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateByUser sets the "create_by_user" field.
func (u *JobHistoryUpsertBulk) SetCreateByUser(v int) *JobHistoryUpsertBulk {
	return u.Update(func(s *JobHistoryUpsert) {
		s.SetCreateByUser(v)
	})
}

// UpdateCreateByUser sets the "create_by_user" field to the value that was provided on create.
func (u *JobHistoryUpsertBulk) UpdateCreateByUser() *JobHistoryUpsertBulk {
	return u.Update(func(s *JobHistoryUpsert) {
		s.UpdateCreateByUser()
	})
}

// ClearCreateByUser clears the value of the "create_by_user" field.
func (u *JobHistoryUpsertBulk) ClearCreateByUser() *JobHistoryUpsertBulk {
	return u.Update(func(s *JobHistoryUpsert) {
		s.ClearCreateByUser()
	})
}

// SetCreateTime sets the "create_time" field.
func (u *JobHistoryUpsertBulk) SetCreateTime(v time.Time) *JobHistoryUpsertBulk {
	return u.Update(func(s *JobHistoryUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *JobHistoryUpsertBulk) UpdateCreateTime() *JobHistoryUpsertBulk {
	return u.Update(func(s *JobHistoryUpsert) {
		s.UpdateCreateTime()
	})
}

// SetDate sets the "date" field.
func (u *JobHistoryUpsertBulk) SetDate(v time.Time) *JobHistoryUpsertBulk {
	return u.Update(func(s *JobHistoryUpsert) {
		s.SetDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *JobHistoryUpsertBulk) UpdateDate() *JobHistoryUpsertBulk {
	return u.Update(func(s *JobHistoryUpsert) {
		s.UpdateDate()
	})
}

// SetJobEntryLeaveType sets the "job_entry_leave_type" field.
func (u *JobHistoryUpsertBulk) SetJobEntryLeaveType(v jobhistory.JobEntryLeaveType) *JobHistoryUpsertBulk {
	return u.Update(func(s *JobHistoryUpsert) {
		s.SetJobEntryLeaveType(v)
	})
}

// UpdateJobEntryLeaveType sets the "job_entry_leave_type" field to the value that was provided on create.
func (u *JobHistoryUpsertBulk) UpdateJobEntryLeaveType() *JobHistoryUpsertBulk {
	return u.Update(func(s *JobHistoryUpsert) {
		s.UpdateJobEntryLeaveType()
	})
}

// Exec executes the query.
func (u *JobHistoryUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the JobHistoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for JobHistoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *JobHistoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
