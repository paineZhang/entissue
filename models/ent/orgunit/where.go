// Code generated by entc, DO NOT EDIT.

package orgunit

import (
	"time"
	"wing/models/ent/internal"
	"wing/models/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateByUser applies equality check predicate on the "create_by_user" field. It's identical to CreateByUserEQ.
func CreateByUser(v int) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateByUser), v))
	})
}

// UpdateByUser applies equality check predicate on the "update_by_user" field. It's identical to UpdateByUserEQ.
func UpdateByUser(v int) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateByUser), v))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Duty applies equality check predicate on the "duty" field. It's identical to DutyEQ.
func Duty(v string) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDuty), v))
	})
}

// CreateByUserEQ applies the EQ predicate on the "create_by_user" field.
func CreateByUserEQ(v int) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateByUser), v))
	})
}

// CreateByUserNEQ applies the NEQ predicate on the "create_by_user" field.
func CreateByUserNEQ(v int) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateByUser), v))
	})
}

// CreateByUserIn applies the In predicate on the "create_by_user" field.
func CreateByUserIn(vs ...int) predicate.OrgUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrgUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateByUser), v...))
	})
}

// CreateByUserNotIn applies the NotIn predicate on the "create_by_user" field.
func CreateByUserNotIn(vs ...int) predicate.OrgUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrgUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateByUser), v...))
	})
}

// CreateByUserIsNil applies the IsNil predicate on the "create_by_user" field.
func CreateByUserIsNil() predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateByUser)))
	})
}

// CreateByUserNotNil applies the NotNil predicate on the "create_by_user" field.
func CreateByUserNotNil() predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateByUser)))
	})
}

// UpdateByUserEQ applies the EQ predicate on the "update_by_user" field.
func UpdateByUserEQ(v int) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateByUser), v))
	})
}

// UpdateByUserNEQ applies the NEQ predicate on the "update_by_user" field.
func UpdateByUserNEQ(v int) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateByUser), v))
	})
}

// UpdateByUserIn applies the In predicate on the "update_by_user" field.
func UpdateByUserIn(vs ...int) predicate.OrgUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrgUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateByUser), v...))
	})
}

// UpdateByUserNotIn applies the NotIn predicate on the "update_by_user" field.
func UpdateByUserNotIn(vs ...int) predicate.OrgUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrgUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateByUser), v...))
	})
}

// UpdateByUserIsNil applies the IsNil predicate on the "update_by_user" field.
func UpdateByUserIsNil() predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateByUser)))
	})
}

// UpdateByUserNotNil applies the NotNil predicate on the "update_by_user" field.
func UpdateByUserNotNil() predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateByUser)))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.OrgUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrgUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.OrgUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrgUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.OrgUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrgUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.OrgUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrgUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIsNil applies the IsNil predicate on the "update_time" field.
func UpdateTimeIsNil() predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateTime)))
	})
}

// UpdateTimeNotNil applies the NotNil predicate on the "update_time" field.
func UpdateTimeNotNil() predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateTime)))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.OrgUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrgUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.OrgUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrgUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// DutyEQ applies the EQ predicate on the "duty" field.
func DutyEQ(v string) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDuty), v))
	})
}

// DutyNEQ applies the NEQ predicate on the "duty" field.
func DutyNEQ(v string) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDuty), v))
	})
}

// DutyIn applies the In predicate on the "duty" field.
func DutyIn(vs ...string) predicate.OrgUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrgUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDuty), v...))
	})
}

// DutyNotIn applies the NotIn predicate on the "duty" field.
func DutyNotIn(vs ...string) predicate.OrgUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrgUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDuty), v...))
	})
}

// DutyGT applies the GT predicate on the "duty" field.
func DutyGT(v string) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDuty), v))
	})
}

// DutyGTE applies the GTE predicate on the "duty" field.
func DutyGTE(v string) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDuty), v))
	})
}

// DutyLT applies the LT predicate on the "duty" field.
func DutyLT(v string) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDuty), v))
	})
}

// DutyLTE applies the LTE predicate on the "duty" field.
func DutyLTE(v string) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDuty), v))
	})
}

// DutyContains applies the Contains predicate on the "duty" field.
func DutyContains(v string) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDuty), v))
	})
}

// DutyHasPrefix applies the HasPrefix predicate on the "duty" field.
func DutyHasPrefix(v string) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDuty), v))
	})
}

// DutyHasSuffix applies the HasSuffix predicate on the "duty" field.
func DutyHasSuffix(v string) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDuty), v))
	})
}

// DutyIsNil applies the IsNil predicate on the "duty" field.
func DutyIsNil() predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDuty)))
	})
}

// DutyNotNil applies the NotNil predicate on the "duty" field.
func DutyNotNil() predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDuty)))
	})
}

// DutyEqualFold applies the EqualFold predicate on the "duty" field.
func DutyEqualFold(v string) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDuty), v))
	})
}

// DutyContainsFold applies the ContainsFold predicate on the "duty" field.
func DutyContainsFold(v string) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDuty), v))
	})
}

// HasCreateBy applies the HasEdge predicate on the "create_by" edge.
func HasCreateBy() predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CreateByTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CreateByTable, CreateByColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.OrgUnit
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreateByWith applies the HasEdge predicate on the "create_by" edge with a given conditions (other predicates).
func HasCreateByWith(preds ...predicate.User) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CreateByInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CreateByTable, CreateByColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.OrgUnit
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUpdateBy applies the HasEdge predicate on the "update_by" edge.
func HasUpdateBy() predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UpdateByTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UpdateByTable, UpdateByColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.OrgUnit
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUpdateByWith applies the HasEdge predicate on the "update_by" edge with a given conditions (other predicates).
func HasUpdateByWith(preds ...predicate.User) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UpdateByInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UpdateByTable, UpdateByColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.OrgUnit
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMembers applies the HasEdge predicate on the "members" edge.
func HasMembers() predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MembersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MembersTable, MembersColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgUnitMember
		step.Edge.Schema = schemaConfig.OrgUnitMember
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMembersWith applies the HasEdge predicate on the "members" edge with a given conditions (other predicates).
func HasMembersWith(preds ...predicate.OrgUnitMember) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MembersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MembersTable, MembersColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgUnitMember
		step.Edge.Schema = schemaConfig.OrgUnitMember
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPositions applies the HasEdge predicate on the "positions" edge.
func HasPositions() predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PositionsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PositionsTable, PositionsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgUnitPosition
		step.Edge.Schema = schemaConfig.OrgUnitPosition
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPositionsWith applies the HasEdge predicate on the "positions" edge with a given conditions (other predicates).
func HasPositionsWith(preds ...predicate.OrgUnitPosition) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PositionsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PositionsTable, PositionsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgUnitPosition
		step.Edge.Schema = schemaConfig.OrgUnitPosition
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSupUnit applies the HasEdge predicate on the "supUnit" edge.
func HasSupUnit() predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SupUnitTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SupUnitTable, SupUnitColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgUnit
		step.Edge.Schema = schemaConfig.OrgUnit
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSupUnitWith applies the HasEdge predicate on the "supUnit" edge with a given conditions (other predicates).
func HasSupUnitWith(preds ...predicate.OrgUnit) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SupUnitTable, SupUnitColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgUnit
		step.Edge.Schema = schemaConfig.OrgUnit
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubUnits applies the HasEdge predicate on the "subUnits" edge.
func HasSubUnits() predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SubUnitsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SubUnitsTable, SubUnitsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgUnit
		step.Edge.Schema = schemaConfig.OrgUnit
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubUnitsWith applies the HasEdge predicate on the "subUnits" edge with a given conditions (other predicates).
func HasSubUnitsWith(preds ...predicate.OrgUnit) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SubUnitsTable, SubUnitsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgUnit
		step.Edge.Schema = schemaConfig.OrgUnit
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBelongToOrg applies the HasEdge predicate on the "belongToOrg" edge.
func HasBelongToOrg() predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BelongToOrgTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BelongToOrgTable, BelongToOrgColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.OrgUnit
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBelongToOrgWith applies the HasEdge predicate on the "belongToOrg" edge with a given conditions (other predicates).
func HasBelongToOrgWith(preds ...predicate.Organization) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BelongToOrgInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BelongToOrgTable, BelongToOrgColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.OrgUnit
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrgUnit) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrgUnit) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrgUnit) predicate.OrgUnit {
	return predicate.OrgUnit(func(s *sql.Selector) {
		p(s.Not())
	})
}
