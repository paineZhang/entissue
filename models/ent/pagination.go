// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"strconv"
	"strings"
	"wing/models/ent/auth"
	"wing/models/ent/jobhistory"
	"wing/models/ent/organization"
	"wing/models/ent/orgunit"
	"wing/models/ent/orgunitmember"
	"wing/models/ent/orgunitposition"
	"wing/models/ent/resource"
	"wing/models/ent/system"
	"wing/models/ent/user"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    int   `msgpack:"i"`
	Value Value `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func getCollectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	field := fc.Field

walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Name == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return getCollectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

// AuthEdge is the edge representation of Auth.
type AuthEdge struct {
	Node   *Auth  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// AuthConnection is the connection containing edges to Auth.
type AuthConnection struct {
	Edges      []*AuthEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

// AuthPaginateOption enables pagination customization.
type AuthPaginateOption func(*authPager) error

// WithAuthOrder configures pagination ordering.
func WithAuthOrder(order *AuthOrder) AuthPaginateOption {
	if order == nil {
		order = DefaultAuthOrder
	}
	o := *order
	return func(pager *authPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAuthOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAuthFilter configures pagination filter.
func WithAuthFilter(filter func(*AuthQuery) (*AuthQuery, error)) AuthPaginateOption {
	return func(pager *authPager) error {
		if filter == nil {
			return errors.New("AuthQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type authPager struct {
	order  *AuthOrder
	filter func(*AuthQuery) (*AuthQuery, error)
}

func newAuthPager(opts []AuthPaginateOption) (*authPager, error) {
	pager := &authPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAuthOrder
	}
	return pager, nil
}

func (p *authPager) applyFilter(query *AuthQuery) (*AuthQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *authPager) toCursor(a *Auth) Cursor {
	return p.order.Field.toCursor(a)
}

func (p *authPager) applyCursors(query *AuthQuery, after, before *Cursor) *AuthQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultAuthOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *authPager) applyOrder(query *AuthQuery, reverse bool) *AuthQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultAuthOrder.Field {
		query = query.Order(direction.orderFunc(DefaultAuthOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Auth.
func (a *AuthQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AuthPaginateOption,
) (*AuthConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAuthPager(opts)
	if err != nil {
		return nil, err
	}

	if a, err = pager.applyFilter(a); err != nil {
		return nil, err
	}

	conn := &AuthConnection{Edges: []*AuthEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := a.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := a.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	a = pager.applyCursors(a, after, before)
	a = pager.applyOrder(a, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		a = a.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		a = a.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := a.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Auth
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Auth {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Auth {
			return nodes[i]
		}
	}

	conn.Edges = make([]*AuthEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &AuthEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// AuthOrderField defines the ordering field of Auth.
type AuthOrderField struct {
	field    string
	toCursor func(*Auth) Cursor
}

// AuthOrder defines the ordering of Auth.
type AuthOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *AuthOrderField `json:"field"`
}

// DefaultAuthOrder is the default ordering of Auth.
var DefaultAuthOrder = &AuthOrder{
	Direction: OrderDirectionAsc,
	Field: &AuthOrderField{
		field: auth.FieldID,
		toCursor: func(a *Auth) Cursor {
			return Cursor{ID: a.ID}
		},
	},
}

// ToEdge converts Auth into AuthEdge.
func (a *Auth) ToEdge(order *AuthOrder) *AuthEdge {
	if order == nil {
		order = DefaultAuthOrder
	}
	return &AuthEdge{
		Node:   a,
		Cursor: order.Field.toCursor(a),
	}
}

// JobHistoryEdge is the edge representation of JobHistory.
type JobHistoryEdge struct {
	Node   *JobHistory `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// JobHistoryConnection is the connection containing edges to JobHistory.
type JobHistoryConnection struct {
	Edges      []*JobHistoryEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

// JobHistoryPaginateOption enables pagination customization.
type JobHistoryPaginateOption func(*jobHistoryPager) error

// WithJobHistoryOrder configures pagination ordering.
func WithJobHistoryOrder(order *JobHistoryOrder) JobHistoryPaginateOption {
	if order == nil {
		order = DefaultJobHistoryOrder
	}
	o := *order
	return func(pager *jobHistoryPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultJobHistoryOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithJobHistoryFilter configures pagination filter.
func WithJobHistoryFilter(filter func(*JobHistoryQuery) (*JobHistoryQuery, error)) JobHistoryPaginateOption {
	return func(pager *jobHistoryPager) error {
		if filter == nil {
			return errors.New("JobHistoryQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type jobHistoryPager struct {
	order  *JobHistoryOrder
	filter func(*JobHistoryQuery) (*JobHistoryQuery, error)
}

func newJobHistoryPager(opts []JobHistoryPaginateOption) (*jobHistoryPager, error) {
	pager := &jobHistoryPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultJobHistoryOrder
	}
	return pager, nil
}

func (p *jobHistoryPager) applyFilter(query *JobHistoryQuery) (*JobHistoryQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *jobHistoryPager) toCursor(jh *JobHistory) Cursor {
	return p.order.Field.toCursor(jh)
}

func (p *jobHistoryPager) applyCursors(query *JobHistoryQuery, after, before *Cursor) *JobHistoryQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultJobHistoryOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *jobHistoryPager) applyOrder(query *JobHistoryQuery, reverse bool) *JobHistoryQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultJobHistoryOrder.Field {
		query = query.Order(direction.orderFunc(DefaultJobHistoryOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to JobHistory.
func (jh *JobHistoryQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...JobHistoryPaginateOption,
) (*JobHistoryConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newJobHistoryPager(opts)
	if err != nil {
		return nil, err
	}

	if jh, err = pager.applyFilter(jh); err != nil {
		return nil, err
	}

	conn := &JobHistoryConnection{Edges: []*JobHistoryEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := jh.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := jh.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	jh = pager.applyCursors(jh, after, before)
	jh = pager.applyOrder(jh, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		jh = jh.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		jh = jh.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := jh.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *JobHistory
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *JobHistory {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *JobHistory {
			return nodes[i]
		}
	}

	conn.Edges = make([]*JobHistoryEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &JobHistoryEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// JobHistoryOrderFieldCreateTime orders JobHistory by create_time.
	JobHistoryOrderFieldCreateTime = &JobHistoryOrderField{
		field: jobhistory.FieldCreateTime,
		toCursor: func(jh *JobHistory) Cursor {
			return Cursor{
				ID:    jh.ID,
				Value: jh.CreateTime,
			}
		},
	}
	// JobHistoryOrderFieldDate orders JobHistory by date.
	JobHistoryOrderFieldDate = &JobHistoryOrderField{
		field: jobhistory.FieldDate,
		toCursor: func(jh *JobHistory) Cursor {
			return Cursor{
				ID:    jh.ID,
				Value: jh.Date,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f JobHistoryOrderField) String() string {
	var str string
	switch f.field {
	case jobhistory.FieldCreateTime:
		str = "CREATE_TIME"
	case jobhistory.FieldDate:
		str = "DATE"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f JobHistoryOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *JobHistoryOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("JobHistoryOrderField %T must be a string", v)
	}
	switch str {
	case "CREATE_TIME":
		*f = *JobHistoryOrderFieldCreateTime
	case "DATE":
		*f = *JobHistoryOrderFieldDate
	default:
		return fmt.Errorf("%s is not a valid JobHistoryOrderField", str)
	}
	return nil
}

// JobHistoryOrderField defines the ordering field of JobHistory.
type JobHistoryOrderField struct {
	field    string
	toCursor func(*JobHistory) Cursor
}

// JobHistoryOrder defines the ordering of JobHistory.
type JobHistoryOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *JobHistoryOrderField `json:"field"`
}

// DefaultJobHistoryOrder is the default ordering of JobHistory.
var DefaultJobHistoryOrder = &JobHistoryOrder{
	Direction: OrderDirectionAsc,
	Field: &JobHistoryOrderField{
		field: jobhistory.FieldID,
		toCursor: func(jh *JobHistory) Cursor {
			return Cursor{ID: jh.ID}
		},
	},
}

// ToEdge converts JobHistory into JobHistoryEdge.
func (jh *JobHistory) ToEdge(order *JobHistoryOrder) *JobHistoryEdge {
	if order == nil {
		order = DefaultJobHistoryOrder
	}
	return &JobHistoryEdge{
		Node:   jh,
		Cursor: order.Field.toCursor(jh),
	}
}

// OrgUnitEdge is the edge representation of OrgUnit.
type OrgUnitEdge struct {
	Node   *OrgUnit `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// OrgUnitConnection is the connection containing edges to OrgUnit.
type OrgUnitConnection struct {
	Edges      []*OrgUnitEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

// OrgUnitPaginateOption enables pagination customization.
type OrgUnitPaginateOption func(*orgUnitPager) error

// WithOrgUnitOrder configures pagination ordering.
func WithOrgUnitOrder(order *OrgUnitOrder) OrgUnitPaginateOption {
	if order == nil {
		order = DefaultOrgUnitOrder
	}
	o := *order
	return func(pager *orgUnitPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultOrgUnitOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithOrgUnitFilter configures pagination filter.
func WithOrgUnitFilter(filter func(*OrgUnitQuery) (*OrgUnitQuery, error)) OrgUnitPaginateOption {
	return func(pager *orgUnitPager) error {
		if filter == nil {
			return errors.New("OrgUnitQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type orgUnitPager struct {
	order  *OrgUnitOrder
	filter func(*OrgUnitQuery) (*OrgUnitQuery, error)
}

func newOrgUnitPager(opts []OrgUnitPaginateOption) (*orgUnitPager, error) {
	pager := &orgUnitPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultOrgUnitOrder
	}
	return pager, nil
}

func (p *orgUnitPager) applyFilter(query *OrgUnitQuery) (*OrgUnitQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *orgUnitPager) toCursor(ou *OrgUnit) Cursor {
	return p.order.Field.toCursor(ou)
}

func (p *orgUnitPager) applyCursors(query *OrgUnitQuery, after, before *Cursor) *OrgUnitQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultOrgUnitOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *orgUnitPager) applyOrder(query *OrgUnitQuery, reverse bool) *OrgUnitQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultOrgUnitOrder.Field {
		query = query.Order(direction.orderFunc(DefaultOrgUnitOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to OrgUnit.
func (ou *OrgUnitQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...OrgUnitPaginateOption,
) (*OrgUnitConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newOrgUnitPager(opts)
	if err != nil {
		return nil, err
	}

	if ou, err = pager.applyFilter(ou); err != nil {
		return nil, err
	}

	conn := &OrgUnitConnection{Edges: []*OrgUnitEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := ou.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := ou.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	ou = pager.applyCursors(ou, after, before)
	ou = pager.applyOrder(ou, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		ou = ou.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		ou = ou.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := ou.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *OrgUnit
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *OrgUnit {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *OrgUnit {
			return nodes[i]
		}
	}

	conn.Edges = make([]*OrgUnitEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &OrgUnitEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// OrgUnitOrderFieldCreateTime orders OrgUnit by create_time.
	OrgUnitOrderFieldCreateTime = &OrgUnitOrderField{
		field: orgunit.FieldCreateTime,
		toCursor: func(ou *OrgUnit) Cursor {
			return Cursor{
				ID:    ou.ID,
				Value: ou.CreateTime,
			}
		},
	}
	// OrgUnitOrderFieldUpdateTime orders OrgUnit by update_time.
	OrgUnitOrderFieldUpdateTime = &OrgUnitOrderField{
		field: orgunit.FieldUpdateTime,
		toCursor: func(ou *OrgUnit) Cursor {
			return Cursor{
				ID:    ou.ID,
				Value: ou.UpdateTime,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f OrgUnitOrderField) String() string {
	var str string
	switch f.field {
	case orgunit.FieldCreateTime:
		str = "CREATE_TIME"
	case orgunit.FieldUpdateTime:
		str = "UPDATE_TIME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f OrgUnitOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *OrgUnitOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("OrgUnitOrderField %T must be a string", v)
	}
	switch str {
	case "CREATE_TIME":
		*f = *OrgUnitOrderFieldCreateTime
	case "UPDATE_TIME":
		*f = *OrgUnitOrderFieldUpdateTime
	default:
		return fmt.Errorf("%s is not a valid OrgUnitOrderField", str)
	}
	return nil
}

// OrgUnitOrderField defines the ordering field of OrgUnit.
type OrgUnitOrderField struct {
	field    string
	toCursor func(*OrgUnit) Cursor
}

// OrgUnitOrder defines the ordering of OrgUnit.
type OrgUnitOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *OrgUnitOrderField `json:"field"`
}

// DefaultOrgUnitOrder is the default ordering of OrgUnit.
var DefaultOrgUnitOrder = &OrgUnitOrder{
	Direction: OrderDirectionAsc,
	Field: &OrgUnitOrderField{
		field: orgunit.FieldID,
		toCursor: func(ou *OrgUnit) Cursor {
			return Cursor{ID: ou.ID}
		},
	},
}

// ToEdge converts OrgUnit into OrgUnitEdge.
func (ou *OrgUnit) ToEdge(order *OrgUnitOrder) *OrgUnitEdge {
	if order == nil {
		order = DefaultOrgUnitOrder
	}
	return &OrgUnitEdge{
		Node:   ou,
		Cursor: order.Field.toCursor(ou),
	}
}

// OrgUnitMemberEdge is the edge representation of OrgUnitMember.
type OrgUnitMemberEdge struct {
	Node   *OrgUnitMember `json:"node"`
	Cursor Cursor         `json:"cursor"`
}

// OrgUnitMemberConnection is the connection containing edges to OrgUnitMember.
type OrgUnitMemberConnection struct {
	Edges      []*OrgUnitMemberEdge `json:"edges"`
	PageInfo   PageInfo             `json:"pageInfo"`
	TotalCount int                  `json:"totalCount"`
}

// OrgUnitMemberPaginateOption enables pagination customization.
type OrgUnitMemberPaginateOption func(*orgUnitMemberPager) error

// WithOrgUnitMemberOrder configures pagination ordering.
func WithOrgUnitMemberOrder(order *OrgUnitMemberOrder) OrgUnitMemberPaginateOption {
	if order == nil {
		order = DefaultOrgUnitMemberOrder
	}
	o := *order
	return func(pager *orgUnitMemberPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultOrgUnitMemberOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithOrgUnitMemberFilter configures pagination filter.
func WithOrgUnitMemberFilter(filter func(*OrgUnitMemberQuery) (*OrgUnitMemberQuery, error)) OrgUnitMemberPaginateOption {
	return func(pager *orgUnitMemberPager) error {
		if filter == nil {
			return errors.New("OrgUnitMemberQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type orgUnitMemberPager struct {
	order  *OrgUnitMemberOrder
	filter func(*OrgUnitMemberQuery) (*OrgUnitMemberQuery, error)
}

func newOrgUnitMemberPager(opts []OrgUnitMemberPaginateOption) (*orgUnitMemberPager, error) {
	pager := &orgUnitMemberPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultOrgUnitMemberOrder
	}
	return pager, nil
}

func (p *orgUnitMemberPager) applyFilter(query *OrgUnitMemberQuery) (*OrgUnitMemberQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *orgUnitMemberPager) toCursor(oum *OrgUnitMember) Cursor {
	return p.order.Field.toCursor(oum)
}

func (p *orgUnitMemberPager) applyCursors(query *OrgUnitMemberQuery, after, before *Cursor) *OrgUnitMemberQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultOrgUnitMemberOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *orgUnitMemberPager) applyOrder(query *OrgUnitMemberQuery, reverse bool) *OrgUnitMemberQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultOrgUnitMemberOrder.Field {
		query = query.Order(direction.orderFunc(DefaultOrgUnitMemberOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to OrgUnitMember.
func (oum *OrgUnitMemberQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...OrgUnitMemberPaginateOption,
) (*OrgUnitMemberConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newOrgUnitMemberPager(opts)
	if err != nil {
		return nil, err
	}

	if oum, err = pager.applyFilter(oum); err != nil {
		return nil, err
	}

	conn := &OrgUnitMemberConnection{Edges: []*OrgUnitMemberEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := oum.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := oum.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	oum = pager.applyCursors(oum, after, before)
	oum = pager.applyOrder(oum, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		oum = oum.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		oum = oum.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := oum.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *OrgUnitMember
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *OrgUnitMember {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *OrgUnitMember {
			return nodes[i]
		}
	}

	conn.Edges = make([]*OrgUnitMemberEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &OrgUnitMemberEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// OrgUnitMemberOrderFieldCreateTime orders OrgUnitMember by create_time.
	OrgUnitMemberOrderFieldCreateTime = &OrgUnitMemberOrderField{
		field: orgunitmember.FieldCreateTime,
		toCursor: func(oum *OrgUnitMember) Cursor {
			return Cursor{
				ID:    oum.ID,
				Value: oum.CreateTime,
			}
		},
	}
	// OrgUnitMemberOrderFieldUpdateTime orders OrgUnitMember by update_time.
	OrgUnitMemberOrderFieldUpdateTime = &OrgUnitMemberOrderField{
		field: orgunitmember.FieldUpdateTime,
		toCursor: func(oum *OrgUnitMember) Cursor {
			return Cursor{
				ID:    oum.ID,
				Value: oum.UpdateTime,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f OrgUnitMemberOrderField) String() string {
	var str string
	switch f.field {
	case orgunitmember.FieldCreateTime:
		str = "CREATE_TIME"
	case orgunitmember.FieldUpdateTime:
		str = "UPDATE_TIME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f OrgUnitMemberOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *OrgUnitMemberOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("OrgUnitMemberOrderField %T must be a string", v)
	}
	switch str {
	case "CREATE_TIME":
		*f = *OrgUnitMemberOrderFieldCreateTime
	case "UPDATE_TIME":
		*f = *OrgUnitMemberOrderFieldUpdateTime
	default:
		return fmt.Errorf("%s is not a valid OrgUnitMemberOrderField", str)
	}
	return nil
}

// OrgUnitMemberOrderField defines the ordering field of OrgUnitMember.
type OrgUnitMemberOrderField struct {
	field    string
	toCursor func(*OrgUnitMember) Cursor
}

// OrgUnitMemberOrder defines the ordering of OrgUnitMember.
type OrgUnitMemberOrder struct {
	Direction OrderDirection           `json:"direction"`
	Field     *OrgUnitMemberOrderField `json:"field"`
}

// DefaultOrgUnitMemberOrder is the default ordering of OrgUnitMember.
var DefaultOrgUnitMemberOrder = &OrgUnitMemberOrder{
	Direction: OrderDirectionAsc,
	Field: &OrgUnitMemberOrderField{
		field: orgunitmember.FieldID,
		toCursor: func(oum *OrgUnitMember) Cursor {
			return Cursor{ID: oum.ID}
		},
	},
}

// ToEdge converts OrgUnitMember into OrgUnitMemberEdge.
func (oum *OrgUnitMember) ToEdge(order *OrgUnitMemberOrder) *OrgUnitMemberEdge {
	if order == nil {
		order = DefaultOrgUnitMemberOrder
	}
	return &OrgUnitMemberEdge{
		Node:   oum,
		Cursor: order.Field.toCursor(oum),
	}
}

// OrgUnitPositionEdge is the edge representation of OrgUnitPosition.
type OrgUnitPositionEdge struct {
	Node   *OrgUnitPosition `json:"node"`
	Cursor Cursor           `json:"cursor"`
}

// OrgUnitPositionConnection is the connection containing edges to OrgUnitPosition.
type OrgUnitPositionConnection struct {
	Edges      []*OrgUnitPositionEdge `json:"edges"`
	PageInfo   PageInfo               `json:"pageInfo"`
	TotalCount int                    `json:"totalCount"`
}

// OrgUnitPositionPaginateOption enables pagination customization.
type OrgUnitPositionPaginateOption func(*orgUnitPositionPager) error

// WithOrgUnitPositionOrder configures pagination ordering.
func WithOrgUnitPositionOrder(order *OrgUnitPositionOrder) OrgUnitPositionPaginateOption {
	if order == nil {
		order = DefaultOrgUnitPositionOrder
	}
	o := *order
	return func(pager *orgUnitPositionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultOrgUnitPositionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithOrgUnitPositionFilter configures pagination filter.
func WithOrgUnitPositionFilter(filter func(*OrgUnitPositionQuery) (*OrgUnitPositionQuery, error)) OrgUnitPositionPaginateOption {
	return func(pager *orgUnitPositionPager) error {
		if filter == nil {
			return errors.New("OrgUnitPositionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type orgUnitPositionPager struct {
	order  *OrgUnitPositionOrder
	filter func(*OrgUnitPositionQuery) (*OrgUnitPositionQuery, error)
}

func newOrgUnitPositionPager(opts []OrgUnitPositionPaginateOption) (*orgUnitPositionPager, error) {
	pager := &orgUnitPositionPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultOrgUnitPositionOrder
	}
	return pager, nil
}

func (p *orgUnitPositionPager) applyFilter(query *OrgUnitPositionQuery) (*OrgUnitPositionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *orgUnitPositionPager) toCursor(oup *OrgUnitPosition) Cursor {
	return p.order.Field.toCursor(oup)
}

func (p *orgUnitPositionPager) applyCursors(query *OrgUnitPositionQuery, after, before *Cursor) *OrgUnitPositionQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultOrgUnitPositionOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *orgUnitPositionPager) applyOrder(query *OrgUnitPositionQuery, reverse bool) *OrgUnitPositionQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultOrgUnitPositionOrder.Field {
		query = query.Order(direction.orderFunc(DefaultOrgUnitPositionOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to OrgUnitPosition.
func (oup *OrgUnitPositionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...OrgUnitPositionPaginateOption,
) (*OrgUnitPositionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newOrgUnitPositionPager(opts)
	if err != nil {
		return nil, err
	}

	if oup, err = pager.applyFilter(oup); err != nil {
		return nil, err
	}

	conn := &OrgUnitPositionConnection{Edges: []*OrgUnitPositionEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := oup.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := oup.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	oup = pager.applyCursors(oup, after, before)
	oup = pager.applyOrder(oup, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		oup = oup.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		oup = oup.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := oup.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *OrgUnitPosition
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *OrgUnitPosition {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *OrgUnitPosition {
			return nodes[i]
		}
	}

	conn.Edges = make([]*OrgUnitPositionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &OrgUnitPositionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// OrgUnitPositionOrderFieldCreateTime orders OrgUnitPosition by create_time.
	OrgUnitPositionOrderFieldCreateTime = &OrgUnitPositionOrderField{
		field: orgunitposition.FieldCreateTime,
		toCursor: func(oup *OrgUnitPosition) Cursor {
			return Cursor{
				ID:    oup.ID,
				Value: oup.CreateTime,
			}
		},
	}
	// OrgUnitPositionOrderFieldUpdateTime orders OrgUnitPosition by update_time.
	OrgUnitPositionOrderFieldUpdateTime = &OrgUnitPositionOrderField{
		field: orgunitposition.FieldUpdateTime,
		toCursor: func(oup *OrgUnitPosition) Cursor {
			return Cursor{
				ID:    oup.ID,
				Value: oup.UpdateTime,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f OrgUnitPositionOrderField) String() string {
	var str string
	switch f.field {
	case orgunitposition.FieldCreateTime:
		str = "CREATE_TIME"
	case orgunitposition.FieldUpdateTime:
		str = "UPDATE_TIME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f OrgUnitPositionOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *OrgUnitPositionOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("OrgUnitPositionOrderField %T must be a string", v)
	}
	switch str {
	case "CREATE_TIME":
		*f = *OrgUnitPositionOrderFieldCreateTime
	case "UPDATE_TIME":
		*f = *OrgUnitPositionOrderFieldUpdateTime
	default:
		return fmt.Errorf("%s is not a valid OrgUnitPositionOrderField", str)
	}
	return nil
}

// OrgUnitPositionOrderField defines the ordering field of OrgUnitPosition.
type OrgUnitPositionOrderField struct {
	field    string
	toCursor func(*OrgUnitPosition) Cursor
}

// OrgUnitPositionOrder defines the ordering of OrgUnitPosition.
type OrgUnitPositionOrder struct {
	Direction OrderDirection             `json:"direction"`
	Field     *OrgUnitPositionOrderField `json:"field"`
}

// DefaultOrgUnitPositionOrder is the default ordering of OrgUnitPosition.
var DefaultOrgUnitPositionOrder = &OrgUnitPositionOrder{
	Direction: OrderDirectionAsc,
	Field: &OrgUnitPositionOrderField{
		field: orgunitposition.FieldID,
		toCursor: func(oup *OrgUnitPosition) Cursor {
			return Cursor{ID: oup.ID}
		},
	},
}

// ToEdge converts OrgUnitPosition into OrgUnitPositionEdge.
func (oup *OrgUnitPosition) ToEdge(order *OrgUnitPositionOrder) *OrgUnitPositionEdge {
	if order == nil {
		order = DefaultOrgUnitPositionOrder
	}
	return &OrgUnitPositionEdge{
		Node:   oup,
		Cursor: order.Field.toCursor(oup),
	}
}

// OrganizationEdge is the edge representation of Organization.
type OrganizationEdge struct {
	Node   *Organization `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// OrganizationConnection is the connection containing edges to Organization.
type OrganizationConnection struct {
	Edges      []*OrganizationEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

// OrganizationPaginateOption enables pagination customization.
type OrganizationPaginateOption func(*organizationPager) error

// WithOrganizationOrder configures pagination ordering.
func WithOrganizationOrder(order *OrganizationOrder) OrganizationPaginateOption {
	if order == nil {
		order = DefaultOrganizationOrder
	}
	o := *order
	return func(pager *organizationPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultOrganizationOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithOrganizationFilter configures pagination filter.
func WithOrganizationFilter(filter func(*OrganizationQuery) (*OrganizationQuery, error)) OrganizationPaginateOption {
	return func(pager *organizationPager) error {
		if filter == nil {
			return errors.New("OrganizationQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type organizationPager struct {
	order  *OrganizationOrder
	filter func(*OrganizationQuery) (*OrganizationQuery, error)
}

func newOrganizationPager(opts []OrganizationPaginateOption) (*organizationPager, error) {
	pager := &organizationPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultOrganizationOrder
	}
	return pager, nil
}

func (p *organizationPager) applyFilter(query *OrganizationQuery) (*OrganizationQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *organizationPager) toCursor(o *Organization) Cursor {
	return p.order.Field.toCursor(o)
}

func (p *organizationPager) applyCursors(query *OrganizationQuery, after, before *Cursor) *OrganizationQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultOrganizationOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *organizationPager) applyOrder(query *OrganizationQuery, reverse bool) *OrganizationQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultOrganizationOrder.Field {
		query = query.Order(direction.orderFunc(DefaultOrganizationOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Organization.
func (o *OrganizationQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...OrganizationPaginateOption,
) (*OrganizationConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newOrganizationPager(opts)
	if err != nil {
		return nil, err
	}

	if o, err = pager.applyFilter(o); err != nil {
		return nil, err
	}

	conn := &OrganizationConnection{Edges: []*OrganizationEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := o.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := o.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	o = pager.applyCursors(o, after, before)
	o = pager.applyOrder(o, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		o = o.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		o = o.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := o.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Organization
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Organization {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Organization {
			return nodes[i]
		}
	}

	conn.Edges = make([]*OrganizationEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &OrganizationEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// OrganizationOrderFieldCreateTime orders Organization by create_time.
	OrganizationOrderFieldCreateTime = &OrganizationOrderField{
		field: organization.FieldCreateTime,
		toCursor: func(o *Organization) Cursor {
			return Cursor{
				ID:    o.ID,
				Value: o.CreateTime,
			}
		},
	}
	// OrganizationOrderFieldUpdateTime orders Organization by update_time.
	OrganizationOrderFieldUpdateTime = &OrganizationOrderField{
		field: organization.FieldUpdateTime,
		toCursor: func(o *Organization) Cursor {
			return Cursor{
				ID:    o.ID,
				Value: o.UpdateTime,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f OrganizationOrderField) String() string {
	var str string
	switch f.field {
	case organization.FieldCreateTime:
		str = "CREATE_TIME"
	case organization.FieldUpdateTime:
		str = "UPDATE_TIME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f OrganizationOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *OrganizationOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("OrganizationOrderField %T must be a string", v)
	}
	switch str {
	case "CREATE_TIME":
		*f = *OrganizationOrderFieldCreateTime
	case "UPDATE_TIME":
		*f = *OrganizationOrderFieldUpdateTime
	default:
		return fmt.Errorf("%s is not a valid OrganizationOrderField", str)
	}
	return nil
}

// OrganizationOrderField defines the ordering field of Organization.
type OrganizationOrderField struct {
	field    string
	toCursor func(*Organization) Cursor
}

// OrganizationOrder defines the ordering of Organization.
type OrganizationOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *OrganizationOrderField `json:"field"`
}

// DefaultOrganizationOrder is the default ordering of Organization.
var DefaultOrganizationOrder = &OrganizationOrder{
	Direction: OrderDirectionAsc,
	Field: &OrganizationOrderField{
		field: organization.FieldID,
		toCursor: func(o *Organization) Cursor {
			return Cursor{ID: o.ID}
		},
	},
}

// ToEdge converts Organization into OrganizationEdge.
func (o *Organization) ToEdge(order *OrganizationOrder) *OrganizationEdge {
	if order == nil {
		order = DefaultOrganizationOrder
	}
	return &OrganizationEdge{
		Node:   o,
		Cursor: order.Field.toCursor(o),
	}
}

// ResourceEdge is the edge representation of Resource.
type ResourceEdge struct {
	Node   *Resource `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// ResourceConnection is the connection containing edges to Resource.
type ResourceConnection struct {
	Edges      []*ResourceEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

// ResourcePaginateOption enables pagination customization.
type ResourcePaginateOption func(*resourcePager) error

// WithResourceOrder configures pagination ordering.
func WithResourceOrder(order *ResourceOrder) ResourcePaginateOption {
	if order == nil {
		order = DefaultResourceOrder
	}
	o := *order
	return func(pager *resourcePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultResourceOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithResourceFilter configures pagination filter.
func WithResourceFilter(filter func(*ResourceQuery) (*ResourceQuery, error)) ResourcePaginateOption {
	return func(pager *resourcePager) error {
		if filter == nil {
			return errors.New("ResourceQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type resourcePager struct {
	order  *ResourceOrder
	filter func(*ResourceQuery) (*ResourceQuery, error)
}

func newResourcePager(opts []ResourcePaginateOption) (*resourcePager, error) {
	pager := &resourcePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultResourceOrder
	}
	return pager, nil
}

func (p *resourcePager) applyFilter(query *ResourceQuery) (*ResourceQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *resourcePager) toCursor(r *Resource) Cursor {
	return p.order.Field.toCursor(r)
}

func (p *resourcePager) applyCursors(query *ResourceQuery, after, before *Cursor) *ResourceQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultResourceOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *resourcePager) applyOrder(query *ResourceQuery, reverse bool) *ResourceQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultResourceOrder.Field {
		query = query.Order(direction.orderFunc(DefaultResourceOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Resource.
func (r *ResourceQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ResourcePaginateOption,
) (*ResourceConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newResourcePager(opts)
	if err != nil {
		return nil, err
	}

	if r, err = pager.applyFilter(r); err != nil {
		return nil, err
	}

	conn := &ResourceConnection{Edges: []*ResourceEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := r.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := r.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	r = pager.applyCursors(r, after, before)
	r = pager.applyOrder(r, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		r = r.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		r = r.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := r.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Resource
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Resource {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Resource {
			return nodes[i]
		}
	}

	conn.Edges = make([]*ResourceEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &ResourceEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// ResourceOrderField defines the ordering field of Resource.
type ResourceOrderField struct {
	field    string
	toCursor func(*Resource) Cursor
}

// ResourceOrder defines the ordering of Resource.
type ResourceOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *ResourceOrderField `json:"field"`
}

// DefaultResourceOrder is the default ordering of Resource.
var DefaultResourceOrder = &ResourceOrder{
	Direction: OrderDirectionAsc,
	Field: &ResourceOrderField{
		field: resource.FieldID,
		toCursor: func(r *Resource) Cursor {
			return Cursor{ID: r.ID}
		},
	},
}

// ToEdge converts Resource into ResourceEdge.
func (r *Resource) ToEdge(order *ResourceOrder) *ResourceEdge {
	if order == nil {
		order = DefaultResourceOrder
	}
	return &ResourceEdge{
		Node:   r,
		Cursor: order.Field.toCursor(r),
	}
}

// SystemEdge is the edge representation of System.
type SystemEdge struct {
	Node   *System `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// SystemConnection is the connection containing edges to System.
type SystemConnection struct {
	Edges      []*SystemEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

// SystemPaginateOption enables pagination customization.
type SystemPaginateOption func(*systemPager) error

// WithSystemOrder configures pagination ordering.
func WithSystemOrder(order *SystemOrder) SystemPaginateOption {
	if order == nil {
		order = DefaultSystemOrder
	}
	o := *order
	return func(pager *systemPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultSystemOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithSystemFilter configures pagination filter.
func WithSystemFilter(filter func(*SystemQuery) (*SystemQuery, error)) SystemPaginateOption {
	return func(pager *systemPager) error {
		if filter == nil {
			return errors.New("SystemQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type systemPager struct {
	order  *SystemOrder
	filter func(*SystemQuery) (*SystemQuery, error)
}

func newSystemPager(opts []SystemPaginateOption) (*systemPager, error) {
	pager := &systemPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultSystemOrder
	}
	return pager, nil
}

func (p *systemPager) applyFilter(query *SystemQuery) (*SystemQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *systemPager) toCursor(s *System) Cursor {
	return p.order.Field.toCursor(s)
}

func (p *systemPager) applyCursors(query *SystemQuery, after, before *Cursor) *SystemQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultSystemOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *systemPager) applyOrder(query *SystemQuery, reverse bool) *SystemQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultSystemOrder.Field {
		query = query.Order(direction.orderFunc(DefaultSystemOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to System.
func (s *SystemQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...SystemPaginateOption,
) (*SystemConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newSystemPager(opts)
	if err != nil {
		return nil, err
	}

	if s, err = pager.applyFilter(s); err != nil {
		return nil, err
	}

	conn := &SystemConnection{Edges: []*SystemEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := s.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := s.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	s = pager.applyCursors(s, after, before)
	s = pager.applyOrder(s, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		s = s.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		s = s.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := s.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *System
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *System {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *System {
			return nodes[i]
		}
	}

	conn.Edges = make([]*SystemEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &SystemEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// SystemOrderFieldCreateTime orders System by create_time.
	SystemOrderFieldCreateTime = &SystemOrderField{
		field: system.FieldCreateTime,
		toCursor: func(s *System) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.CreateTime,
			}
		},
	}
	// SystemOrderFieldUpdateTime orders System by update_time.
	SystemOrderFieldUpdateTime = &SystemOrderField{
		field: system.FieldUpdateTime,
		toCursor: func(s *System) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.UpdateTime,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f SystemOrderField) String() string {
	var str string
	switch f.field {
	case system.FieldCreateTime:
		str = "CREATE_TIME"
	case system.FieldUpdateTime:
		str = "UPDATE_TIME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f SystemOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *SystemOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("SystemOrderField %T must be a string", v)
	}
	switch str {
	case "CREATE_TIME":
		*f = *SystemOrderFieldCreateTime
	case "UPDATE_TIME":
		*f = *SystemOrderFieldUpdateTime
	default:
		return fmt.Errorf("%s is not a valid SystemOrderField", str)
	}
	return nil
}

// SystemOrderField defines the ordering field of System.
type SystemOrderField struct {
	field    string
	toCursor func(*System) Cursor
}

// SystemOrder defines the ordering of System.
type SystemOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *SystemOrderField `json:"field"`
}

// DefaultSystemOrder is the default ordering of System.
var DefaultSystemOrder = &SystemOrder{
	Direction: OrderDirectionAsc,
	Field: &SystemOrderField{
		field: system.FieldID,
		toCursor: func(s *System) Cursor {
			return Cursor{ID: s.ID}
		},
	},
}

// ToEdge converts System into SystemEdge.
func (s *System) ToEdge(order *SystemOrder) *SystemEdge {
	if order == nil {
		order = DefaultSystemOrder
	}
	return &SystemEdge{
		Node:   s,
		Cursor: order.Field.toCursor(s),
	}
}

// UserEdge is the edge representation of User.
type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// UserConnection is the connection containing edges to User.
type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

// UserPaginateOption enables pagination customization.
type UserPaginateOption func(*userPager) error

// WithUserOrder configures pagination ordering.
func WithUserOrder(order *UserOrder) UserPaginateOption {
	if order == nil {
		order = DefaultUserOrder
	}
	o := *order
	return func(pager *userPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserFilter configures pagination filter.
func WithUserFilter(filter func(*UserQuery) (*UserQuery, error)) UserPaginateOption {
	return func(pager *userPager) error {
		if filter == nil {
			return errors.New("UserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userPager struct {
	order  *UserOrder
	filter func(*UserQuery) (*UserQuery, error)
}

func newUserPager(opts []UserPaginateOption) (*userPager, error) {
	pager := &userPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserOrder
	}
	return pager, nil
}

func (p *userPager) applyFilter(query *UserQuery) (*UserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userPager) toCursor(u *User) Cursor {
	return p.order.Field.toCursor(u)
}

func (p *userPager) applyCursors(query *UserQuery, after, before *Cursor) *UserQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultUserOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *userPager) applyOrder(query *UserQuery, reverse bool) *UserQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultUserOrder.Field {
		query = query.Order(direction.orderFunc(DefaultUserOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to User.
func (u *UserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPaginateOption,
) (*UserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPager(opts)
	if err != nil {
		return nil, err
	}

	if u, err = pager.applyFilter(u); err != nil {
		return nil, err
	}

	conn := &UserConnection{Edges: []*UserEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := u.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := u.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	u = pager.applyCursors(u, after, before)
	u = pager.applyOrder(u, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		u = u.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		u = u.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := u.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *User
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *User {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *User {
			return nodes[i]
		}
	}

	conn.Edges = make([]*UserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &UserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// UserOrderFieldCreateTime orders User by create_time.
	UserOrderFieldCreateTime = &UserOrderField{
		field: user.FieldCreateTime,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.CreateTime,
			}
		},
	}
	// UserOrderFieldUpdateTime orders User by update_time.
	UserOrderFieldUpdateTime = &UserOrderField{
		field: user.FieldUpdateTime,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.UpdateTime,
			}
		},
	}
	// UserOrderFieldAccountName orders User by account_name.
	UserOrderFieldAccountName = &UserOrderField{
		field: user.FieldAccountName,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.AccountName,
			}
		},
	}
	// UserOrderFieldFamilyName orders User by family_name.
	UserOrderFieldFamilyName = &UserOrderField{
		field: user.FieldFamilyName,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.FamilyName,
			}
		},
	}
	// UserOrderFieldDisplayName orders User by display_name.
	UserOrderFieldDisplayName = &UserOrderField{
		field: user.FieldDisplayName,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.DisplayName,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f UserOrderField) String() string {
	var str string
	switch f.field {
	case user.FieldCreateTime:
		str = "CREATE_TIME"
	case user.FieldUpdateTime:
		str = "UPDATE_TIME"
	case user.FieldAccountName:
		str = "ACCOUNT_NAME"
	case user.FieldFamilyName:
		str = "FAMILY_NAME"
	case user.FieldDisplayName:
		str = "DISPLAY_NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f UserOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *UserOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("UserOrderField %T must be a string", v)
	}
	switch str {
	case "CREATE_TIME":
		*f = *UserOrderFieldCreateTime
	case "UPDATE_TIME":
		*f = *UserOrderFieldUpdateTime
	case "ACCOUNT_NAME":
		*f = *UserOrderFieldAccountName
	case "FAMILY_NAME":
		*f = *UserOrderFieldFamilyName
	case "DISPLAY_NAME":
		*f = *UserOrderFieldDisplayName
	default:
		return fmt.Errorf("%s is not a valid UserOrderField", str)
	}
	return nil
}

// UserOrderField defines the ordering field of User.
type UserOrderField struct {
	field    string
	toCursor func(*User) Cursor
}

// UserOrder defines the ordering of User.
type UserOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UserOrderField `json:"field"`
}

// DefaultUserOrder is the default ordering of User.
var DefaultUserOrder = &UserOrder{
	Direction: OrderDirectionAsc,
	Field: &UserOrderField{
		field: user.FieldID,
		toCursor: func(u *User) Cursor {
			return Cursor{ID: u.ID}
		},
	},
}

// ToEdge converts User into UserEdge.
func (u *User) ToEdge(order *UserOrder) *UserEdge {
	if order == nil {
		order = DefaultUserOrder
	}
	return &UserEdge{
		Node:   u,
		Cursor: order.Field.toCursor(u),
	}
}
