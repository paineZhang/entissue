// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (a *AuthQuery) CollectFields(ctx context.Context, satisfies ...string) *AuthQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		a = a.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return a
}

func (a *AuthQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *AuthQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "belong_to":
			a = a.WithBelongTo(func(query *UserQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return a
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (jh *JobHistoryQuery) CollectFields(ctx context.Context, satisfies ...string) *JobHistoryQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		jh = jh.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return jh
}

func (jh *JobHistoryQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *JobHistoryQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "belong_to":
			jh = jh.WithBelongTo(func(query *UserQuery) {
				query.collectField(ctx, field)
			})
		case "create_by":
			jh = jh.WithCreateBy(func(query *UserQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return jh
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ou *OrgUnitQuery) CollectFields(ctx context.Context, satisfies ...string) *OrgUnitQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		ou = ou.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return ou
}

func (ou *OrgUnitQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *OrgUnitQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "belongToOrg":
			ou = ou.WithBelongToOrg(func(query *OrganizationQuery) {
				query.collectField(ctx, field)
			})
		case "create_by":
			ou = ou.WithCreateBy(func(query *UserQuery) {
				query.collectField(ctx, field)
			})
		case "members":
			ou = ou.WithMembers(func(query *OrgUnitMemberQuery) {
				query.collectField(ctx, field)
			})
		case "positions":
			ou = ou.WithPositions(func(query *OrgUnitPositionQuery) {
				query.collectField(ctx, field)
			})
		case "supUnit":
			ou = ou.WithSupUnit(func(query *OrgUnitQuery) {
				query.collectField(ctx, field)
			})
		case "update_by":
			ou = ou.WithUpdateBy(func(query *UserQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return ou
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (oum *OrgUnitMemberQuery) CollectFields(ctx context.Context, satisfies ...string) *OrgUnitMemberQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		oum = oum.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return oum
}

func (oum *OrgUnitMemberQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *OrgUnitMemberQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "belongToOrgUnit":
			oum = oum.WithBelongToOrgUnit(func(query *OrgUnitQuery) {
				query.collectField(ctx, field)
			})
		case "create_by":
			oum = oum.WithCreateBy(func(query *UserQuery) {
				query.collectField(ctx, field)
			})
		case "position":
			oum = oum.WithPosition(func(query *OrgUnitPositionQuery) {
				query.collectField(ctx, field)
			})
		case "update_by":
			oum = oum.WithUpdateBy(func(query *UserQuery) {
				query.collectField(ctx, field)
			})
		case "user":
			oum = oum.WithUser(func(query *UserQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return oum
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (oup *OrgUnitPositionQuery) CollectFields(ctx context.Context, satisfies ...string) *OrgUnitPositionQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		oup = oup.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return oup
}

func (oup *OrgUnitPositionQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *OrgUnitPositionQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "belongToOrgUnit":
			oup = oup.WithBelongToOrgUnit(func(query *OrgUnitQuery) {
				query.collectField(ctx, field)
			})
		case "belongToOrgUnitMembers":
			oup = oup.WithBelongToOrgUnitMembers(func(query *OrgUnitMemberQuery) {
				query.collectField(ctx, field)
			})
		case "create_by":
			oup = oup.WithCreateBy(func(query *UserQuery) {
				query.collectField(ctx, field)
			})
		case "update_by":
			oup = oup.WithUpdateBy(func(query *UserQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return oup
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (o *OrganizationQuery) CollectFields(ctx context.Context, satisfies ...string) *OrganizationQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		o = o.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return o
}

func (o *OrganizationQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *OrganizationQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "create_by":
			o = o.WithCreateBy(func(query *UserQuery) {
				query.collectField(ctx, field)
			})
		case "staffs":
			o = o.WithStaffs(func(query *UserQuery) {
				query.collectField(ctx, field)
			})
		case "units":
			o = o.WithUnits(func(query *OrgUnitQuery) {
				query.collectField(ctx, field)
			})
		case "update_by":
			o = o.WithUpdateBy(func(query *UserQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return o
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (r *ResourceQuery) CollectFields(ctx context.Context, satisfies ...string) *ResourceQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		r = r.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return r
}

func (r *ResourceQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ResourceQuery {
	return r
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (s *SystemQuery) CollectFields(ctx context.Context, satisfies ...string) *SystemQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		s = s.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return s
}

func (s *SystemQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *SystemQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "create_by":
			s = s.WithCreateBy(func(query *UserQuery) {
				query.collectField(ctx, field)
			})
		case "update_by":
			s = s.WithUpdateBy(func(query *UserQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return s
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (u *UserQuery) CollectFields(ctx context.Context, satisfies ...string) *UserQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		u = u.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return u
}

func (u *UserQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *UserQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "authHistories":
			u = u.WithAuthHistories(func(query *AuthQuery) {
				query.collectField(ctx, field)
			})
		case "belongToOg":
			u = u.WithBelongToOg(func(query *OrganizationQuery) {
				query.collectField(ctx, field)
			})
		case "belongToOrgUnitMembers":
			u = u.WithBelongToOrgUnitMembers(func(query *OrgUnitMemberQuery) {
				query.collectField(ctx, field)
			})
		case "create_by":
			u = u.WithCreateBy(func(query *UserQuery) {
				query.collectField(ctx, field)
			})
		case "creates":
			u = u.WithCreates(func(query *UserQuery) {
				query.collectField(ctx, field)
			})
		case "jobHistories":
			u = u.WithJobHistories(func(query *JobHistoryQuery) {
				query.collectField(ctx, field)
			})
		case "update_by":
			u = u.WithUpdateBy(func(query *UserQuery) {
				query.collectField(ctx, field)
			})
		case "updates":
			u = u.WithUpdates(func(query *UserQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return u
}
