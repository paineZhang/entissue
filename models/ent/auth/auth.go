// Code generated by entc, DO NOT EDIT.

package auth

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

const (
	// Label holds the string label denoting the auth type in the database.
	Label = "auth"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLastAuthTime holds the string denoting the last_auth_time field in the database.
	FieldLastAuthTime = "last_auth_time"
	// FieldAuthType holds the string denoting the auth_type field in the database.
	FieldAuthType = "auth_type"
	// EdgeBelongTo holds the string denoting the belong_to edge name in mutations.
	EdgeBelongTo = "belong_to"
	// Table holds the table name of the auth in the database.
	Table = "auths"
	// BelongToTable is the table that holds the belong_to relation/edge.
	BelongToTable = "auths"
	// BelongToInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	BelongToInverseTable = "users"
	// BelongToColumn is the table column denoting the belong_to relation/edge.
	BelongToColumn = "user_auth_histories"
)

// Columns holds all SQL columns for auth fields.
var Columns = []string{
	FieldID,
	FieldLastAuthTime,
	FieldAuthType,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "auths"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_auth_histories",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultLastAuthTime holds the default value on creation for the "last_auth_time" field.
	DefaultLastAuthTime func() time.Time
)

// AuthType defines the type for the "auth_type" enum field.
type AuthType string

// AuthType values.
const (
	AuthTypeLogin   AuthType = "login"
	AuthTypeRefresh AuthType = "refresh"
)

func (at AuthType) String() string {
	return string(at)
}

// AuthTypeValidator is a validator for the "auth_type" field enum values. It is called by the builders before save.
func AuthTypeValidator(at AuthType) error {
	switch at {
	case AuthTypeLogin, AuthTypeRefresh:
		return nil
	default:
		return fmt.Errorf("auth: invalid enum value for auth_type field: %q", at)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (at AuthType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(at.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (at *AuthType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*at = AuthType(str)
	if err := AuthTypeValidator(*at); err != nil {
		return fmt.Errorf("%s is not a valid AuthType", str)
	}
	return nil
}
