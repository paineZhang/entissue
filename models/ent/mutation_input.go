// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"
	"wing/models/ent/auth"
	"wing/models/ent/jobhistory"
	"wing/models/ent/user"
)

// CreateAuthInput represents a mutation input for creating auths.
type CreateAuthInput struct {
	LastAuthTime *time.Time
	AuthType     auth.AuthType
	BelongTo     *int
}

// Mutate applies the CreateAuthInput on the AuthCreate builder.
func (i *CreateAuthInput) Mutate(m *AuthCreate) {
	if v := i.LastAuthTime; v != nil {
		m.SetLastAuthTime(*v)
	}
	m.SetAuthType(i.AuthType)
	if v := i.BelongTo; v != nil {
		m.SetBelongToID(*v)
	}
}

// SetInput applies the change-set in the CreateAuthInput on the create builder.
func (c *AuthCreate) SetInput(i CreateAuthInput) *AuthCreate {
	i.Mutate(c)
	return c
}

// UpdateAuthInput represents a mutation input for updating auths.
type UpdateAuthInput struct {
	LastAuthTime  *time.Time
	AuthType      *auth.AuthType
	BelongTo      *int
	ClearBelongTo bool
}

// Mutate applies the UpdateAuthInput on the AuthMutation.
func (i *UpdateAuthInput) Mutate(m *AuthMutation) {
	if v := i.LastAuthTime; v != nil {
		m.SetLastAuthTime(*v)
	}
	if v := i.AuthType; v != nil {
		m.SetAuthType(*v)
	}
	if i.ClearBelongTo {
		m.ClearBelongTo()
	}
	if v := i.BelongTo; v != nil {
		m.SetBelongToID(*v)
	}
}

// SetInput applies the change-set in the UpdateAuthInput on the update builder.
func (u *AuthUpdate) SetInput(i UpdateAuthInput) *AuthUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateAuthInput on the update-one builder.
func (u *AuthUpdateOne) SetInput(i UpdateAuthInput) *AuthUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateJobHistoryInput represents a mutation input for creating jobhistories.
type CreateJobHistoryInput struct {
	CreateByUser      *int
	CreateTime        *time.Time
	Date              time.Time
	JobEntryLeaveType jobhistory.JobEntryLeaveType
	CreateBy          *int
	BelongTo          int
}

// Mutate applies the CreateJobHistoryInput on the JobHistoryCreate builder.
func (i *CreateJobHistoryInput) Mutate(m *JobHistoryCreate) {
	if v := i.CreateByUser; v != nil {
		m.SetCreateByUser(*v)
	}
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	m.SetDate(i.Date)
	m.SetJobEntryLeaveType(i.JobEntryLeaveType)
	if v := i.CreateBy; v != nil {
		m.SetCreateByID(*v)
	}
	m.SetBelongToID(i.BelongTo)
}

// SetInput applies the change-set in the CreateJobHistoryInput on the create builder.
func (c *JobHistoryCreate) SetInput(i CreateJobHistoryInput) *JobHistoryCreate {
	i.Mutate(c)
	return c
}

// UpdateJobHistoryInput represents a mutation input for updating jobhistories.
type UpdateJobHistoryInput struct {
	CreateByUser      *int
	ClearCreateByUser bool
	Date              *time.Time
	JobEntryLeaveType *jobhistory.JobEntryLeaveType
	CreateBy          *int
	ClearCreateBy     bool
	BelongTo          *int
	ClearBelongTo     bool
}

// Mutate applies the UpdateJobHistoryInput on the JobHistoryMutation.
func (i *UpdateJobHistoryInput) Mutate(m *JobHistoryMutation) {
	if i.ClearCreateByUser {
		m.ClearCreateByUser()
	}
	if v := i.CreateByUser; v != nil {
		m.SetCreateByUser(*v)
	}
	if v := i.Date; v != nil {
		m.SetDate(*v)
	}
	if v := i.JobEntryLeaveType; v != nil {
		m.SetJobEntryLeaveType(*v)
	}
	if i.ClearCreateBy {
		m.ClearCreateBy()
	}
	if v := i.CreateBy; v != nil {
		m.SetCreateByID(*v)
	}
	if i.ClearBelongTo {
		m.ClearBelongTo()
	}
	if v := i.BelongTo; v != nil {
		m.SetBelongToID(*v)
	}
}

// SetInput applies the change-set in the UpdateJobHistoryInput on the update builder.
func (u *JobHistoryUpdate) SetInput(i UpdateJobHistoryInput) *JobHistoryUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateJobHistoryInput on the update-one builder.
func (u *JobHistoryUpdateOne) SetInput(i UpdateJobHistoryInput) *JobHistoryUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateOrgUnitInput represents a mutation input for creating orgunits.
type CreateOrgUnitInput struct {
	CreateByUser *int
	UpdateByUser *int
	CreateTime   *time.Time
	UpdateTime   *time.Time
	Name         string
	Duty         *string
	CreateBy     *int
	UpdateBy     *int
	Members      []int
	Positions    []int
	SupUnit      *int
	SubUnits     []int
	BelongToOrg  int
}

// Mutate applies the CreateOrgUnitInput on the OrgUnitCreate builder.
func (i *CreateOrgUnitInput) Mutate(m *OrgUnitCreate) {
	if v := i.CreateByUser; v != nil {
		m.SetCreateByUser(*v)
	}
	if v := i.UpdateByUser; v != nil {
		m.SetUpdateByUser(*v)
	}
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetName(i.Name)
	if v := i.Duty; v != nil {
		m.SetDuty(*v)
	}
	if v := i.CreateBy; v != nil {
		m.SetCreateByID(*v)
	}
	if v := i.UpdateBy; v != nil {
		m.SetUpdateByID(*v)
	}
	if ids := i.Members; len(ids) > 0 {
		m.AddMemberIDs(ids...)
	}
	if ids := i.Positions; len(ids) > 0 {
		m.AddPositionIDs(ids...)
	}
	if v := i.SupUnit; v != nil {
		m.SetSupUnitID(*v)
	}
	if ids := i.SubUnits; len(ids) > 0 {
		m.AddSubUnitIDs(ids...)
	}
	m.SetBelongToOrgID(i.BelongToOrg)
}

// SetInput applies the change-set in the CreateOrgUnitInput on the create builder.
func (c *OrgUnitCreate) SetInput(i CreateOrgUnitInput) *OrgUnitCreate {
	i.Mutate(c)
	return c
}

// UpdateOrgUnitInput represents a mutation input for updating orgunits.
type UpdateOrgUnitInput struct {
	CreateByUser      *int
	ClearCreateByUser bool
	UpdateByUser      *int
	ClearUpdateByUser bool
	UpdateTime        *time.Time
	ClearUpdateTime   bool
	Name              *string
	Duty              *string
	ClearDuty         bool
	CreateBy          *int
	ClearCreateBy     bool
	UpdateBy          *int
	ClearUpdateBy     bool
	AddMemberIDs      []int
	RemoveMemberIDs   []int
	AddPositionIDs    []int
	RemovePositionIDs []int
	SupUnit           *int
	ClearSupUnit      bool
	AddSubUnitIDs     []int
	RemoveSubUnitIDs  []int
	BelongToOrg       *int
	ClearBelongToOrg  bool
}

// Mutate applies the UpdateOrgUnitInput on the OrgUnitMutation.
func (i *UpdateOrgUnitInput) Mutate(m *OrgUnitMutation) {
	if i.ClearCreateByUser {
		m.ClearCreateByUser()
	}
	if v := i.CreateByUser; v != nil {
		m.SetCreateByUser(*v)
	}
	if i.ClearUpdateByUser {
		m.ClearUpdateByUser()
	}
	if v := i.UpdateByUser; v != nil {
		m.SetUpdateByUser(*v)
	}
	if i.ClearUpdateTime {
		m.ClearUpdateTime()
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDuty {
		m.ClearDuty()
	}
	if v := i.Duty; v != nil {
		m.SetDuty(*v)
	}
	if i.ClearCreateBy {
		m.ClearCreateBy()
	}
	if v := i.CreateBy; v != nil {
		m.SetCreateByID(*v)
	}
	if i.ClearUpdateBy {
		m.ClearUpdateBy()
	}
	if v := i.UpdateBy; v != nil {
		m.SetUpdateByID(*v)
	}
	if ids := i.AddMemberIDs; len(ids) > 0 {
		m.AddMemberIDs(ids...)
	}
	if ids := i.RemoveMemberIDs; len(ids) > 0 {
		m.RemoveMemberIDs(ids...)
	}
	if ids := i.AddPositionIDs; len(ids) > 0 {
		m.AddPositionIDs(ids...)
	}
	if ids := i.RemovePositionIDs; len(ids) > 0 {
		m.RemovePositionIDs(ids...)
	}
	if i.ClearSupUnit {
		m.ClearSupUnit()
	}
	if v := i.SupUnit; v != nil {
		m.SetSupUnitID(*v)
	}
	if ids := i.AddSubUnitIDs; len(ids) > 0 {
		m.AddSubUnitIDs(ids...)
	}
	if ids := i.RemoveSubUnitIDs; len(ids) > 0 {
		m.RemoveSubUnitIDs(ids...)
	}
	if i.ClearBelongToOrg {
		m.ClearBelongToOrg()
	}
	if v := i.BelongToOrg; v != nil {
		m.SetBelongToOrgID(*v)
	}
}

// SetInput applies the change-set in the UpdateOrgUnitInput on the update builder.
func (u *OrgUnitUpdate) SetInput(i UpdateOrgUnitInput) *OrgUnitUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateOrgUnitInput on the update-one builder.
func (u *OrgUnitUpdateOne) SetInput(i UpdateOrgUnitInput) *OrgUnitUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateOrgUnitMemberInput represents a mutation input for creating orgunitmembers.
type CreateOrgUnitMemberInput struct {
	CreateByUser      *int
	UpdateByUser      *int
	CreateTime        *time.Time
	UpdateTime        *time.Time
	IsAdditional      bool
	UserID            int
	OrgUnitID         int
	OrgUnitPositionID int
	CreateBy          *int
	UpdateBy          *int
	User              int
	Position          int
	BelongToOrgUnit   int
}

// Mutate applies the CreateOrgUnitMemberInput on the OrgUnitMemberCreate builder.
func (i *CreateOrgUnitMemberInput) Mutate(m *OrgUnitMemberCreate) {
	if v := i.CreateByUser; v != nil {
		m.SetCreateByUser(*v)
	}
	if v := i.UpdateByUser; v != nil {
		m.SetUpdateByUser(*v)
	}
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetIsAdditional(i.IsAdditional)
	m.SetUserID(i.UserID)
	m.SetOrgUnitID(i.OrgUnitID)
	m.SetOrgUnitPositionID(i.OrgUnitPositionID)
	if v := i.CreateBy; v != nil {
		m.SetCreateByID(*v)
	}
	if v := i.UpdateBy; v != nil {
		m.SetUpdateByID(*v)
	}
	m.SetUserID(i.User)
	m.SetPositionID(i.Position)
	m.SetBelongToOrgUnitID(i.BelongToOrgUnit)
}

// SetInput applies the change-set in the CreateOrgUnitMemberInput on the create builder.
func (c *OrgUnitMemberCreate) SetInput(i CreateOrgUnitMemberInput) *OrgUnitMemberCreate {
	i.Mutate(c)
	return c
}

// UpdateOrgUnitMemberInput represents a mutation input for updating orgunitmembers.
type UpdateOrgUnitMemberInput struct {
	CreateByUser         *int
	ClearCreateByUser    bool
	UpdateByUser         *int
	ClearUpdateByUser    bool
	UpdateTime           *time.Time
	ClearUpdateTime      bool
	IsAdditional         *bool
	UserID               *int
	OrgUnitID            *int
	OrgUnitPositionID    *int
	CreateBy             *int
	ClearCreateBy        bool
	UpdateBy             *int
	ClearUpdateBy        bool
	User                 *int
	ClearUser            bool
	Position             *int
	ClearPosition        bool
	BelongToOrgUnit      *int
	ClearBelongToOrgUnit bool
}

// Mutate applies the UpdateOrgUnitMemberInput on the OrgUnitMemberMutation.
func (i *UpdateOrgUnitMemberInput) Mutate(m *OrgUnitMemberMutation) {
	if i.ClearCreateByUser {
		m.ClearCreateByUser()
	}
	if v := i.CreateByUser; v != nil {
		m.SetCreateByUser(*v)
	}
	if i.ClearUpdateByUser {
		m.ClearUpdateByUser()
	}
	if v := i.UpdateByUser; v != nil {
		m.SetUpdateByUser(*v)
	}
	if i.ClearUpdateTime {
		m.ClearUpdateTime()
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.IsAdditional; v != nil {
		m.SetIsAdditional(*v)
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
	if v := i.OrgUnitID; v != nil {
		m.SetOrgUnitID(*v)
	}
	if v := i.OrgUnitPositionID; v != nil {
		m.SetOrgUnitPositionID(*v)
	}
	if i.ClearCreateBy {
		m.ClearCreateBy()
	}
	if v := i.CreateBy; v != nil {
		m.SetCreateByID(*v)
	}
	if i.ClearUpdateBy {
		m.ClearUpdateBy()
	}
	if v := i.UpdateBy; v != nil {
		m.SetUpdateByID(*v)
	}
	if i.ClearUser {
		m.ClearUser()
	}
	if v := i.User; v != nil {
		m.SetUserID(*v)
	}
	if i.ClearPosition {
		m.ClearPosition()
	}
	if v := i.Position; v != nil {
		m.SetPositionID(*v)
	}
	if i.ClearBelongToOrgUnit {
		m.ClearBelongToOrgUnit()
	}
	if v := i.BelongToOrgUnit; v != nil {
		m.SetBelongToOrgUnitID(*v)
	}
}

// SetInput applies the change-set in the UpdateOrgUnitMemberInput on the update builder.
func (u *OrgUnitMemberUpdate) SetInput(i UpdateOrgUnitMemberInput) *OrgUnitMemberUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateOrgUnitMemberInput on the update-one builder.
func (u *OrgUnitMemberUpdateOne) SetInput(i UpdateOrgUnitMemberInput) *OrgUnitMemberUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateOrgUnitPositionInput represents a mutation input for creating orgunitpositions.
type CreateOrgUnitPositionInput struct {
	CreateByUser           *int
	UpdateByUser           *int
	CreateTime             *time.Time
	UpdateTime             *time.Time
	Name                   string
	Duty                   *string
	Level                  int
	OrgUnitID              int
	CreateBy               *int
	UpdateBy               *int
	BelongToOrgUnitMembers []int
	BelongToOrgUnit        int
}

// Mutate applies the CreateOrgUnitPositionInput on the OrgUnitPositionCreate builder.
func (i *CreateOrgUnitPositionInput) Mutate(m *OrgUnitPositionCreate) {
	if v := i.CreateByUser; v != nil {
		m.SetCreateByUser(*v)
	}
	if v := i.UpdateByUser; v != nil {
		m.SetUpdateByUser(*v)
	}
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetName(i.Name)
	if v := i.Duty; v != nil {
		m.SetDuty(*v)
	}
	m.SetLevel(i.Level)
	m.SetOrgUnitID(i.OrgUnitID)
	if v := i.CreateBy; v != nil {
		m.SetCreateByID(*v)
	}
	if v := i.UpdateBy; v != nil {
		m.SetUpdateByID(*v)
	}
	if ids := i.BelongToOrgUnitMembers; len(ids) > 0 {
		m.AddBelongToOrgUnitMemberIDs(ids...)
	}
	m.SetBelongToOrgUnitID(i.BelongToOrgUnit)
}

// SetInput applies the change-set in the CreateOrgUnitPositionInput on the create builder.
func (c *OrgUnitPositionCreate) SetInput(i CreateOrgUnitPositionInput) *OrgUnitPositionCreate {
	i.Mutate(c)
	return c
}

// UpdateOrgUnitPositionInput represents a mutation input for updating orgunitpositions.
type UpdateOrgUnitPositionInput struct {
	CreateByUser                   *int
	ClearCreateByUser              bool
	UpdateByUser                   *int
	ClearUpdateByUser              bool
	UpdateTime                     *time.Time
	ClearUpdateTime                bool
	Name                           *string
	Duty                           *string
	ClearDuty                      bool
	Level                          *int
	OrgUnitID                      *int
	CreateBy                       *int
	ClearCreateBy                  bool
	UpdateBy                       *int
	ClearUpdateBy                  bool
	AddBelongToOrgUnitMemberIDs    []int
	RemoveBelongToOrgUnitMemberIDs []int
	BelongToOrgUnit                *int
	ClearBelongToOrgUnit           bool
}

// Mutate applies the UpdateOrgUnitPositionInput on the OrgUnitPositionMutation.
func (i *UpdateOrgUnitPositionInput) Mutate(m *OrgUnitPositionMutation) {
	if i.ClearCreateByUser {
		m.ClearCreateByUser()
	}
	if v := i.CreateByUser; v != nil {
		m.SetCreateByUser(*v)
	}
	if i.ClearUpdateByUser {
		m.ClearUpdateByUser()
	}
	if v := i.UpdateByUser; v != nil {
		m.SetUpdateByUser(*v)
	}
	if i.ClearUpdateTime {
		m.ClearUpdateTime()
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDuty {
		m.ClearDuty()
	}
	if v := i.Duty; v != nil {
		m.SetDuty(*v)
	}
	if v := i.Level; v != nil {
		m.SetLevel(*v)
	}
	if v := i.OrgUnitID; v != nil {
		m.SetOrgUnitID(*v)
	}
	if i.ClearCreateBy {
		m.ClearCreateBy()
	}
	if v := i.CreateBy; v != nil {
		m.SetCreateByID(*v)
	}
	if i.ClearUpdateBy {
		m.ClearUpdateBy()
	}
	if v := i.UpdateBy; v != nil {
		m.SetUpdateByID(*v)
	}
	if ids := i.AddBelongToOrgUnitMemberIDs; len(ids) > 0 {
		m.AddBelongToOrgUnitMemberIDs(ids...)
	}
	if ids := i.RemoveBelongToOrgUnitMemberIDs; len(ids) > 0 {
		m.RemoveBelongToOrgUnitMemberIDs(ids...)
	}
	if i.ClearBelongToOrgUnit {
		m.ClearBelongToOrgUnit()
	}
	if v := i.BelongToOrgUnit; v != nil {
		m.SetBelongToOrgUnitID(*v)
	}
}

// SetInput applies the change-set in the UpdateOrgUnitPositionInput on the update builder.
func (u *OrgUnitPositionUpdate) SetInput(i UpdateOrgUnitPositionInput) *OrgUnitPositionUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateOrgUnitPositionInput on the update-one builder.
func (u *OrgUnitPositionUpdateOne) SetInput(i UpdateOrgUnitPositionInput) *OrgUnitPositionUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateOrganizationInput represents a mutation input for creating organizations.
type CreateOrganizationInput struct {
	CreateByUser *int
	UpdateByUser *int
	CreateTime   *time.Time
	UpdateTime   *time.Time
	Name         string
	CreateBy     *int
	UpdateBy     *int
	Units        []int
	Staffs       []int
}

// Mutate applies the CreateOrganizationInput on the OrganizationCreate builder.
func (i *CreateOrganizationInput) Mutate(m *OrganizationCreate) {
	if v := i.CreateByUser; v != nil {
		m.SetCreateByUser(*v)
	}
	if v := i.UpdateByUser; v != nil {
		m.SetUpdateByUser(*v)
	}
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetName(i.Name)
	if v := i.CreateBy; v != nil {
		m.SetCreateByID(*v)
	}
	if v := i.UpdateBy; v != nil {
		m.SetUpdateByID(*v)
	}
	if ids := i.Units; len(ids) > 0 {
		m.AddUnitIDs(ids...)
	}
	if ids := i.Staffs; len(ids) > 0 {
		m.AddStaffIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateOrganizationInput on the create builder.
func (c *OrganizationCreate) SetInput(i CreateOrganizationInput) *OrganizationCreate {
	i.Mutate(c)
	return c
}

// UpdateOrganizationInput represents a mutation input for updating organizations.
type UpdateOrganizationInput struct {
	CreateByUser      *int
	ClearCreateByUser bool
	UpdateByUser      *int
	ClearUpdateByUser bool
	UpdateTime        *time.Time
	ClearUpdateTime   bool
	Name              *string
	CreateBy          *int
	ClearCreateBy     bool
	UpdateBy          *int
	ClearUpdateBy     bool
	AddUnitIDs        []int
	RemoveUnitIDs     []int
	AddStaffIDs       []int
	RemoveStaffIDs    []int
}

// Mutate applies the UpdateOrganizationInput on the OrganizationMutation.
func (i *UpdateOrganizationInput) Mutate(m *OrganizationMutation) {
	if i.ClearCreateByUser {
		m.ClearCreateByUser()
	}
	if v := i.CreateByUser; v != nil {
		m.SetCreateByUser(*v)
	}
	if i.ClearUpdateByUser {
		m.ClearUpdateByUser()
	}
	if v := i.UpdateByUser; v != nil {
		m.SetUpdateByUser(*v)
	}
	if i.ClearUpdateTime {
		m.ClearUpdateTime()
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearCreateBy {
		m.ClearCreateBy()
	}
	if v := i.CreateBy; v != nil {
		m.SetCreateByID(*v)
	}
	if i.ClearUpdateBy {
		m.ClearUpdateBy()
	}
	if v := i.UpdateBy; v != nil {
		m.SetUpdateByID(*v)
	}
	if ids := i.AddUnitIDs; len(ids) > 0 {
		m.AddUnitIDs(ids...)
	}
	if ids := i.RemoveUnitIDs; len(ids) > 0 {
		m.RemoveUnitIDs(ids...)
	}
	if ids := i.AddStaffIDs; len(ids) > 0 {
		m.AddStaffIDs(ids...)
	}
	if ids := i.RemoveStaffIDs; len(ids) > 0 {
		m.RemoveStaffIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateOrganizationInput on the update builder.
func (u *OrganizationUpdate) SetInput(i UpdateOrganizationInput) *OrganizationUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateOrganizationInput on the update-one builder.
func (u *OrganizationUpdateOne) SetInput(i UpdateOrganizationInput) *OrganizationUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateResourceInput represents a mutation input for creating resources.
type CreateResourceInput struct {
	Name string
	Type string
}

// Mutate applies the CreateResourceInput on the ResourceCreate builder.
func (i *CreateResourceInput) Mutate(m *ResourceCreate) {
	m.SetName(i.Name)
	m.SetType(i.Type)
}

// SetInput applies the change-set in the CreateResourceInput on the create builder.
func (c *ResourceCreate) SetInput(i CreateResourceInput) *ResourceCreate {
	i.Mutate(c)
	return c
}

// UpdateResourceInput represents a mutation input for updating resources.
type UpdateResourceInput struct {
	Name *string
	Type *string
}

// Mutate applies the UpdateResourceInput on the ResourceMutation.
func (i *UpdateResourceInput) Mutate(m *ResourceMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Type; v != nil {
		m.SetType(*v)
	}
}

// SetInput applies the change-set in the UpdateResourceInput on the update builder.
func (u *ResourceUpdate) SetInput(i UpdateResourceInput) *ResourceUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateResourceInput on the update-one builder.
func (u *ResourceUpdateOne) SetInput(i UpdateResourceInput) *ResourceUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateSystemInput represents a mutation input for creating systems.
type CreateSystemInput struct {
	CreateByUser *int
	UpdateByUser *int
	CreateTime   *time.Time
	UpdateTime   *time.Time
	Name         string
	CreateBy     *int
	UpdateBy     *int
}

// Mutate applies the CreateSystemInput on the SystemCreate builder.
func (i *CreateSystemInput) Mutate(m *SystemCreate) {
	if v := i.CreateByUser; v != nil {
		m.SetCreateByUser(*v)
	}
	if v := i.UpdateByUser; v != nil {
		m.SetUpdateByUser(*v)
	}
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetName(i.Name)
	if v := i.CreateBy; v != nil {
		m.SetCreateByID(*v)
	}
	if v := i.UpdateBy; v != nil {
		m.SetUpdateByID(*v)
	}
}

// SetInput applies the change-set in the CreateSystemInput on the create builder.
func (c *SystemCreate) SetInput(i CreateSystemInput) *SystemCreate {
	i.Mutate(c)
	return c
}

// UpdateSystemInput represents a mutation input for updating systems.
type UpdateSystemInput struct {
	CreateByUser      *int
	ClearCreateByUser bool
	UpdateByUser      *int
	ClearUpdateByUser bool
	UpdateTime        *time.Time
	ClearUpdateTime   bool
	Name              *string
	CreateBy          *int
	ClearCreateBy     bool
	UpdateBy          *int
	ClearUpdateBy     bool
}

// Mutate applies the UpdateSystemInput on the SystemMutation.
func (i *UpdateSystemInput) Mutate(m *SystemMutation) {
	if i.ClearCreateByUser {
		m.ClearCreateByUser()
	}
	if v := i.CreateByUser; v != nil {
		m.SetCreateByUser(*v)
	}
	if i.ClearUpdateByUser {
		m.ClearUpdateByUser()
	}
	if v := i.UpdateByUser; v != nil {
		m.SetUpdateByUser(*v)
	}
	if i.ClearUpdateTime {
		m.ClearUpdateTime()
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearCreateBy {
		m.ClearCreateBy()
	}
	if v := i.CreateBy; v != nil {
		m.SetCreateByID(*v)
	}
	if i.ClearUpdateBy {
		m.ClearUpdateBy()
	}
	if v := i.UpdateBy; v != nil {
		m.SetUpdateByID(*v)
	}
}

// SetInput applies the change-set in the UpdateSystemInput on the update builder.
func (u *SystemUpdate) SetInput(i UpdateSystemInput) *SystemUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateSystemInput on the update-one builder.
func (u *SystemUpdateOne) SetInput(i UpdateSystemInput) *SystemUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	CreateByUser           *int
	UpdateByUser           *int
	CreateTime             *time.Time
	UpdateTime             *time.Time
	AccountName            string
	StaffType              user.StaffType
	IsOnJob                *bool
	FamilyName             string
	GivenName              string
	DisplayName            string
	Birthday               *time.Time
	IDNumber               *string
	Sex                    *user.Sex
	PhoneNumber            *string
	Address                *string
	StaffID                *string
	PersonalEmail          *string
	IntranetWorkEmail      string
	ExtranetWorkEmail      *string
	CreateBy               *int
	UpdateBy               *int
	AuthHistories          []int
	JobHistories           []int
	Creates                []int
	Updates                []int
	BelongToOrgUnitMembers []int
	BelongToOg             []int
}

// Mutate applies the CreateUserInput on the UserCreate builder.
func (i *CreateUserInput) Mutate(m *UserCreate) {
	if v := i.CreateByUser; v != nil {
		m.SetCreateByUser(*v)
	}
	if v := i.UpdateByUser; v != nil {
		m.SetUpdateByUser(*v)
	}
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetAccountName(i.AccountName)
	m.SetStaffType(i.StaffType)
	if v := i.IsOnJob; v != nil {
		m.SetIsOnJob(*v)
	}
	m.SetFamilyName(i.FamilyName)
	m.SetGivenName(i.GivenName)
	m.SetDisplayName(i.DisplayName)
	if v := i.Birthday; v != nil {
		m.SetBirthday(*v)
	}
	if v := i.IDNumber; v != nil {
		m.SetIDNumber(*v)
	}
	if v := i.Sex; v != nil {
		m.SetSex(*v)
	}
	if v := i.PhoneNumber; v != nil {
		m.SetPhoneNumber(*v)
	}
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if v := i.StaffID; v != nil {
		m.SetStaffID(*v)
	}
	if v := i.PersonalEmail; v != nil {
		m.SetPersonalEmail(*v)
	}
	m.SetIntranetWorkEmail(i.IntranetWorkEmail)
	if v := i.ExtranetWorkEmail; v != nil {
		m.SetExtranetWorkEmail(*v)
	}
	if v := i.CreateBy; v != nil {
		m.SetCreateByID(*v)
	}
	if v := i.UpdateBy; v != nil {
		m.SetUpdateByID(*v)
	}
	if ids := i.AuthHistories; len(ids) > 0 {
		m.AddAuthHistoryIDs(ids...)
	}
	if ids := i.JobHistories; len(ids) > 0 {
		m.AddJobHistoryIDs(ids...)
	}
	if ids := i.Creates; len(ids) > 0 {
		m.AddCreateIDs(ids...)
	}
	if ids := i.Updates; len(ids) > 0 {
		m.AddUpdateIDs(ids...)
	}
	if ids := i.BelongToOrgUnitMembers; len(ids) > 0 {
		m.AddBelongToOrgUnitMemberIDs(ids...)
	}
	if ids := i.BelongToOg; len(ids) > 0 {
		m.AddBelongToOgIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the create builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c)
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	CreateByUser                   *int
	ClearCreateByUser              bool
	UpdateByUser                   *int
	ClearUpdateByUser              bool
	UpdateTime                     *time.Time
	ClearUpdateTime                bool
	AccountName                    *string
	StaffType                      *user.StaffType
	IsOnJob                        *bool
	FamilyName                     *string
	GivenName                      *string
	DisplayName                    *string
	Birthday                       *time.Time
	ClearBirthday                  bool
	IDNumber                       *string
	ClearIDNumber                  bool
	Sex                            *user.Sex
	ClearSex                       bool
	PhoneNumber                    *string
	ClearPhoneNumber               bool
	Address                        *string
	ClearAddress                   bool
	StaffID                        *string
	ClearStaffID                   bool
	PersonalEmail                  *string
	ClearPersonalEmail             bool
	IntranetWorkEmail              *string
	ExtranetWorkEmail              *string
	ClearExtranetWorkEmail         bool
	CreateBy                       *int
	ClearCreateBy                  bool
	UpdateBy                       *int
	ClearUpdateBy                  bool
	AddAuthHistoryIDs              []int
	RemoveAuthHistoryIDs           []int
	AddJobHistoryIDs               []int
	RemoveJobHistoryIDs            []int
	AddCreateIDs                   []int
	RemoveCreateIDs                []int
	AddUpdateIDs                   []int
	RemoveUpdateIDs                []int
	AddBelongToOrgUnitMemberIDs    []int
	RemoveBelongToOrgUnitMemberIDs []int
	AddBelongToOgIDs               []int
	RemoveBelongToOgIDs            []int
}

// Mutate applies the UpdateUserInput on the UserMutation.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if i.ClearCreateByUser {
		m.ClearCreateByUser()
	}
	if v := i.CreateByUser; v != nil {
		m.SetCreateByUser(*v)
	}
	if i.ClearUpdateByUser {
		m.ClearUpdateByUser()
	}
	if v := i.UpdateByUser; v != nil {
		m.SetUpdateByUser(*v)
	}
	if i.ClearUpdateTime {
		m.ClearUpdateTime()
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.AccountName; v != nil {
		m.SetAccountName(*v)
	}
	if v := i.StaffType; v != nil {
		m.SetStaffType(*v)
	}
	if v := i.IsOnJob; v != nil {
		m.SetIsOnJob(*v)
	}
	if v := i.FamilyName; v != nil {
		m.SetFamilyName(*v)
	}
	if v := i.GivenName; v != nil {
		m.SetGivenName(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearBirthday {
		m.ClearBirthday()
	}
	if v := i.Birthday; v != nil {
		m.SetBirthday(*v)
	}
	if i.ClearIDNumber {
		m.ClearIDNumber()
	}
	if v := i.IDNumber; v != nil {
		m.SetIDNumber(*v)
	}
	if i.ClearSex {
		m.ClearSex()
	}
	if v := i.Sex; v != nil {
		m.SetSex(*v)
	}
	if i.ClearPhoneNumber {
		m.ClearPhoneNumber()
	}
	if v := i.PhoneNumber; v != nil {
		m.SetPhoneNumber(*v)
	}
	if i.ClearAddress {
		m.ClearAddress()
	}
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if i.ClearStaffID {
		m.ClearStaffID()
	}
	if v := i.StaffID; v != nil {
		m.SetStaffID(*v)
	}
	if i.ClearPersonalEmail {
		m.ClearPersonalEmail()
	}
	if v := i.PersonalEmail; v != nil {
		m.SetPersonalEmail(*v)
	}
	if v := i.IntranetWorkEmail; v != nil {
		m.SetIntranetWorkEmail(*v)
	}
	if i.ClearExtranetWorkEmail {
		m.ClearExtranetWorkEmail()
	}
	if v := i.ExtranetWorkEmail; v != nil {
		m.SetExtranetWorkEmail(*v)
	}
	if i.ClearCreateBy {
		m.ClearCreateBy()
	}
	if v := i.CreateBy; v != nil {
		m.SetCreateByID(*v)
	}
	if i.ClearUpdateBy {
		m.ClearUpdateBy()
	}
	if v := i.UpdateBy; v != nil {
		m.SetUpdateByID(*v)
	}
	if ids := i.AddAuthHistoryIDs; len(ids) > 0 {
		m.AddAuthHistoryIDs(ids...)
	}
	if ids := i.RemoveAuthHistoryIDs; len(ids) > 0 {
		m.RemoveAuthHistoryIDs(ids...)
	}
	if ids := i.AddJobHistoryIDs; len(ids) > 0 {
		m.AddJobHistoryIDs(ids...)
	}
	if ids := i.RemoveJobHistoryIDs; len(ids) > 0 {
		m.RemoveJobHistoryIDs(ids...)
	}
	if ids := i.AddCreateIDs; len(ids) > 0 {
		m.AddCreateIDs(ids...)
	}
	if ids := i.RemoveCreateIDs; len(ids) > 0 {
		m.RemoveCreateIDs(ids...)
	}
	if ids := i.AddUpdateIDs; len(ids) > 0 {
		m.AddUpdateIDs(ids...)
	}
	if ids := i.RemoveUpdateIDs; len(ids) > 0 {
		m.RemoveUpdateIDs(ids...)
	}
	if ids := i.AddBelongToOrgUnitMemberIDs; len(ids) > 0 {
		m.AddBelongToOrgUnitMemberIDs(ids...)
	}
	if ids := i.RemoveBelongToOrgUnitMemberIDs; len(ids) > 0 {
		m.RemoveBelongToOrgUnitMemberIDs(ids...)
	}
	if ids := i.AddBelongToOgIDs; len(ids) > 0 {
		m.AddBelongToOgIDs(ids...)
	}
	if ids := i.RemoveBelongToOgIDs; len(ids) > 0 {
		m.RemoveBelongToOgIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the update builder.
func (u *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateUserInput on the update-one builder.
func (u *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(u.Mutation())
	return u
}
