// Code generated by entc, DO NOT EDIT.

package user

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateByUser holds the string denoting the create_by_user field in the database.
	FieldCreateByUser = "create_by_user"
	// FieldUpdateByUser holds the string denoting the update_by_user field in the database.
	FieldUpdateByUser = "update_by_user"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldAccountName holds the string denoting the account_name field in the database.
	FieldAccountName = "account_name"
	// FieldStaffType holds the string denoting the staff_type field in the database.
	FieldStaffType = "staff_type"
	// FieldIsOnJob holds the string denoting the is_on_job field in the database.
	FieldIsOnJob = "is_on_job"
	// FieldFamilyName holds the string denoting the family_name field in the database.
	FieldFamilyName = "family_name"
	// FieldGivenName holds the string denoting the given_name field in the database.
	FieldGivenName = "given_name"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldBirthday holds the string denoting the birthday field in the database.
	FieldBirthday = "birthday"
	// FieldIDNumber holds the string denoting the id_number field in the database.
	FieldIDNumber = "id_number"
	// FieldSex holds the string denoting the sex field in the database.
	FieldSex = "sex"
	// FieldPhoneNumber holds the string denoting the phone_number field in the database.
	FieldPhoneNumber = "phone_number"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldStaffID holds the string denoting the staff_id field in the database.
	FieldStaffID = "staff_id"
	// FieldPersonalEmail holds the string denoting the personal_email field in the database.
	FieldPersonalEmail = "personal_email"
	// FieldIntranetWorkEmail holds the string denoting the intranet_work_email field in the database.
	FieldIntranetWorkEmail = "intranet_work_email"
	// FieldExtranetWorkEmail holds the string denoting the extranet_work_email field in the database.
	FieldExtranetWorkEmail = "extranet_work_email"
	// EdgeCreateBy holds the string denoting the create_by edge name in mutations.
	EdgeCreateBy = "create_by"
	// EdgeUpdateBy holds the string denoting the update_by edge name in mutations.
	EdgeUpdateBy = "update_by"
	// EdgeAuthHistories holds the string denoting the authhistories edge name in mutations.
	EdgeAuthHistories = "authHistories"
	// EdgeJobHistories holds the string denoting the jobhistories edge name in mutations.
	EdgeJobHistories = "jobHistories"
	// EdgeCreates holds the string denoting the creates edge name in mutations.
	EdgeCreates = "creates"
	// EdgeUpdates holds the string denoting the updates edge name in mutations.
	EdgeUpdates = "updates"
	// EdgeBelongToOrgUnitMembers holds the string denoting the belongtoorgunitmembers edge name in mutations.
	EdgeBelongToOrgUnitMembers = "belongToOrgUnitMembers"
	// EdgeBelongToOg holds the string denoting the belongtoog edge name in mutations.
	EdgeBelongToOg = "belongToOg"
	// Table holds the table name of the user in the database.
	Table = "users"
	// CreateByTable is the table that holds the create_by relation/edge.
	CreateByTable = "users"
	// CreateByColumn is the table column denoting the create_by relation/edge.
	CreateByColumn = "create_by_user"
	// UpdateByTable is the table that holds the update_by relation/edge.
	UpdateByTable = "users"
	// UpdateByColumn is the table column denoting the update_by relation/edge.
	UpdateByColumn = "update_by_user"
	// AuthHistoriesTable is the table that holds the authHistories relation/edge.
	AuthHistoriesTable = "auths"
	// AuthHistoriesInverseTable is the table name for the Auth entity.
	// It exists in this package in order to avoid circular dependency with the "auth" package.
	AuthHistoriesInverseTable = "auths"
	// AuthHistoriesColumn is the table column denoting the authHistories relation/edge.
	AuthHistoriesColumn = "user_auth_histories"
	// JobHistoriesTable is the table that holds the jobHistories relation/edge.
	JobHistoriesTable = "job_histories"
	// JobHistoriesInverseTable is the table name for the JobHistory entity.
	// It exists in this package in order to avoid circular dependency with the "jobhistory" package.
	JobHistoriesInverseTable = "job_histories"
	// JobHistoriesColumn is the table column denoting the jobHistories relation/edge.
	JobHistoriesColumn = "user_job_histories"
	// CreatesTable is the table that holds the creates relation/edge.
	CreatesTable = "users"
	// CreatesColumn is the table column denoting the creates relation/edge.
	CreatesColumn = "create_by_user"
	// UpdatesTable is the table that holds the updates relation/edge.
	UpdatesTable = "users"
	// UpdatesColumn is the table column denoting the updates relation/edge.
	UpdatesColumn = "update_by_user"
	// BelongToOrgUnitMembersTable is the table that holds the belongToOrgUnitMembers relation/edge.
	BelongToOrgUnitMembersTable = "org_unit_members"
	// BelongToOrgUnitMembersInverseTable is the table name for the OrgUnitMember entity.
	// It exists in this package in order to avoid circular dependency with the "orgunitmember" package.
	BelongToOrgUnitMembersInverseTable = "org_unit_members"
	// BelongToOrgUnitMembersColumn is the table column denoting the belongToOrgUnitMembers relation/edge.
	BelongToOrgUnitMembersColumn = "user_id"
	// BelongToOgTable is the table that holds the belongToOg relation/edge. The primary key declared below.
	BelongToOgTable = "organization_staffs"
	// BelongToOgInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	BelongToOgInverseTable = "organizations"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreateByUser,
	FieldUpdateByUser,
	FieldCreateTime,
	FieldUpdateTime,
	FieldAccountName,
	FieldStaffType,
	FieldIsOnJob,
	FieldFamilyName,
	FieldGivenName,
	FieldDisplayName,
	FieldBirthday,
	FieldIDNumber,
	FieldSex,
	FieldPhoneNumber,
	FieldAddress,
	FieldStaffID,
	FieldPersonalEmail,
	FieldIntranetWorkEmail,
	FieldExtranetWorkEmail,
}

var (
	// BelongToOgPrimaryKey and BelongToOgColumn2 are the table columns denoting the
	// primary key for the belongToOg relation (M2M).
	BelongToOgPrimaryKey = []string{"organization_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "wing/models/ent/runtime"
//
var (
	Hooks [4]ent.Hook
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// AccountNameValidator is a validator for the "account_name" field. It is called by the builders before save.
	AccountNameValidator func(string) error
	// DefaultIsOnJob holds the default value on creation for the "is_on_job" field.
	DefaultIsOnJob bool
	// FamilyNameValidator is a validator for the "family_name" field. It is called by the builders before save.
	FamilyNameValidator func(string) error
	// GivenNameValidator is a validator for the "given_name" field. It is called by the builders before save.
	GivenNameValidator func(string) error
	// DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	DisplayNameValidator func(string) error
	// IDNumberValidator is a validator for the "id_number" field. It is called by the builders before save.
	IDNumberValidator func(string) error
	// PhoneNumberValidator is a validator for the "phone_number" field. It is called by the builders before save.
	PhoneNumberValidator func(string) error
	// AddressValidator is a validator for the "address" field. It is called by the builders before save.
	AddressValidator func(string) error
	// StaffIDValidator is a validator for the "staff_id" field. It is called by the builders before save.
	StaffIDValidator func(string) error
	// PersonalEmailValidator is a validator for the "personal_email" field. It is called by the builders before save.
	PersonalEmailValidator func(string) error
	// IntranetWorkEmailValidator is a validator for the "intranet_work_email" field. It is called by the builders before save.
	IntranetWorkEmailValidator func(string) error
	// ExtranetWorkEmailValidator is a validator for the "extranet_work_email" field. It is called by the builders before save.
	ExtranetWorkEmailValidator func(string) error
)

// StaffType defines the type for the "staff_type" enum field.
type StaffType string

// StaffType values.
const (
	StaffTypeRegular     StaffType = "regular"
	StaffTypeDispatching StaffType = "dispatching"
	StaffTypeIntern      StaffType = "intern"
	StaffTypeExternal    StaffType = "external"
)

func (st StaffType) String() string {
	return string(st)
}

// StaffTypeValidator is a validator for the "staff_type" field enum values. It is called by the builders before save.
func StaffTypeValidator(st StaffType) error {
	switch st {
	case StaffTypeRegular, StaffTypeDispatching, StaffTypeIntern, StaffTypeExternal:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for staff_type field: %q", st)
	}
}

// Sex defines the type for the "sex" enum field.
type Sex string

// Sex values.
const (
	SexMale   Sex = "male"
	SexFemale Sex = "female"
)

func (s Sex) String() string {
	return string(s)
}

// SexValidator is a validator for the "sex" field enum values. It is called by the builders before save.
func SexValidator(s Sex) error {
	switch s {
	case SexMale, SexFemale:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for sex field: %q", s)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (st StaffType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(st.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (st *StaffType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*st = StaffType(str)
	if err := StaffTypeValidator(*st); err != nil {
		return fmt.Errorf("%s is not a valid StaffType", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (s Sex) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(s.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (s *Sex) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*s = Sex(str)
	if err := SexValidator(*s); err != nil {
		return fmt.Errorf("%s is not a valid Sex", str)
	}
	return nil
}
