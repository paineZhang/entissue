// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wing/models/ent/internal"
	"wing/models/ent/jobhistory"
	"wing/models/ent/predicate"
	"wing/models/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JobHistoryUpdate is the builder for updating JobHistory entities.
type JobHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *JobHistoryMutation
}

// Where appends a list predicates to the JobHistoryUpdate builder.
func (jhu *JobHistoryUpdate) Where(ps ...predicate.JobHistory) *JobHistoryUpdate {
	jhu.mutation.Where(ps...)
	return jhu
}

// SetCreateByUser sets the "create_by_user" field.
func (jhu *JobHistoryUpdate) SetCreateByUser(i int) *JobHistoryUpdate {
	jhu.mutation.SetCreateByUser(i)
	return jhu
}

// SetNillableCreateByUser sets the "create_by_user" field if the given value is not nil.
func (jhu *JobHistoryUpdate) SetNillableCreateByUser(i *int) *JobHistoryUpdate {
	if i != nil {
		jhu.SetCreateByUser(*i)
	}
	return jhu
}

// ClearCreateByUser clears the value of the "create_by_user" field.
func (jhu *JobHistoryUpdate) ClearCreateByUser() *JobHistoryUpdate {
	jhu.mutation.ClearCreateByUser()
	return jhu
}

// SetDate sets the "date" field.
func (jhu *JobHistoryUpdate) SetDate(t time.Time) *JobHistoryUpdate {
	jhu.mutation.SetDate(t)
	return jhu
}

// SetJobEntryLeaveType sets the "job_entry_leave_type" field.
func (jhu *JobHistoryUpdate) SetJobEntryLeaveType(jelt jobhistory.JobEntryLeaveType) *JobHistoryUpdate {
	jhu.mutation.SetJobEntryLeaveType(jelt)
	return jhu
}

// SetCreateByID sets the "create_by" edge to the User entity by ID.
func (jhu *JobHistoryUpdate) SetCreateByID(id int) *JobHistoryUpdate {
	jhu.mutation.SetCreateByID(id)
	return jhu
}

// SetNillableCreateByID sets the "create_by" edge to the User entity by ID if the given value is not nil.
func (jhu *JobHistoryUpdate) SetNillableCreateByID(id *int) *JobHistoryUpdate {
	if id != nil {
		jhu = jhu.SetCreateByID(*id)
	}
	return jhu
}

// SetCreateBy sets the "create_by" edge to the User entity.
func (jhu *JobHistoryUpdate) SetCreateBy(u *User) *JobHistoryUpdate {
	return jhu.SetCreateByID(u.ID)
}

// SetBelongToID sets the "belong_to" edge to the User entity by ID.
func (jhu *JobHistoryUpdate) SetBelongToID(id int) *JobHistoryUpdate {
	jhu.mutation.SetBelongToID(id)
	return jhu
}

// SetBelongTo sets the "belong_to" edge to the User entity.
func (jhu *JobHistoryUpdate) SetBelongTo(u *User) *JobHistoryUpdate {
	return jhu.SetBelongToID(u.ID)
}

// Mutation returns the JobHistoryMutation object of the builder.
func (jhu *JobHistoryUpdate) Mutation() *JobHistoryMutation {
	return jhu.mutation
}

// ClearCreateBy clears the "create_by" edge to the User entity.
func (jhu *JobHistoryUpdate) ClearCreateBy() *JobHistoryUpdate {
	jhu.mutation.ClearCreateBy()
	return jhu
}

// ClearBelongTo clears the "belong_to" edge to the User entity.
func (jhu *JobHistoryUpdate) ClearBelongTo() *JobHistoryUpdate {
	jhu.mutation.ClearBelongTo()
	return jhu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (jhu *JobHistoryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(jhu.hooks) == 0 {
		if err = jhu.check(); err != nil {
			return 0, err
		}
		affected, err = jhu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JobHistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = jhu.check(); err != nil {
				return 0, err
			}
			jhu.mutation = mutation
			affected, err = jhu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(jhu.hooks) - 1; i >= 0; i-- {
			if jhu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = jhu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, jhu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (jhu *JobHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := jhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (jhu *JobHistoryUpdate) Exec(ctx context.Context) error {
	_, err := jhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jhu *JobHistoryUpdate) ExecX(ctx context.Context) {
	if err := jhu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jhu *JobHistoryUpdate) check() error {
	if v, ok := jhu.mutation.JobEntryLeaveType(); ok {
		if err := jobhistory.JobEntryLeaveTypeValidator(v); err != nil {
			return &ValidationError{Name: "job_entry_leave_type", err: fmt.Errorf("ent: validator failed for field \"job_entry_leave_type\": %w", err)}
		}
	}
	if _, ok := jhu.mutation.BelongToID(); jhu.mutation.BelongToCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"belong_to\"")
	}
	return nil
}

func (jhu *JobHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   jobhistory.Table,
			Columns: jobhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: jobhistory.FieldID,
			},
		},
	}
	if ps := jhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jhu.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: jobhistory.FieldDate,
		})
	}
	if value, ok := jhu.mutation.JobEntryLeaveType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: jobhistory.FieldJobEntryLeaveType,
		})
	}
	if jhu.mutation.CreateByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   jobhistory.CreateByTable,
			Columns: []string{jobhistory.CreateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = jhu.schemaConfig.JobHistory
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jhu.mutation.CreateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   jobhistory.CreateByTable,
			Columns: []string{jobhistory.CreateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = jhu.schemaConfig.JobHistory
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jhu.mutation.BelongToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobhistory.BelongToTable,
			Columns: []string{jobhistory.BelongToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = jhu.schemaConfig.JobHistory
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jhu.mutation.BelongToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobhistory.BelongToTable,
			Columns: []string{jobhistory.BelongToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = jhu.schemaConfig.JobHistory
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = jhu.schemaConfig.JobHistory
	ctx = internal.NewSchemaConfigContext(ctx, jhu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, jhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// JobHistoryUpdateOne is the builder for updating a single JobHistory entity.
type JobHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JobHistoryMutation
}

// SetCreateByUser sets the "create_by_user" field.
func (jhuo *JobHistoryUpdateOne) SetCreateByUser(i int) *JobHistoryUpdateOne {
	jhuo.mutation.SetCreateByUser(i)
	return jhuo
}

// SetNillableCreateByUser sets the "create_by_user" field if the given value is not nil.
func (jhuo *JobHistoryUpdateOne) SetNillableCreateByUser(i *int) *JobHistoryUpdateOne {
	if i != nil {
		jhuo.SetCreateByUser(*i)
	}
	return jhuo
}

// ClearCreateByUser clears the value of the "create_by_user" field.
func (jhuo *JobHistoryUpdateOne) ClearCreateByUser() *JobHistoryUpdateOne {
	jhuo.mutation.ClearCreateByUser()
	return jhuo
}

// SetDate sets the "date" field.
func (jhuo *JobHistoryUpdateOne) SetDate(t time.Time) *JobHistoryUpdateOne {
	jhuo.mutation.SetDate(t)
	return jhuo
}

// SetJobEntryLeaveType sets the "job_entry_leave_type" field.
func (jhuo *JobHistoryUpdateOne) SetJobEntryLeaveType(jelt jobhistory.JobEntryLeaveType) *JobHistoryUpdateOne {
	jhuo.mutation.SetJobEntryLeaveType(jelt)
	return jhuo
}

// SetCreateByID sets the "create_by" edge to the User entity by ID.
func (jhuo *JobHistoryUpdateOne) SetCreateByID(id int) *JobHistoryUpdateOne {
	jhuo.mutation.SetCreateByID(id)
	return jhuo
}

// SetNillableCreateByID sets the "create_by" edge to the User entity by ID if the given value is not nil.
func (jhuo *JobHistoryUpdateOne) SetNillableCreateByID(id *int) *JobHistoryUpdateOne {
	if id != nil {
		jhuo = jhuo.SetCreateByID(*id)
	}
	return jhuo
}

// SetCreateBy sets the "create_by" edge to the User entity.
func (jhuo *JobHistoryUpdateOne) SetCreateBy(u *User) *JobHistoryUpdateOne {
	return jhuo.SetCreateByID(u.ID)
}

// SetBelongToID sets the "belong_to" edge to the User entity by ID.
func (jhuo *JobHistoryUpdateOne) SetBelongToID(id int) *JobHistoryUpdateOne {
	jhuo.mutation.SetBelongToID(id)
	return jhuo
}

// SetBelongTo sets the "belong_to" edge to the User entity.
func (jhuo *JobHistoryUpdateOne) SetBelongTo(u *User) *JobHistoryUpdateOne {
	return jhuo.SetBelongToID(u.ID)
}

// Mutation returns the JobHistoryMutation object of the builder.
func (jhuo *JobHistoryUpdateOne) Mutation() *JobHistoryMutation {
	return jhuo.mutation
}

// ClearCreateBy clears the "create_by" edge to the User entity.
func (jhuo *JobHistoryUpdateOne) ClearCreateBy() *JobHistoryUpdateOne {
	jhuo.mutation.ClearCreateBy()
	return jhuo
}

// ClearBelongTo clears the "belong_to" edge to the User entity.
func (jhuo *JobHistoryUpdateOne) ClearBelongTo() *JobHistoryUpdateOne {
	jhuo.mutation.ClearBelongTo()
	return jhuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (jhuo *JobHistoryUpdateOne) Select(field string, fields ...string) *JobHistoryUpdateOne {
	jhuo.fields = append([]string{field}, fields...)
	return jhuo
}

// Save executes the query and returns the updated JobHistory entity.
func (jhuo *JobHistoryUpdateOne) Save(ctx context.Context) (*JobHistory, error) {
	var (
		err  error
		node *JobHistory
	)
	if len(jhuo.hooks) == 0 {
		if err = jhuo.check(); err != nil {
			return nil, err
		}
		node, err = jhuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JobHistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = jhuo.check(); err != nil {
				return nil, err
			}
			jhuo.mutation = mutation
			node, err = jhuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(jhuo.hooks) - 1; i >= 0; i-- {
			if jhuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = jhuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, jhuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (jhuo *JobHistoryUpdateOne) SaveX(ctx context.Context) *JobHistory {
	node, err := jhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (jhuo *JobHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := jhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jhuo *JobHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := jhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jhuo *JobHistoryUpdateOne) check() error {
	if v, ok := jhuo.mutation.JobEntryLeaveType(); ok {
		if err := jobhistory.JobEntryLeaveTypeValidator(v); err != nil {
			return &ValidationError{Name: "job_entry_leave_type", err: fmt.Errorf("ent: validator failed for field \"job_entry_leave_type\": %w", err)}
		}
	}
	if _, ok := jhuo.mutation.BelongToID(); jhuo.mutation.BelongToCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"belong_to\"")
	}
	return nil
}

func (jhuo *JobHistoryUpdateOne) sqlSave(ctx context.Context) (_node *JobHistory, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   jobhistory.Table,
			Columns: jobhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: jobhistory.FieldID,
			},
		},
	}
	id, ok := jhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing JobHistory.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := jhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobhistory.FieldID)
		for _, f := range fields {
			if !jobhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != jobhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := jhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jhuo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: jobhistory.FieldDate,
		})
	}
	if value, ok := jhuo.mutation.JobEntryLeaveType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: jobhistory.FieldJobEntryLeaveType,
		})
	}
	if jhuo.mutation.CreateByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   jobhistory.CreateByTable,
			Columns: []string{jobhistory.CreateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = jhuo.schemaConfig.JobHistory
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jhuo.mutation.CreateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   jobhistory.CreateByTable,
			Columns: []string{jobhistory.CreateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = jhuo.schemaConfig.JobHistory
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jhuo.mutation.BelongToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobhistory.BelongToTable,
			Columns: []string{jobhistory.BelongToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = jhuo.schemaConfig.JobHistory
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jhuo.mutation.BelongToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobhistory.BelongToTable,
			Columns: []string{jobhistory.BelongToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = jhuo.schemaConfig.JobHistory
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = jhuo.schemaConfig.JobHistory
	ctx = internal.NewSchemaConfigContext(ctx, jhuo.schemaConfig)
	_node = &JobHistory{config: jhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, jhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
