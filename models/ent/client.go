// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"wing/models/ent/migrate"

	"wing/models/ent/auth"
	"wing/models/ent/jobhistory"
	"wing/models/ent/organization"
	"wing/models/ent/orgunit"
	"wing/models/ent/orgunitmember"
	"wing/models/ent/orgunitposition"
	"wing/models/ent/resource"
	"wing/models/ent/system"
	"wing/models/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Auth is the client for interacting with the Auth builders.
	Auth *AuthClient
	// JobHistory is the client for interacting with the JobHistory builders.
	JobHistory *JobHistoryClient
	// OrgUnit is the client for interacting with the OrgUnit builders.
	OrgUnit *OrgUnitClient
	// OrgUnitMember is the client for interacting with the OrgUnitMember builders.
	OrgUnitMember *OrgUnitMemberClient
	// OrgUnitPosition is the client for interacting with the OrgUnitPosition builders.
	OrgUnitPosition *OrgUnitPositionClient
	// Organization is the client for interacting with the Organization builders.
	Organization *OrganizationClient
	// Resource is the client for interacting with the Resource builders.
	Resource *ResourceClient
	// System is the client for interacting with the System builders.
	System *SystemClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Auth = NewAuthClient(c.config)
	c.JobHistory = NewJobHistoryClient(c.config)
	c.OrgUnit = NewOrgUnitClient(c.config)
	c.OrgUnitMember = NewOrgUnitMemberClient(c.config)
	c.OrgUnitPosition = NewOrgUnitPositionClient(c.config)
	c.Organization = NewOrganizationClient(c.config)
	c.Resource = NewResourceClient(c.config)
	c.System = NewSystemClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Auth:            NewAuthClient(cfg),
		JobHistory:      NewJobHistoryClient(cfg),
		OrgUnit:         NewOrgUnitClient(cfg),
		OrgUnitMember:   NewOrgUnitMemberClient(cfg),
		OrgUnitPosition: NewOrgUnitPositionClient(cfg),
		Organization:    NewOrganizationClient(cfg),
		Resource:        NewResourceClient(cfg),
		System:          NewSystemClient(cfg),
		User:            NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:          cfg,
		Auth:            NewAuthClient(cfg),
		JobHistory:      NewJobHistoryClient(cfg),
		OrgUnit:         NewOrgUnitClient(cfg),
		OrgUnitMember:   NewOrgUnitMemberClient(cfg),
		OrgUnitPosition: NewOrgUnitPositionClient(cfg),
		Organization:    NewOrganizationClient(cfg),
		Resource:        NewResourceClient(cfg),
		System:          NewSystemClient(cfg),
		User:            NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Auth.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Auth.Use(hooks...)
	c.JobHistory.Use(hooks...)
	c.OrgUnit.Use(hooks...)
	c.OrgUnitMember.Use(hooks...)
	c.OrgUnitPosition.Use(hooks...)
	c.Organization.Use(hooks...)
	c.Resource.Use(hooks...)
	c.System.Use(hooks...)
	c.User.Use(hooks...)
}

// AuthClient is a client for the Auth schema.
type AuthClient struct {
	config
}

// NewAuthClient returns a client for the Auth from the given config.
func NewAuthClient(c config) *AuthClient {
	return &AuthClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `auth.Hooks(f(g(h())))`.
func (c *AuthClient) Use(hooks ...Hook) {
	c.hooks.Auth = append(c.hooks.Auth, hooks...)
}

// Create returns a create builder for Auth.
func (c *AuthClient) Create() *AuthCreate {
	mutation := newAuthMutation(c.config, OpCreate)
	return &AuthCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Auth entities.
func (c *AuthClient) CreateBulk(builders ...*AuthCreate) *AuthCreateBulk {
	return &AuthCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Auth.
func (c *AuthClient) Update() *AuthUpdate {
	mutation := newAuthMutation(c.config, OpUpdate)
	return &AuthUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuthClient) UpdateOne(a *Auth) *AuthUpdateOne {
	mutation := newAuthMutation(c.config, OpUpdateOne, withAuth(a))
	return &AuthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuthClient) UpdateOneID(id int) *AuthUpdateOne {
	mutation := newAuthMutation(c.config, OpUpdateOne, withAuthID(id))
	return &AuthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Auth.
func (c *AuthClient) Delete() *AuthDelete {
	mutation := newAuthMutation(c.config, OpDelete)
	return &AuthDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AuthClient) DeleteOne(a *Auth) *AuthDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AuthClient) DeleteOneID(id int) *AuthDeleteOne {
	builder := c.Delete().Where(auth.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuthDeleteOne{builder}
}

// Query returns a query builder for Auth.
func (c *AuthClient) Query() *AuthQuery {
	return &AuthQuery{
		config: c.config,
	}
}

// Get returns a Auth entity by its id.
func (c *AuthClient) Get(ctx context.Context, id int) (*Auth, error) {
	return c.Query().Where(auth.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuthClient) GetX(ctx context.Context, id int) *Auth {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBelongTo queries the belong_to edge of a Auth.
func (c *AuthClient) QueryBelongTo(a *Auth) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(auth.Table, auth.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, auth.BelongToTable, auth.BelongToColumn),
		)
		schemaConfig := a.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.Auth
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AuthClient) Hooks() []Hook {
	return c.hooks.Auth
}

// JobHistoryClient is a client for the JobHistory schema.
type JobHistoryClient struct {
	config
}

// NewJobHistoryClient returns a client for the JobHistory from the given config.
func NewJobHistoryClient(c config) *JobHistoryClient {
	return &JobHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `jobhistory.Hooks(f(g(h())))`.
func (c *JobHistoryClient) Use(hooks ...Hook) {
	c.hooks.JobHistory = append(c.hooks.JobHistory, hooks...)
}

// Create returns a create builder for JobHistory.
func (c *JobHistoryClient) Create() *JobHistoryCreate {
	mutation := newJobHistoryMutation(c.config, OpCreate)
	return &JobHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of JobHistory entities.
func (c *JobHistoryClient) CreateBulk(builders ...*JobHistoryCreate) *JobHistoryCreateBulk {
	return &JobHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for JobHistory.
func (c *JobHistoryClient) Update() *JobHistoryUpdate {
	mutation := newJobHistoryMutation(c.config, OpUpdate)
	return &JobHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobHistoryClient) UpdateOne(jh *JobHistory) *JobHistoryUpdateOne {
	mutation := newJobHistoryMutation(c.config, OpUpdateOne, withJobHistory(jh))
	return &JobHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobHistoryClient) UpdateOneID(id int) *JobHistoryUpdateOne {
	mutation := newJobHistoryMutation(c.config, OpUpdateOne, withJobHistoryID(id))
	return &JobHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for JobHistory.
func (c *JobHistoryClient) Delete() *JobHistoryDelete {
	mutation := newJobHistoryMutation(c.config, OpDelete)
	return &JobHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *JobHistoryClient) DeleteOne(jh *JobHistory) *JobHistoryDeleteOne {
	return c.DeleteOneID(jh.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *JobHistoryClient) DeleteOneID(id int) *JobHistoryDeleteOne {
	builder := c.Delete().Where(jobhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobHistoryDeleteOne{builder}
}

// Query returns a query builder for JobHistory.
func (c *JobHistoryClient) Query() *JobHistoryQuery {
	return &JobHistoryQuery{
		config: c.config,
	}
}

// Get returns a JobHistory entity by its id.
func (c *JobHistoryClient) Get(ctx context.Context, id int) (*JobHistory, error) {
	return c.Query().Where(jobhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobHistoryClient) GetX(ctx context.Context, id int) *JobHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCreateBy queries the create_by edge of a JobHistory.
func (c *JobHistoryClient) QueryCreateBy(jh *JobHistory) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := jh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobhistory.Table, jobhistory.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, jobhistory.CreateByTable, jobhistory.CreateByColumn),
		)
		schemaConfig := jh.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.JobHistory
		fromV = sqlgraph.Neighbors(jh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBelongTo queries the belong_to edge of a JobHistory.
func (c *JobHistoryClient) QueryBelongTo(jh *JobHistory) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := jh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobhistory.Table, jobhistory.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobhistory.BelongToTable, jobhistory.BelongToColumn),
		)
		schemaConfig := jh.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.JobHistory
		fromV = sqlgraph.Neighbors(jh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobHistoryClient) Hooks() []Hook {
	hooks := c.hooks.JobHistory
	return append(hooks[:len(hooks):len(hooks)], jobhistory.Hooks[:]...)
}

// OrgUnitClient is a client for the OrgUnit schema.
type OrgUnitClient struct {
	config
}

// NewOrgUnitClient returns a client for the OrgUnit from the given config.
func NewOrgUnitClient(c config) *OrgUnitClient {
	return &OrgUnitClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orgunit.Hooks(f(g(h())))`.
func (c *OrgUnitClient) Use(hooks ...Hook) {
	c.hooks.OrgUnit = append(c.hooks.OrgUnit, hooks...)
}

// Create returns a create builder for OrgUnit.
func (c *OrgUnitClient) Create() *OrgUnitCreate {
	mutation := newOrgUnitMutation(c.config, OpCreate)
	return &OrgUnitCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrgUnit entities.
func (c *OrgUnitClient) CreateBulk(builders ...*OrgUnitCreate) *OrgUnitCreateBulk {
	return &OrgUnitCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrgUnit.
func (c *OrgUnitClient) Update() *OrgUnitUpdate {
	mutation := newOrgUnitMutation(c.config, OpUpdate)
	return &OrgUnitUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrgUnitClient) UpdateOne(ou *OrgUnit) *OrgUnitUpdateOne {
	mutation := newOrgUnitMutation(c.config, OpUpdateOne, withOrgUnit(ou))
	return &OrgUnitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrgUnitClient) UpdateOneID(id int) *OrgUnitUpdateOne {
	mutation := newOrgUnitMutation(c.config, OpUpdateOne, withOrgUnitID(id))
	return &OrgUnitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrgUnit.
func (c *OrgUnitClient) Delete() *OrgUnitDelete {
	mutation := newOrgUnitMutation(c.config, OpDelete)
	return &OrgUnitDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrgUnitClient) DeleteOne(ou *OrgUnit) *OrgUnitDeleteOne {
	return c.DeleteOneID(ou.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrgUnitClient) DeleteOneID(id int) *OrgUnitDeleteOne {
	builder := c.Delete().Where(orgunit.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrgUnitDeleteOne{builder}
}

// Query returns a query builder for OrgUnit.
func (c *OrgUnitClient) Query() *OrgUnitQuery {
	return &OrgUnitQuery{
		config: c.config,
	}
}

// Get returns a OrgUnit entity by its id.
func (c *OrgUnitClient) Get(ctx context.Context, id int) (*OrgUnit, error) {
	return c.Query().Where(orgunit.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrgUnitClient) GetX(ctx context.Context, id int) *OrgUnit {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCreateBy queries the create_by edge of a OrgUnit.
func (c *OrgUnitClient) QueryCreateBy(ou *OrgUnit) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ou.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orgunit.Table, orgunit.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, orgunit.CreateByTable, orgunit.CreateByColumn),
		)
		schemaConfig := ou.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.OrgUnit
		fromV = sqlgraph.Neighbors(ou.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpdateBy queries the update_by edge of a OrgUnit.
func (c *OrgUnitClient) QueryUpdateBy(ou *OrgUnit) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ou.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orgunit.Table, orgunit.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, orgunit.UpdateByTable, orgunit.UpdateByColumn),
		)
		schemaConfig := ou.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.OrgUnit
		fromV = sqlgraph.Neighbors(ou.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMembers queries the members edge of a OrgUnit.
func (c *OrgUnitClient) QueryMembers(ou *OrgUnit) *OrgUnitMemberQuery {
	query := &OrgUnitMemberQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ou.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orgunit.Table, orgunit.FieldID, id),
			sqlgraph.To(orgunitmember.Table, orgunitmember.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orgunit.MembersTable, orgunit.MembersColumn),
		)
		schemaConfig := ou.schemaConfig
		step.To.Schema = schemaConfig.OrgUnitMember
		step.Edge.Schema = schemaConfig.OrgUnitMember
		fromV = sqlgraph.Neighbors(ou.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPositions queries the positions edge of a OrgUnit.
func (c *OrgUnitClient) QueryPositions(ou *OrgUnit) *OrgUnitPositionQuery {
	query := &OrgUnitPositionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ou.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orgunit.Table, orgunit.FieldID, id),
			sqlgraph.To(orgunitposition.Table, orgunitposition.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orgunit.PositionsTable, orgunit.PositionsColumn),
		)
		schemaConfig := ou.schemaConfig
		step.To.Schema = schemaConfig.OrgUnitPosition
		step.Edge.Schema = schemaConfig.OrgUnitPosition
		fromV = sqlgraph.Neighbors(ou.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySupUnit queries the supUnit edge of a OrgUnit.
func (c *OrgUnitClient) QuerySupUnit(ou *OrgUnit) *OrgUnitQuery {
	query := &OrgUnitQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ou.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orgunit.Table, orgunit.FieldID, id),
			sqlgraph.To(orgunit.Table, orgunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orgunit.SupUnitTable, orgunit.SupUnitColumn),
		)
		schemaConfig := ou.schemaConfig
		step.To.Schema = schemaConfig.OrgUnit
		step.Edge.Schema = schemaConfig.OrgUnit
		fromV = sqlgraph.Neighbors(ou.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubUnits queries the subUnits edge of a OrgUnit.
func (c *OrgUnitClient) QuerySubUnits(ou *OrgUnit) *OrgUnitQuery {
	query := &OrgUnitQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ou.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orgunit.Table, orgunit.FieldID, id),
			sqlgraph.To(orgunit.Table, orgunit.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orgunit.SubUnitsTable, orgunit.SubUnitsColumn),
		)
		schemaConfig := ou.schemaConfig
		step.To.Schema = schemaConfig.OrgUnit
		step.Edge.Schema = schemaConfig.OrgUnit
		fromV = sqlgraph.Neighbors(ou.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBelongToOrg queries the belongToOrg edge of a OrgUnit.
func (c *OrgUnitClient) QueryBelongToOrg(ou *OrgUnit) *OrganizationQuery {
	query := &OrganizationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ou.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orgunit.Table, orgunit.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orgunit.BelongToOrgTable, orgunit.BelongToOrgColumn),
		)
		schemaConfig := ou.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.OrgUnit
		fromV = sqlgraph.Neighbors(ou.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrgUnitClient) Hooks() []Hook {
	hooks := c.hooks.OrgUnit
	return append(hooks[:len(hooks):len(hooks)], orgunit.Hooks[:]...)
}

// OrgUnitMemberClient is a client for the OrgUnitMember schema.
type OrgUnitMemberClient struct {
	config
}

// NewOrgUnitMemberClient returns a client for the OrgUnitMember from the given config.
func NewOrgUnitMemberClient(c config) *OrgUnitMemberClient {
	return &OrgUnitMemberClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orgunitmember.Hooks(f(g(h())))`.
func (c *OrgUnitMemberClient) Use(hooks ...Hook) {
	c.hooks.OrgUnitMember = append(c.hooks.OrgUnitMember, hooks...)
}

// Create returns a create builder for OrgUnitMember.
func (c *OrgUnitMemberClient) Create() *OrgUnitMemberCreate {
	mutation := newOrgUnitMemberMutation(c.config, OpCreate)
	return &OrgUnitMemberCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrgUnitMember entities.
func (c *OrgUnitMemberClient) CreateBulk(builders ...*OrgUnitMemberCreate) *OrgUnitMemberCreateBulk {
	return &OrgUnitMemberCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrgUnitMember.
func (c *OrgUnitMemberClient) Update() *OrgUnitMemberUpdate {
	mutation := newOrgUnitMemberMutation(c.config, OpUpdate)
	return &OrgUnitMemberUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrgUnitMemberClient) UpdateOne(oum *OrgUnitMember) *OrgUnitMemberUpdateOne {
	mutation := newOrgUnitMemberMutation(c.config, OpUpdateOne, withOrgUnitMember(oum))
	return &OrgUnitMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrgUnitMemberClient) UpdateOneID(id int) *OrgUnitMemberUpdateOne {
	mutation := newOrgUnitMemberMutation(c.config, OpUpdateOne, withOrgUnitMemberID(id))
	return &OrgUnitMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrgUnitMember.
func (c *OrgUnitMemberClient) Delete() *OrgUnitMemberDelete {
	mutation := newOrgUnitMemberMutation(c.config, OpDelete)
	return &OrgUnitMemberDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrgUnitMemberClient) DeleteOne(oum *OrgUnitMember) *OrgUnitMemberDeleteOne {
	return c.DeleteOneID(oum.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrgUnitMemberClient) DeleteOneID(id int) *OrgUnitMemberDeleteOne {
	builder := c.Delete().Where(orgunitmember.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrgUnitMemberDeleteOne{builder}
}

// Query returns a query builder for OrgUnitMember.
func (c *OrgUnitMemberClient) Query() *OrgUnitMemberQuery {
	return &OrgUnitMemberQuery{
		config: c.config,
	}
}

// Get returns a OrgUnitMember entity by its id.
func (c *OrgUnitMemberClient) Get(ctx context.Context, id int) (*OrgUnitMember, error) {
	return c.Query().Where(orgunitmember.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrgUnitMemberClient) GetX(ctx context.Context, id int) *OrgUnitMember {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCreateBy queries the create_by edge of a OrgUnitMember.
func (c *OrgUnitMemberClient) QueryCreateBy(oum *OrgUnitMember) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oum.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orgunitmember.Table, orgunitmember.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, orgunitmember.CreateByTable, orgunitmember.CreateByColumn),
		)
		schemaConfig := oum.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.OrgUnitMember
		fromV = sqlgraph.Neighbors(oum.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpdateBy queries the update_by edge of a OrgUnitMember.
func (c *OrgUnitMemberClient) QueryUpdateBy(oum *OrgUnitMember) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oum.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orgunitmember.Table, orgunitmember.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, orgunitmember.UpdateByTable, orgunitmember.UpdateByColumn),
		)
		schemaConfig := oum.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.OrgUnitMember
		fromV = sqlgraph.Neighbors(oum.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a OrgUnitMember.
func (c *OrgUnitMemberClient) QueryUser(oum *OrgUnitMember) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oum.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orgunitmember.Table, orgunitmember.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, orgunitmember.UserTable, orgunitmember.UserColumn),
		)
		schemaConfig := oum.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.OrgUnitMember
		fromV = sqlgraph.Neighbors(oum.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPosition queries the position edge of a OrgUnitMember.
func (c *OrgUnitMemberClient) QueryPosition(oum *OrgUnitMember) *OrgUnitPositionQuery {
	query := &OrgUnitPositionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oum.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orgunitmember.Table, orgunitmember.FieldID, id),
			sqlgraph.To(orgunitposition.Table, orgunitposition.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, orgunitmember.PositionTable, orgunitmember.PositionColumn),
		)
		schemaConfig := oum.schemaConfig
		step.To.Schema = schemaConfig.OrgUnitPosition
		step.Edge.Schema = schemaConfig.OrgUnitMember
		fromV = sqlgraph.Neighbors(oum.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBelongToOrgUnit queries the belongToOrgUnit edge of a OrgUnitMember.
func (c *OrgUnitMemberClient) QueryBelongToOrgUnit(oum *OrgUnitMember) *OrgUnitQuery {
	query := &OrgUnitQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oum.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orgunitmember.Table, orgunitmember.FieldID, id),
			sqlgraph.To(orgunit.Table, orgunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orgunitmember.BelongToOrgUnitTable, orgunitmember.BelongToOrgUnitColumn),
		)
		schemaConfig := oum.schemaConfig
		step.To.Schema = schemaConfig.OrgUnit
		step.Edge.Schema = schemaConfig.OrgUnitMember
		fromV = sqlgraph.Neighbors(oum.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrgUnitMemberClient) Hooks() []Hook {
	hooks := c.hooks.OrgUnitMember
	return append(hooks[:len(hooks):len(hooks)], orgunitmember.Hooks[:]...)
}

// OrgUnitPositionClient is a client for the OrgUnitPosition schema.
type OrgUnitPositionClient struct {
	config
}

// NewOrgUnitPositionClient returns a client for the OrgUnitPosition from the given config.
func NewOrgUnitPositionClient(c config) *OrgUnitPositionClient {
	return &OrgUnitPositionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orgunitposition.Hooks(f(g(h())))`.
func (c *OrgUnitPositionClient) Use(hooks ...Hook) {
	c.hooks.OrgUnitPosition = append(c.hooks.OrgUnitPosition, hooks...)
}

// Create returns a create builder for OrgUnitPosition.
func (c *OrgUnitPositionClient) Create() *OrgUnitPositionCreate {
	mutation := newOrgUnitPositionMutation(c.config, OpCreate)
	return &OrgUnitPositionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrgUnitPosition entities.
func (c *OrgUnitPositionClient) CreateBulk(builders ...*OrgUnitPositionCreate) *OrgUnitPositionCreateBulk {
	return &OrgUnitPositionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrgUnitPosition.
func (c *OrgUnitPositionClient) Update() *OrgUnitPositionUpdate {
	mutation := newOrgUnitPositionMutation(c.config, OpUpdate)
	return &OrgUnitPositionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrgUnitPositionClient) UpdateOne(oup *OrgUnitPosition) *OrgUnitPositionUpdateOne {
	mutation := newOrgUnitPositionMutation(c.config, OpUpdateOne, withOrgUnitPosition(oup))
	return &OrgUnitPositionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrgUnitPositionClient) UpdateOneID(id int) *OrgUnitPositionUpdateOne {
	mutation := newOrgUnitPositionMutation(c.config, OpUpdateOne, withOrgUnitPositionID(id))
	return &OrgUnitPositionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrgUnitPosition.
func (c *OrgUnitPositionClient) Delete() *OrgUnitPositionDelete {
	mutation := newOrgUnitPositionMutation(c.config, OpDelete)
	return &OrgUnitPositionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrgUnitPositionClient) DeleteOne(oup *OrgUnitPosition) *OrgUnitPositionDeleteOne {
	return c.DeleteOneID(oup.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrgUnitPositionClient) DeleteOneID(id int) *OrgUnitPositionDeleteOne {
	builder := c.Delete().Where(orgunitposition.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrgUnitPositionDeleteOne{builder}
}

// Query returns a query builder for OrgUnitPosition.
func (c *OrgUnitPositionClient) Query() *OrgUnitPositionQuery {
	return &OrgUnitPositionQuery{
		config: c.config,
	}
}

// Get returns a OrgUnitPosition entity by its id.
func (c *OrgUnitPositionClient) Get(ctx context.Context, id int) (*OrgUnitPosition, error) {
	return c.Query().Where(orgunitposition.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrgUnitPositionClient) GetX(ctx context.Context, id int) *OrgUnitPosition {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCreateBy queries the create_by edge of a OrgUnitPosition.
func (c *OrgUnitPositionClient) QueryCreateBy(oup *OrgUnitPosition) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oup.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orgunitposition.Table, orgunitposition.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, orgunitposition.CreateByTable, orgunitposition.CreateByColumn),
		)
		schemaConfig := oup.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.OrgUnitPosition
		fromV = sqlgraph.Neighbors(oup.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpdateBy queries the update_by edge of a OrgUnitPosition.
func (c *OrgUnitPositionClient) QueryUpdateBy(oup *OrgUnitPosition) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oup.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orgunitposition.Table, orgunitposition.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, orgunitposition.UpdateByTable, orgunitposition.UpdateByColumn),
		)
		schemaConfig := oup.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.OrgUnitPosition
		fromV = sqlgraph.Neighbors(oup.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBelongToOrgUnitMembers queries the belongToOrgUnitMembers edge of a OrgUnitPosition.
func (c *OrgUnitPositionClient) QueryBelongToOrgUnitMembers(oup *OrgUnitPosition) *OrgUnitMemberQuery {
	query := &OrgUnitMemberQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oup.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orgunitposition.Table, orgunitposition.FieldID, id),
			sqlgraph.To(orgunitmember.Table, orgunitmember.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, orgunitposition.BelongToOrgUnitMembersTable, orgunitposition.BelongToOrgUnitMembersColumn),
		)
		schemaConfig := oup.schemaConfig
		step.To.Schema = schemaConfig.OrgUnitMember
		step.Edge.Schema = schemaConfig.OrgUnitMember
		fromV = sqlgraph.Neighbors(oup.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBelongToOrgUnit queries the belongToOrgUnit edge of a OrgUnitPosition.
func (c *OrgUnitPositionClient) QueryBelongToOrgUnit(oup *OrgUnitPosition) *OrgUnitQuery {
	query := &OrgUnitQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oup.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orgunitposition.Table, orgunitposition.FieldID, id),
			sqlgraph.To(orgunit.Table, orgunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orgunitposition.BelongToOrgUnitTable, orgunitposition.BelongToOrgUnitColumn),
		)
		schemaConfig := oup.schemaConfig
		step.To.Schema = schemaConfig.OrgUnit
		step.Edge.Schema = schemaConfig.OrgUnitPosition
		fromV = sqlgraph.Neighbors(oup.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrgUnitPositionClient) Hooks() []Hook {
	hooks := c.hooks.OrgUnitPosition
	return append(hooks[:len(hooks):len(hooks)], orgunitposition.Hooks[:]...)
}

// OrganizationClient is a client for the Organization schema.
type OrganizationClient struct {
	config
}

// NewOrganizationClient returns a client for the Organization from the given config.
func NewOrganizationClient(c config) *OrganizationClient {
	return &OrganizationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organization.Hooks(f(g(h())))`.
func (c *OrganizationClient) Use(hooks ...Hook) {
	c.hooks.Organization = append(c.hooks.Organization, hooks...)
}

// Create returns a create builder for Organization.
func (c *OrganizationClient) Create() *OrganizationCreate {
	mutation := newOrganizationMutation(c.config, OpCreate)
	return &OrganizationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Organization entities.
func (c *OrganizationClient) CreateBulk(builders ...*OrganizationCreate) *OrganizationCreateBulk {
	return &OrganizationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Organization.
func (c *OrganizationClient) Update() *OrganizationUpdate {
	mutation := newOrganizationMutation(c.config, OpUpdate)
	return &OrganizationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganizationClient) UpdateOne(o *Organization) *OrganizationUpdateOne {
	mutation := newOrganizationMutation(c.config, OpUpdateOne, withOrganization(o))
	return &OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrganizationClient) UpdateOneID(id int) *OrganizationUpdateOne {
	mutation := newOrganizationMutation(c.config, OpUpdateOne, withOrganizationID(id))
	return &OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Organization.
func (c *OrganizationClient) Delete() *OrganizationDelete {
	mutation := newOrganizationMutation(c.config, OpDelete)
	return &OrganizationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrganizationClient) DeleteOne(o *Organization) *OrganizationDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrganizationClient) DeleteOneID(id int) *OrganizationDeleteOne {
	builder := c.Delete().Where(organization.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrganizationDeleteOne{builder}
}

// Query returns a query builder for Organization.
func (c *OrganizationClient) Query() *OrganizationQuery {
	return &OrganizationQuery{
		config: c.config,
	}
}

// Get returns a Organization entity by its id.
func (c *OrganizationClient) Get(ctx context.Context, id int) (*Organization, error) {
	return c.Query().Where(organization.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrganizationClient) GetX(ctx context.Context, id int) *Organization {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCreateBy queries the create_by edge of a Organization.
func (c *OrganizationClient) QueryCreateBy(o *Organization) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, organization.CreateByTable, organization.CreateByColumn),
		)
		schemaConfig := o.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.Organization
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpdateBy queries the update_by edge of a Organization.
func (c *OrganizationClient) QueryUpdateBy(o *Organization) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, organization.UpdateByTable, organization.UpdateByColumn),
		)
		schemaConfig := o.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.Organization
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUnits queries the units edge of a Organization.
func (c *OrganizationClient) QueryUnits(o *Organization) *OrgUnitQuery {
	query := &OrgUnitQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(orgunit.Table, orgunit.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.UnitsTable, organization.UnitsColumn),
		)
		schemaConfig := o.schemaConfig
		step.To.Schema = schemaConfig.OrgUnit
		step.Edge.Schema = schemaConfig.OrgUnit
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStaffs queries the staffs edge of a Organization.
func (c *OrganizationClient) QueryStaffs(o *Organization) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, organization.StaffsTable, organization.StaffsPrimaryKey...),
		)
		schemaConfig := o.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.OrganizationStaffs
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrganizationClient) Hooks() []Hook {
	hooks := c.hooks.Organization
	return append(hooks[:len(hooks):len(hooks)], organization.Hooks[:]...)
}

// ResourceClient is a client for the Resource schema.
type ResourceClient struct {
	config
}

// NewResourceClient returns a client for the Resource from the given config.
func NewResourceClient(c config) *ResourceClient {
	return &ResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `resource.Hooks(f(g(h())))`.
func (c *ResourceClient) Use(hooks ...Hook) {
	c.hooks.Resource = append(c.hooks.Resource, hooks...)
}

// Create returns a create builder for Resource.
func (c *ResourceClient) Create() *ResourceCreate {
	mutation := newResourceMutation(c.config, OpCreate)
	return &ResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Resource entities.
func (c *ResourceClient) CreateBulk(builders ...*ResourceCreate) *ResourceCreateBulk {
	return &ResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Resource.
func (c *ResourceClient) Update() *ResourceUpdate {
	mutation := newResourceMutation(c.config, OpUpdate)
	return &ResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ResourceClient) UpdateOne(r *Resource) *ResourceUpdateOne {
	mutation := newResourceMutation(c.config, OpUpdateOne, withResource(r))
	return &ResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ResourceClient) UpdateOneID(id int) *ResourceUpdateOne {
	mutation := newResourceMutation(c.config, OpUpdateOne, withResourceID(id))
	return &ResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Resource.
func (c *ResourceClient) Delete() *ResourceDelete {
	mutation := newResourceMutation(c.config, OpDelete)
	return &ResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ResourceClient) DeleteOne(r *Resource) *ResourceDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ResourceClient) DeleteOneID(id int) *ResourceDeleteOne {
	builder := c.Delete().Where(resource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ResourceDeleteOne{builder}
}

// Query returns a query builder for Resource.
func (c *ResourceClient) Query() *ResourceQuery {
	return &ResourceQuery{
		config: c.config,
	}
}

// Get returns a Resource entity by its id.
func (c *ResourceClient) Get(ctx context.Context, id int) (*Resource, error) {
	return c.Query().Where(resource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ResourceClient) GetX(ctx context.Context, id int) *Resource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ResourceClient) Hooks() []Hook {
	hooks := c.hooks.Resource
	return append(hooks[:len(hooks):len(hooks)], resource.Hooks[:]...)
}

// SystemClient is a client for the System schema.
type SystemClient struct {
	config
}

// NewSystemClient returns a client for the System from the given config.
func NewSystemClient(c config) *SystemClient {
	return &SystemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `system.Hooks(f(g(h())))`.
func (c *SystemClient) Use(hooks ...Hook) {
	c.hooks.System = append(c.hooks.System, hooks...)
}

// Create returns a create builder for System.
func (c *SystemClient) Create() *SystemCreate {
	mutation := newSystemMutation(c.config, OpCreate)
	return &SystemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of System entities.
func (c *SystemClient) CreateBulk(builders ...*SystemCreate) *SystemCreateBulk {
	return &SystemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for System.
func (c *SystemClient) Update() *SystemUpdate {
	mutation := newSystemMutation(c.config, OpUpdate)
	return &SystemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SystemClient) UpdateOne(s *System) *SystemUpdateOne {
	mutation := newSystemMutation(c.config, OpUpdateOne, withSystem(s))
	return &SystemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SystemClient) UpdateOneID(id int) *SystemUpdateOne {
	mutation := newSystemMutation(c.config, OpUpdateOne, withSystemID(id))
	return &SystemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for System.
func (c *SystemClient) Delete() *SystemDelete {
	mutation := newSystemMutation(c.config, OpDelete)
	return &SystemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SystemClient) DeleteOne(s *System) *SystemDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SystemClient) DeleteOneID(id int) *SystemDeleteOne {
	builder := c.Delete().Where(system.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SystemDeleteOne{builder}
}

// Query returns a query builder for System.
func (c *SystemClient) Query() *SystemQuery {
	return &SystemQuery{
		config: c.config,
	}
}

// Get returns a System entity by its id.
func (c *SystemClient) Get(ctx context.Context, id int) (*System, error) {
	return c.Query().Where(system.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SystemClient) GetX(ctx context.Context, id int) *System {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCreateBy queries the create_by edge of a System.
func (c *SystemClient) QueryCreateBy(s *System) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(system.Table, system.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, system.CreateByTable, system.CreateByColumn),
		)
		schemaConfig := s.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.System
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpdateBy queries the update_by edge of a System.
func (c *SystemClient) QueryUpdateBy(s *System) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(system.Table, system.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, system.UpdateByTable, system.UpdateByColumn),
		)
		schemaConfig := s.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.System
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SystemClient) Hooks() []Hook {
	hooks := c.hooks.System
	return append(hooks[:len(hooks):len(hooks)], system.Hooks[:]...)
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCreateBy queries the create_by edge of a User.
func (c *UserClient) QueryCreateBy(u *User) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, user.CreateByTable, user.CreateByColumn),
		)
		schemaConfig := u.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.User
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpdateBy queries the update_by edge of a User.
func (c *UserClient) QueryUpdateBy(u *User) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, user.UpdateByTable, user.UpdateByColumn),
		)
		schemaConfig := u.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.User
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAuthHistories queries the authHistories edge of a User.
func (c *UserClient) QueryAuthHistories(u *User) *AuthQuery {
	query := &AuthQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(auth.Table, auth.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AuthHistoriesTable, user.AuthHistoriesColumn),
		)
		schemaConfig := u.schemaConfig
		step.To.Schema = schemaConfig.Auth
		step.Edge.Schema = schemaConfig.Auth
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJobHistories queries the jobHistories edge of a User.
func (c *UserClient) QueryJobHistories(u *User) *JobHistoryQuery {
	query := &JobHistoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(jobhistory.Table, jobhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.JobHistoriesTable, user.JobHistoriesColumn),
		)
		schemaConfig := u.schemaConfig
		step.To.Schema = schemaConfig.JobHistory
		step.Edge.Schema = schemaConfig.JobHistory
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreates queries the creates edge of a User.
func (c *UserClient) QueryCreates(u *User) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.CreatesTable, user.CreatesColumn),
		)
		schemaConfig := u.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.User
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpdates queries the updates edge of a User.
func (c *UserClient) QueryUpdates(u *User) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.UpdatesTable, user.UpdatesColumn),
		)
		schemaConfig := u.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.User
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBelongToOrgUnitMembers queries the belongToOrgUnitMembers edge of a User.
func (c *UserClient) QueryBelongToOrgUnitMembers(u *User) *OrgUnitMemberQuery {
	query := &OrgUnitMemberQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(orgunitmember.Table, orgunitmember.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.BelongToOrgUnitMembersTable, user.BelongToOrgUnitMembersColumn),
		)
		schemaConfig := u.schemaConfig
		step.To.Schema = schemaConfig.OrgUnitMember
		step.Edge.Schema = schemaConfig.OrgUnitMember
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBelongToOg queries the belongToOg edge of a User.
func (c *UserClient) QueryBelongToOg(u *User) *OrganizationQuery {
	query := &OrganizationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.BelongToOgTable, user.BelongToOgPrimaryKey...),
		)
		schemaConfig := u.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.OrganizationStaffs
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	hooks := c.hooks.User
	return append(hooks[:len(hooks):len(hooks)], user.Hooks[:]...)
}
