// Code generated by entc, DO NOT EDIT.

package ent

import (
	"wing/models/ent/auth"
	"wing/models/ent/jobhistory"
	"wing/models/ent/organization"
	"wing/models/ent/orgunit"
	"wing/models/ent/orgunitmember"
	"wing/models/ent/orgunitposition"
	"wing/models/ent/predicate"
	"wing/models/ent/resource"
	"wing/models/ent/system"
	"wing/models/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 9)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   auth.Table,
			Columns: auth.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: auth.FieldID,
			},
		},
		Type: "Auth",
		Fields: map[string]*sqlgraph.FieldSpec{
			auth.FieldLastAuthTime: {Type: field.TypeTime, Column: auth.FieldLastAuthTime},
			auth.FieldAuthType:     {Type: field.TypeEnum, Column: auth.FieldAuthType},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   jobhistory.Table,
			Columns: jobhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: jobhistory.FieldID,
			},
		},
		Type: "JobHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			jobhistory.FieldCreateByUser:      {Type: field.TypeInt, Column: jobhistory.FieldCreateByUser},
			jobhistory.FieldCreateTime:        {Type: field.TypeTime, Column: jobhistory.FieldCreateTime},
			jobhistory.FieldDate:              {Type: field.TypeTime, Column: jobhistory.FieldDate},
			jobhistory.FieldJobEntryLeaveType: {Type: field.TypeEnum, Column: jobhistory.FieldJobEntryLeaveType},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   orgunit.Table,
			Columns: orgunit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orgunit.FieldID,
			},
		},
		Type: "OrgUnit",
		Fields: map[string]*sqlgraph.FieldSpec{
			orgunit.FieldCreateByUser: {Type: field.TypeInt, Column: orgunit.FieldCreateByUser},
			orgunit.FieldUpdateByUser: {Type: field.TypeInt, Column: orgunit.FieldUpdateByUser},
			orgunit.FieldCreateTime:   {Type: field.TypeTime, Column: orgunit.FieldCreateTime},
			orgunit.FieldUpdateTime:   {Type: field.TypeTime, Column: orgunit.FieldUpdateTime},
			orgunit.FieldName:         {Type: field.TypeString, Column: orgunit.FieldName},
			orgunit.FieldDuty:         {Type: field.TypeString, Column: orgunit.FieldDuty},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   orgunitmember.Table,
			Columns: orgunitmember.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orgunitmember.FieldID,
			},
		},
		Type: "OrgUnitMember",
		Fields: map[string]*sqlgraph.FieldSpec{
			orgunitmember.FieldCreateByUser:      {Type: field.TypeInt, Column: orgunitmember.FieldCreateByUser},
			orgunitmember.FieldUpdateByUser:      {Type: field.TypeInt, Column: orgunitmember.FieldUpdateByUser},
			orgunitmember.FieldCreateTime:        {Type: field.TypeTime, Column: orgunitmember.FieldCreateTime},
			orgunitmember.FieldUpdateTime:        {Type: field.TypeTime, Column: orgunitmember.FieldUpdateTime},
			orgunitmember.FieldIsAdditional:      {Type: field.TypeBool, Column: orgunitmember.FieldIsAdditional},
			orgunitmember.FieldUserID:            {Type: field.TypeInt, Column: orgunitmember.FieldUserID},
			orgunitmember.FieldOrgUnitID:         {Type: field.TypeInt, Column: orgunitmember.FieldOrgUnitID},
			orgunitmember.FieldOrgUnitPositionID: {Type: field.TypeInt, Column: orgunitmember.FieldOrgUnitPositionID},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   orgunitposition.Table,
			Columns: orgunitposition.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orgunitposition.FieldID,
			},
		},
		Type: "OrgUnitPosition",
		Fields: map[string]*sqlgraph.FieldSpec{
			orgunitposition.FieldCreateByUser: {Type: field.TypeInt, Column: orgunitposition.FieldCreateByUser},
			orgunitposition.FieldUpdateByUser: {Type: field.TypeInt, Column: orgunitposition.FieldUpdateByUser},
			orgunitposition.FieldCreateTime:   {Type: field.TypeTime, Column: orgunitposition.FieldCreateTime},
			orgunitposition.FieldUpdateTime:   {Type: field.TypeTime, Column: orgunitposition.FieldUpdateTime},
			orgunitposition.FieldName:         {Type: field.TypeString, Column: orgunitposition.FieldName},
			orgunitposition.FieldDuty:         {Type: field.TypeString, Column: orgunitposition.FieldDuty},
			orgunitposition.FieldLevel:        {Type: field.TypeInt, Column: orgunitposition.FieldLevel},
			orgunitposition.FieldOrgUnitID:    {Type: field.TypeInt, Column: orgunitposition.FieldOrgUnitID},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   organization.Table,
			Columns: organization.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: organization.FieldID,
			},
		},
		Type: "Organization",
		Fields: map[string]*sqlgraph.FieldSpec{
			organization.FieldCreateByUser: {Type: field.TypeInt, Column: organization.FieldCreateByUser},
			organization.FieldUpdateByUser: {Type: field.TypeInt, Column: organization.FieldUpdateByUser},
			organization.FieldCreateTime:   {Type: field.TypeTime, Column: organization.FieldCreateTime},
			organization.FieldUpdateTime:   {Type: field.TypeTime, Column: organization.FieldUpdateTime},
			organization.FieldName:         {Type: field.TypeString, Column: organization.FieldName},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   resource.Table,
			Columns: resource.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resource.FieldID,
			},
		},
		Type: "Resource",
		Fields: map[string]*sqlgraph.FieldSpec{
			resource.FieldName: {Type: field.TypeString, Column: resource.FieldName},
			resource.FieldType: {Type: field.TypeString, Column: resource.FieldType},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   system.Table,
			Columns: system.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: system.FieldID,
			},
		},
		Type: "System",
		Fields: map[string]*sqlgraph.FieldSpec{
			system.FieldCreateByUser: {Type: field.TypeInt, Column: system.FieldCreateByUser},
			system.FieldUpdateByUser: {Type: field.TypeInt, Column: system.FieldUpdateByUser},
			system.FieldCreateTime:   {Type: field.TypeTime, Column: system.FieldCreateTime},
			system.FieldUpdateTime:   {Type: field.TypeTime, Column: system.FieldUpdateTime},
			system.FieldName:         {Type: field.TypeString, Column: system.FieldName},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldCreateByUser:      {Type: field.TypeInt, Column: user.FieldCreateByUser},
			user.FieldUpdateByUser:      {Type: field.TypeInt, Column: user.FieldUpdateByUser},
			user.FieldCreateTime:        {Type: field.TypeTime, Column: user.FieldCreateTime},
			user.FieldUpdateTime:        {Type: field.TypeTime, Column: user.FieldUpdateTime},
			user.FieldAccountName:       {Type: field.TypeString, Column: user.FieldAccountName},
			user.FieldStaffType:         {Type: field.TypeEnum, Column: user.FieldStaffType},
			user.FieldIsOnJob:           {Type: field.TypeBool, Column: user.FieldIsOnJob},
			user.FieldFamilyName:        {Type: field.TypeString, Column: user.FieldFamilyName},
			user.FieldGivenName:         {Type: field.TypeString, Column: user.FieldGivenName},
			user.FieldDisplayName:       {Type: field.TypeString, Column: user.FieldDisplayName},
			user.FieldBirthday:          {Type: field.TypeTime, Column: user.FieldBirthday},
			user.FieldIDNumber:          {Type: field.TypeString, Column: user.FieldIDNumber},
			user.FieldSex:               {Type: field.TypeEnum, Column: user.FieldSex},
			user.FieldPhoneNumber:       {Type: field.TypeString, Column: user.FieldPhoneNumber},
			user.FieldAddress:           {Type: field.TypeString, Column: user.FieldAddress},
			user.FieldStaffID:           {Type: field.TypeString, Column: user.FieldStaffID},
			user.FieldPersonalEmail:     {Type: field.TypeString, Column: user.FieldPersonalEmail},
			user.FieldIntranetWorkEmail: {Type: field.TypeString, Column: user.FieldIntranetWorkEmail},
			user.FieldExtranetWorkEmail: {Type: field.TypeString, Column: user.FieldExtranetWorkEmail},
		},
	}
	graph.MustAddE(
		"belong_to",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   auth.BelongToTable,
			Columns: []string{auth.BelongToColumn},
			Bidi:    false,
		},
		"Auth",
		"User",
	)
	graph.MustAddE(
		"create_by",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   jobhistory.CreateByTable,
			Columns: []string{jobhistory.CreateByColumn},
			Bidi:    false,
		},
		"JobHistory",
		"User",
	)
	graph.MustAddE(
		"belong_to",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobhistory.BelongToTable,
			Columns: []string{jobhistory.BelongToColumn},
			Bidi:    false,
		},
		"JobHistory",
		"User",
	)
	graph.MustAddE(
		"create_by",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunit.CreateByTable,
			Columns: []string{orgunit.CreateByColumn},
			Bidi:    false,
		},
		"OrgUnit",
		"User",
	)
	graph.MustAddE(
		"update_by",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunit.UpdateByTable,
			Columns: []string{orgunit.UpdateByColumn},
			Bidi:    false,
		},
		"OrgUnit",
		"User",
	)
	graph.MustAddE(
		"members",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgunit.MembersTable,
			Columns: []string{orgunit.MembersColumn},
			Bidi:    false,
		},
		"OrgUnit",
		"OrgUnitMember",
	)
	graph.MustAddE(
		"positions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgunit.PositionsTable,
			Columns: []string{orgunit.PositionsColumn},
			Bidi:    false,
		},
		"OrgUnit",
		"OrgUnitPosition",
	)
	graph.MustAddE(
		"supUnit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgunit.SupUnitTable,
			Columns: []string{orgunit.SupUnitColumn},
			Bidi:    false,
		},
		"OrgUnit",
		"OrgUnit",
	)
	graph.MustAddE(
		"subUnits",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgunit.SubUnitsTable,
			Columns: []string{orgunit.SubUnitsColumn},
			Bidi:    false,
		},
		"OrgUnit",
		"OrgUnit",
	)
	graph.MustAddE(
		"belongToOrg",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgunit.BelongToOrgTable,
			Columns: []string{orgunit.BelongToOrgColumn},
			Bidi:    false,
		},
		"OrgUnit",
		"Organization",
	)
	graph.MustAddE(
		"create_by",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitmember.CreateByTable,
			Columns: []string{orgunitmember.CreateByColumn},
			Bidi:    false,
		},
		"OrgUnitMember",
		"User",
	)
	graph.MustAddE(
		"update_by",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitmember.UpdateByTable,
			Columns: []string{orgunitmember.UpdateByColumn},
			Bidi:    false,
		},
		"OrgUnitMember",
		"User",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitmember.UserTable,
			Columns: []string{orgunitmember.UserColumn},
			Bidi:    false,
		},
		"OrgUnitMember",
		"User",
	)
	graph.MustAddE(
		"position",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitmember.PositionTable,
			Columns: []string{orgunitmember.PositionColumn},
			Bidi:    false,
		},
		"OrgUnitMember",
		"OrgUnitPosition",
	)
	graph.MustAddE(
		"belongToOrgUnit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgunitmember.BelongToOrgUnitTable,
			Columns: []string{orgunitmember.BelongToOrgUnitColumn},
			Bidi:    false,
		},
		"OrgUnitMember",
		"OrgUnit",
	)
	graph.MustAddE(
		"create_by",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitposition.CreateByTable,
			Columns: []string{orgunitposition.CreateByColumn},
			Bidi:    false,
		},
		"OrgUnitPosition",
		"User",
	)
	graph.MustAddE(
		"update_by",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitposition.UpdateByTable,
			Columns: []string{orgunitposition.UpdateByColumn},
			Bidi:    false,
		},
		"OrgUnitPosition",
		"User",
	)
	graph.MustAddE(
		"belongToOrgUnitMembers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   orgunitposition.BelongToOrgUnitMembersTable,
			Columns: []string{orgunitposition.BelongToOrgUnitMembersColumn},
			Bidi:    false,
		},
		"OrgUnitPosition",
		"OrgUnitMember",
	)
	graph.MustAddE(
		"belongToOrgUnit",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgunitposition.BelongToOrgUnitTable,
			Columns: []string{orgunitposition.BelongToOrgUnitColumn},
			Bidi:    false,
		},
		"OrgUnitPosition",
		"OrgUnit",
	)
	graph.MustAddE(
		"create_by",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organization.CreateByTable,
			Columns: []string{organization.CreateByColumn},
			Bidi:    false,
		},
		"Organization",
		"User",
	)
	graph.MustAddE(
		"update_by",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organization.UpdateByTable,
			Columns: []string{organization.UpdateByColumn},
			Bidi:    false,
		},
		"Organization",
		"User",
	)
	graph.MustAddE(
		"units",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.UnitsTable,
			Columns: []string{organization.UnitsColumn},
			Bidi:    false,
		},
		"Organization",
		"OrgUnit",
	)
	graph.MustAddE(
		"staffs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.StaffsTable,
			Columns: organization.StaffsPrimaryKey,
			Bidi:    false,
		},
		"Organization",
		"User",
	)
	graph.MustAddE(
		"create_by",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   system.CreateByTable,
			Columns: []string{system.CreateByColumn},
			Bidi:    false,
		},
		"System",
		"User",
	)
	graph.MustAddE(
		"update_by",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   system.UpdateByTable,
			Columns: []string{system.UpdateByColumn},
			Bidi:    false,
		},
		"System",
		"User",
	)
	graph.MustAddE(
		"create_by",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.CreateByTable,
			Columns: []string{user.CreateByColumn},
			Bidi:    true,
		},
		"User",
		"User",
	)
	graph.MustAddE(
		"update_by",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.UpdateByTable,
			Columns: []string{user.UpdateByColumn},
			Bidi:    true,
		},
		"User",
		"User",
	)
	graph.MustAddE(
		"authHistories",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuthHistoriesTable,
			Columns: []string{user.AuthHistoriesColumn},
			Bidi:    false,
		},
		"User",
		"Auth",
	)
	graph.MustAddE(
		"jobHistories",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobHistoriesTable,
			Columns: []string{user.JobHistoriesColumn},
			Bidi:    false,
		},
		"User",
		"JobHistory",
	)
	graph.MustAddE(
		"creates",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.CreatesTable,
			Columns: []string{user.CreatesColumn},
			Bidi:    false,
		},
		"User",
		"User",
	)
	graph.MustAddE(
		"updates",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UpdatesTable,
			Columns: []string{user.UpdatesColumn},
			Bidi:    false,
		},
		"User",
		"User",
	)
	graph.MustAddE(
		"belongToOrgUnitMembers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.BelongToOrgUnitMembersTable,
			Columns: []string{user.BelongToOrgUnitMembersColumn},
			Bidi:    false,
		},
		"User",
		"OrgUnitMember",
	)
	graph.MustAddE(
		"belongToOg",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.BelongToOgTable,
			Columns: user.BelongToOgPrimaryKey,
			Bidi:    false,
		},
		"User",
		"Organization",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (aq *AuthQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AuthQuery builder.
func (aq *AuthQuery) Filter() *AuthFilter {
	return &AuthFilter{aq}
}

// addPredicate implements the predicateAdder interface.
func (m *AuthMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AuthMutation builder.
func (m *AuthMutation) Filter() *AuthFilter {
	return &AuthFilter{m}
}

// AuthFilter provides a generic filtering capability at runtime for AuthQuery.
type AuthFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *AuthFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *AuthFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(auth.FieldID))
}

// WhereLastAuthTime applies the entql time.Time predicate on the last_auth_time field.
func (f *AuthFilter) WhereLastAuthTime(p entql.TimeP) {
	f.Where(p.Field(auth.FieldLastAuthTime))
}

// WhereAuthType applies the entql string predicate on the auth_type field.
func (f *AuthFilter) WhereAuthType(p entql.StringP) {
	f.Where(p.Field(auth.FieldAuthType))
}

// WhereHasBelongTo applies a predicate to check if query has an edge belong_to.
func (f *AuthFilter) WhereHasBelongTo() {
	f.Where(entql.HasEdge("belong_to"))
}

// WhereHasBelongToWith applies a predicate to check if query has an edge belong_to with a given conditions (other predicates).
func (f *AuthFilter) WhereHasBelongToWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("belong_to", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (jhq *JobHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	jhq.predicates = append(jhq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the JobHistoryQuery builder.
func (jhq *JobHistoryQuery) Filter() *JobHistoryFilter {
	return &JobHistoryFilter{jhq}
}

// addPredicate implements the predicateAdder interface.
func (m *JobHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the JobHistoryMutation builder.
func (m *JobHistoryMutation) Filter() *JobHistoryFilter {
	return &JobHistoryFilter{m}
}

// JobHistoryFilter provides a generic filtering capability at runtime for JobHistoryQuery.
type JobHistoryFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *JobHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *JobHistoryFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(jobhistory.FieldID))
}

// WhereCreateByUser applies the entql int predicate on the create_by_user field.
func (f *JobHistoryFilter) WhereCreateByUser(p entql.IntP) {
	f.Where(p.Field(jobhistory.FieldCreateByUser))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *JobHistoryFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(jobhistory.FieldCreateTime))
}

// WhereDate applies the entql time.Time predicate on the date field.
func (f *JobHistoryFilter) WhereDate(p entql.TimeP) {
	f.Where(p.Field(jobhistory.FieldDate))
}

// WhereJobEntryLeaveType applies the entql string predicate on the job_entry_leave_type field.
func (f *JobHistoryFilter) WhereJobEntryLeaveType(p entql.StringP) {
	f.Where(p.Field(jobhistory.FieldJobEntryLeaveType))
}

// WhereHasCreateBy applies a predicate to check if query has an edge create_by.
func (f *JobHistoryFilter) WhereHasCreateBy() {
	f.Where(entql.HasEdge("create_by"))
}

// WhereHasCreateByWith applies a predicate to check if query has an edge create_by with a given conditions (other predicates).
func (f *JobHistoryFilter) WhereHasCreateByWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("create_by", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBelongTo applies a predicate to check if query has an edge belong_to.
func (f *JobHistoryFilter) WhereHasBelongTo() {
	f.Where(entql.HasEdge("belong_to"))
}

// WhereHasBelongToWith applies a predicate to check if query has an edge belong_to with a given conditions (other predicates).
func (f *JobHistoryFilter) WhereHasBelongToWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("belong_to", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ouq *OrgUnitQuery) addPredicate(pred func(s *sql.Selector)) {
	ouq.predicates = append(ouq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrgUnitQuery builder.
func (ouq *OrgUnitQuery) Filter() *OrgUnitFilter {
	return &OrgUnitFilter{ouq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrgUnitMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrgUnitMutation builder.
func (m *OrgUnitMutation) Filter() *OrgUnitFilter {
	return &OrgUnitFilter{m}
}

// OrgUnitFilter provides a generic filtering capability at runtime for OrgUnitQuery.
type OrgUnitFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *OrgUnitFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *OrgUnitFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(orgunit.FieldID))
}

// WhereCreateByUser applies the entql int predicate on the create_by_user field.
func (f *OrgUnitFilter) WhereCreateByUser(p entql.IntP) {
	f.Where(p.Field(orgunit.FieldCreateByUser))
}

// WhereUpdateByUser applies the entql int predicate on the update_by_user field.
func (f *OrgUnitFilter) WhereUpdateByUser(p entql.IntP) {
	f.Where(p.Field(orgunit.FieldUpdateByUser))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *OrgUnitFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(orgunit.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *OrgUnitFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(orgunit.FieldUpdateTime))
}

// WhereName applies the entql string predicate on the name field.
func (f *OrgUnitFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(orgunit.FieldName))
}

// WhereDuty applies the entql string predicate on the duty field.
func (f *OrgUnitFilter) WhereDuty(p entql.StringP) {
	f.Where(p.Field(orgunit.FieldDuty))
}

// WhereHasCreateBy applies a predicate to check if query has an edge create_by.
func (f *OrgUnitFilter) WhereHasCreateBy() {
	f.Where(entql.HasEdge("create_by"))
}

// WhereHasCreateByWith applies a predicate to check if query has an edge create_by with a given conditions (other predicates).
func (f *OrgUnitFilter) WhereHasCreateByWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("create_by", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdateBy applies a predicate to check if query has an edge update_by.
func (f *OrgUnitFilter) WhereHasUpdateBy() {
	f.Where(entql.HasEdge("update_by"))
}

// WhereHasUpdateByWith applies a predicate to check if query has an edge update_by with a given conditions (other predicates).
func (f *OrgUnitFilter) WhereHasUpdateByWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("update_by", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMembers applies a predicate to check if query has an edge members.
func (f *OrgUnitFilter) WhereHasMembers() {
	f.Where(entql.HasEdge("members"))
}

// WhereHasMembersWith applies a predicate to check if query has an edge members with a given conditions (other predicates).
func (f *OrgUnitFilter) WhereHasMembersWith(preds ...predicate.OrgUnitMember) {
	f.Where(entql.HasEdgeWith("members", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPositions applies a predicate to check if query has an edge positions.
func (f *OrgUnitFilter) WhereHasPositions() {
	f.Where(entql.HasEdge("positions"))
}

// WhereHasPositionsWith applies a predicate to check if query has an edge positions with a given conditions (other predicates).
func (f *OrgUnitFilter) WhereHasPositionsWith(preds ...predicate.OrgUnitPosition) {
	f.Where(entql.HasEdgeWith("positions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSupUnit applies a predicate to check if query has an edge supUnit.
func (f *OrgUnitFilter) WhereHasSupUnit() {
	f.Where(entql.HasEdge("supUnit"))
}

// WhereHasSupUnitWith applies a predicate to check if query has an edge supUnit with a given conditions (other predicates).
func (f *OrgUnitFilter) WhereHasSupUnitWith(preds ...predicate.OrgUnit) {
	f.Where(entql.HasEdgeWith("supUnit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubUnits applies a predicate to check if query has an edge subUnits.
func (f *OrgUnitFilter) WhereHasSubUnits() {
	f.Where(entql.HasEdge("subUnits"))
}

// WhereHasSubUnitsWith applies a predicate to check if query has an edge subUnits with a given conditions (other predicates).
func (f *OrgUnitFilter) WhereHasSubUnitsWith(preds ...predicate.OrgUnit) {
	f.Where(entql.HasEdgeWith("subUnits", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBelongToOrg applies a predicate to check if query has an edge belongToOrg.
func (f *OrgUnitFilter) WhereHasBelongToOrg() {
	f.Where(entql.HasEdge("belongToOrg"))
}

// WhereHasBelongToOrgWith applies a predicate to check if query has an edge belongToOrg with a given conditions (other predicates).
func (f *OrgUnitFilter) WhereHasBelongToOrgWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("belongToOrg", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (oumq *OrgUnitMemberQuery) addPredicate(pred func(s *sql.Selector)) {
	oumq.predicates = append(oumq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrgUnitMemberQuery builder.
func (oumq *OrgUnitMemberQuery) Filter() *OrgUnitMemberFilter {
	return &OrgUnitMemberFilter{oumq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrgUnitMemberMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrgUnitMemberMutation builder.
func (m *OrgUnitMemberMutation) Filter() *OrgUnitMemberFilter {
	return &OrgUnitMemberFilter{m}
}

// OrgUnitMemberFilter provides a generic filtering capability at runtime for OrgUnitMemberQuery.
type OrgUnitMemberFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *OrgUnitMemberFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *OrgUnitMemberFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(orgunitmember.FieldID))
}

// WhereCreateByUser applies the entql int predicate on the create_by_user field.
func (f *OrgUnitMemberFilter) WhereCreateByUser(p entql.IntP) {
	f.Where(p.Field(orgunitmember.FieldCreateByUser))
}

// WhereUpdateByUser applies the entql int predicate on the update_by_user field.
func (f *OrgUnitMemberFilter) WhereUpdateByUser(p entql.IntP) {
	f.Where(p.Field(orgunitmember.FieldUpdateByUser))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *OrgUnitMemberFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(orgunitmember.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *OrgUnitMemberFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(orgunitmember.FieldUpdateTime))
}

// WhereIsAdditional applies the entql bool predicate on the is_additional field.
func (f *OrgUnitMemberFilter) WhereIsAdditional(p entql.BoolP) {
	f.Where(p.Field(orgunitmember.FieldIsAdditional))
}

// WhereUserID applies the entql int predicate on the user_id field.
func (f *OrgUnitMemberFilter) WhereUserID(p entql.IntP) {
	f.Where(p.Field(orgunitmember.FieldUserID))
}

// WhereOrgUnitID applies the entql int predicate on the org_unit_id field.
func (f *OrgUnitMemberFilter) WhereOrgUnitID(p entql.IntP) {
	f.Where(p.Field(orgunitmember.FieldOrgUnitID))
}

// WhereOrgUnitPositionID applies the entql int predicate on the org_unit_position_id field.
func (f *OrgUnitMemberFilter) WhereOrgUnitPositionID(p entql.IntP) {
	f.Where(p.Field(orgunitmember.FieldOrgUnitPositionID))
}

// WhereHasCreateBy applies a predicate to check if query has an edge create_by.
func (f *OrgUnitMemberFilter) WhereHasCreateBy() {
	f.Where(entql.HasEdge("create_by"))
}

// WhereHasCreateByWith applies a predicate to check if query has an edge create_by with a given conditions (other predicates).
func (f *OrgUnitMemberFilter) WhereHasCreateByWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("create_by", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdateBy applies a predicate to check if query has an edge update_by.
func (f *OrgUnitMemberFilter) WhereHasUpdateBy() {
	f.Where(entql.HasEdge("update_by"))
}

// WhereHasUpdateByWith applies a predicate to check if query has an edge update_by with a given conditions (other predicates).
func (f *OrgUnitMemberFilter) WhereHasUpdateByWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("update_by", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *OrgUnitMemberFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *OrgUnitMemberFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPosition applies a predicate to check if query has an edge position.
func (f *OrgUnitMemberFilter) WhereHasPosition() {
	f.Where(entql.HasEdge("position"))
}

// WhereHasPositionWith applies a predicate to check if query has an edge position with a given conditions (other predicates).
func (f *OrgUnitMemberFilter) WhereHasPositionWith(preds ...predicate.OrgUnitPosition) {
	f.Where(entql.HasEdgeWith("position", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBelongToOrgUnit applies a predicate to check if query has an edge belongToOrgUnit.
func (f *OrgUnitMemberFilter) WhereHasBelongToOrgUnit() {
	f.Where(entql.HasEdge("belongToOrgUnit"))
}

// WhereHasBelongToOrgUnitWith applies a predicate to check if query has an edge belongToOrgUnit with a given conditions (other predicates).
func (f *OrgUnitMemberFilter) WhereHasBelongToOrgUnitWith(preds ...predicate.OrgUnit) {
	f.Where(entql.HasEdgeWith("belongToOrgUnit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (oupq *OrgUnitPositionQuery) addPredicate(pred func(s *sql.Selector)) {
	oupq.predicates = append(oupq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrgUnitPositionQuery builder.
func (oupq *OrgUnitPositionQuery) Filter() *OrgUnitPositionFilter {
	return &OrgUnitPositionFilter{oupq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrgUnitPositionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrgUnitPositionMutation builder.
func (m *OrgUnitPositionMutation) Filter() *OrgUnitPositionFilter {
	return &OrgUnitPositionFilter{m}
}

// OrgUnitPositionFilter provides a generic filtering capability at runtime for OrgUnitPositionQuery.
type OrgUnitPositionFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *OrgUnitPositionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *OrgUnitPositionFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(orgunitposition.FieldID))
}

// WhereCreateByUser applies the entql int predicate on the create_by_user field.
func (f *OrgUnitPositionFilter) WhereCreateByUser(p entql.IntP) {
	f.Where(p.Field(orgunitposition.FieldCreateByUser))
}

// WhereUpdateByUser applies the entql int predicate on the update_by_user field.
func (f *OrgUnitPositionFilter) WhereUpdateByUser(p entql.IntP) {
	f.Where(p.Field(orgunitposition.FieldUpdateByUser))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *OrgUnitPositionFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(orgunitposition.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *OrgUnitPositionFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(orgunitposition.FieldUpdateTime))
}

// WhereName applies the entql string predicate on the name field.
func (f *OrgUnitPositionFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(orgunitposition.FieldName))
}

// WhereDuty applies the entql string predicate on the duty field.
func (f *OrgUnitPositionFilter) WhereDuty(p entql.StringP) {
	f.Where(p.Field(orgunitposition.FieldDuty))
}

// WhereLevel applies the entql int predicate on the level field.
func (f *OrgUnitPositionFilter) WhereLevel(p entql.IntP) {
	f.Where(p.Field(orgunitposition.FieldLevel))
}

// WhereOrgUnitID applies the entql int predicate on the org_unit_id field.
func (f *OrgUnitPositionFilter) WhereOrgUnitID(p entql.IntP) {
	f.Where(p.Field(orgunitposition.FieldOrgUnitID))
}

// WhereHasCreateBy applies a predicate to check if query has an edge create_by.
func (f *OrgUnitPositionFilter) WhereHasCreateBy() {
	f.Where(entql.HasEdge("create_by"))
}

// WhereHasCreateByWith applies a predicate to check if query has an edge create_by with a given conditions (other predicates).
func (f *OrgUnitPositionFilter) WhereHasCreateByWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("create_by", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdateBy applies a predicate to check if query has an edge update_by.
func (f *OrgUnitPositionFilter) WhereHasUpdateBy() {
	f.Where(entql.HasEdge("update_by"))
}

// WhereHasUpdateByWith applies a predicate to check if query has an edge update_by with a given conditions (other predicates).
func (f *OrgUnitPositionFilter) WhereHasUpdateByWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("update_by", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBelongToOrgUnitMembers applies a predicate to check if query has an edge belongToOrgUnitMembers.
func (f *OrgUnitPositionFilter) WhereHasBelongToOrgUnitMembers() {
	f.Where(entql.HasEdge("belongToOrgUnitMembers"))
}

// WhereHasBelongToOrgUnitMembersWith applies a predicate to check if query has an edge belongToOrgUnitMembers with a given conditions (other predicates).
func (f *OrgUnitPositionFilter) WhereHasBelongToOrgUnitMembersWith(preds ...predicate.OrgUnitMember) {
	f.Where(entql.HasEdgeWith("belongToOrgUnitMembers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBelongToOrgUnit applies a predicate to check if query has an edge belongToOrgUnit.
func (f *OrgUnitPositionFilter) WhereHasBelongToOrgUnit() {
	f.Where(entql.HasEdge("belongToOrgUnit"))
}

// WhereHasBelongToOrgUnitWith applies a predicate to check if query has an edge belongToOrgUnit with a given conditions (other predicates).
func (f *OrgUnitPositionFilter) WhereHasBelongToOrgUnitWith(preds ...predicate.OrgUnit) {
	f.Where(entql.HasEdgeWith("belongToOrgUnit", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (oq *OrganizationQuery) addPredicate(pred func(s *sql.Selector)) {
	oq.predicates = append(oq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrganizationQuery builder.
func (oq *OrganizationQuery) Filter() *OrganizationFilter {
	return &OrganizationFilter{oq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrganizationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrganizationMutation builder.
func (m *OrganizationMutation) Filter() *OrganizationFilter {
	return &OrganizationFilter{m}
}

// OrganizationFilter provides a generic filtering capability at runtime for OrganizationQuery.
type OrganizationFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *OrganizationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *OrganizationFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(organization.FieldID))
}

// WhereCreateByUser applies the entql int predicate on the create_by_user field.
func (f *OrganizationFilter) WhereCreateByUser(p entql.IntP) {
	f.Where(p.Field(organization.FieldCreateByUser))
}

// WhereUpdateByUser applies the entql int predicate on the update_by_user field.
func (f *OrganizationFilter) WhereUpdateByUser(p entql.IntP) {
	f.Where(p.Field(organization.FieldUpdateByUser))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *OrganizationFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(organization.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *OrganizationFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(organization.FieldUpdateTime))
}

// WhereName applies the entql string predicate on the name field.
func (f *OrganizationFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(organization.FieldName))
}

// WhereHasCreateBy applies a predicate to check if query has an edge create_by.
func (f *OrganizationFilter) WhereHasCreateBy() {
	f.Where(entql.HasEdge("create_by"))
}

// WhereHasCreateByWith applies a predicate to check if query has an edge create_by with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasCreateByWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("create_by", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdateBy applies a predicate to check if query has an edge update_by.
func (f *OrganizationFilter) WhereHasUpdateBy() {
	f.Where(entql.HasEdge("update_by"))
}

// WhereHasUpdateByWith applies a predicate to check if query has an edge update_by with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasUpdateByWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("update_by", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUnits applies a predicate to check if query has an edge units.
func (f *OrganizationFilter) WhereHasUnits() {
	f.Where(entql.HasEdge("units"))
}

// WhereHasUnitsWith applies a predicate to check if query has an edge units with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasUnitsWith(preds ...predicate.OrgUnit) {
	f.Where(entql.HasEdgeWith("units", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStaffs applies a predicate to check if query has an edge staffs.
func (f *OrganizationFilter) WhereHasStaffs() {
	f.Where(entql.HasEdge("staffs"))
}

// WhereHasStaffsWith applies a predicate to check if query has an edge staffs with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasStaffsWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("staffs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rq *ResourceQuery) addPredicate(pred func(s *sql.Selector)) {
	rq.predicates = append(rq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ResourceQuery builder.
func (rq *ResourceQuery) Filter() *ResourceFilter {
	return &ResourceFilter{rq}
}

// addPredicate implements the predicateAdder interface.
func (m *ResourceMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ResourceMutation builder.
func (m *ResourceMutation) Filter() *ResourceFilter {
	return &ResourceFilter{m}
}

// ResourceFilter provides a generic filtering capability at runtime for ResourceQuery.
type ResourceFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *ResourceFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *ResourceFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(resource.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *ResourceFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(resource.FieldName))
}

// WhereType applies the entql string predicate on the type field.
func (f *ResourceFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(resource.FieldType))
}

// addPredicate implements the predicateAdder interface.
func (sq *SystemQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SystemQuery builder.
func (sq *SystemQuery) Filter() *SystemFilter {
	return &SystemFilter{sq}
}

// addPredicate implements the predicateAdder interface.
func (m *SystemMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SystemMutation builder.
func (m *SystemMutation) Filter() *SystemFilter {
	return &SystemFilter{m}
}

// SystemFilter provides a generic filtering capability at runtime for SystemQuery.
type SystemFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *SystemFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *SystemFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(system.FieldID))
}

// WhereCreateByUser applies the entql int predicate on the create_by_user field.
func (f *SystemFilter) WhereCreateByUser(p entql.IntP) {
	f.Where(p.Field(system.FieldCreateByUser))
}

// WhereUpdateByUser applies the entql int predicate on the update_by_user field.
func (f *SystemFilter) WhereUpdateByUser(p entql.IntP) {
	f.Where(p.Field(system.FieldUpdateByUser))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *SystemFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(system.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *SystemFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(system.FieldUpdateTime))
}

// WhereName applies the entql string predicate on the name field.
func (f *SystemFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(system.FieldName))
}

// WhereHasCreateBy applies a predicate to check if query has an edge create_by.
func (f *SystemFilter) WhereHasCreateBy() {
	f.Where(entql.HasEdge("create_by"))
}

// WhereHasCreateByWith applies a predicate to check if query has an edge create_by with a given conditions (other predicates).
func (f *SystemFilter) WhereHasCreateByWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("create_by", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdateBy applies a predicate to check if query has an edge update_by.
func (f *SystemFilter) WhereHasUpdateBy() {
	f.Where(entql.HasEdge("update_by"))
}

// WhereHasUpdateByWith applies a predicate to check if query has an edge update_by with a given conditions (other predicates).
func (f *SystemFilter) WhereHasUpdateByWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("update_by", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *UserFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(user.FieldID))
}

// WhereCreateByUser applies the entql int predicate on the create_by_user field.
func (f *UserFilter) WhereCreateByUser(p entql.IntP) {
	f.Where(p.Field(user.FieldCreateByUser))
}

// WhereUpdateByUser applies the entql int predicate on the update_by_user field.
func (f *UserFilter) WhereUpdateByUser(p entql.IntP) {
	f.Where(p.Field(user.FieldUpdateByUser))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *UserFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *UserFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(user.FieldUpdateTime))
}

// WhereAccountName applies the entql string predicate on the account_name field.
func (f *UserFilter) WhereAccountName(p entql.StringP) {
	f.Where(p.Field(user.FieldAccountName))
}

// WhereStaffType applies the entql string predicate on the staff_type field.
func (f *UserFilter) WhereStaffType(p entql.StringP) {
	f.Where(p.Field(user.FieldStaffType))
}

// WhereIsOnJob applies the entql bool predicate on the is_on_job field.
func (f *UserFilter) WhereIsOnJob(p entql.BoolP) {
	f.Where(p.Field(user.FieldIsOnJob))
}

// WhereFamilyName applies the entql string predicate on the family_name field.
func (f *UserFilter) WhereFamilyName(p entql.StringP) {
	f.Where(p.Field(user.FieldFamilyName))
}

// WhereGivenName applies the entql string predicate on the given_name field.
func (f *UserFilter) WhereGivenName(p entql.StringP) {
	f.Where(p.Field(user.FieldGivenName))
}

// WhereDisplayName applies the entql string predicate on the display_name field.
func (f *UserFilter) WhereDisplayName(p entql.StringP) {
	f.Where(p.Field(user.FieldDisplayName))
}

// WhereBirthday applies the entql time.Time predicate on the birthday field.
func (f *UserFilter) WhereBirthday(p entql.TimeP) {
	f.Where(p.Field(user.FieldBirthday))
}

// WhereIDNumber applies the entql string predicate on the id_number field.
func (f *UserFilter) WhereIDNumber(p entql.StringP) {
	f.Where(p.Field(user.FieldIDNumber))
}

// WhereSex applies the entql string predicate on the sex field.
func (f *UserFilter) WhereSex(p entql.StringP) {
	f.Where(p.Field(user.FieldSex))
}

// WherePhoneNumber applies the entql string predicate on the phone_number field.
func (f *UserFilter) WherePhoneNumber(p entql.StringP) {
	f.Where(p.Field(user.FieldPhoneNumber))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *UserFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(user.FieldAddress))
}

// WhereStaffID applies the entql string predicate on the staff_id field.
func (f *UserFilter) WhereStaffID(p entql.StringP) {
	f.Where(p.Field(user.FieldStaffID))
}

// WherePersonalEmail applies the entql string predicate on the personal_email field.
func (f *UserFilter) WherePersonalEmail(p entql.StringP) {
	f.Where(p.Field(user.FieldPersonalEmail))
}

// WhereIntranetWorkEmail applies the entql string predicate on the intranet_work_email field.
func (f *UserFilter) WhereIntranetWorkEmail(p entql.StringP) {
	f.Where(p.Field(user.FieldIntranetWorkEmail))
}

// WhereExtranetWorkEmail applies the entql string predicate on the extranet_work_email field.
func (f *UserFilter) WhereExtranetWorkEmail(p entql.StringP) {
	f.Where(p.Field(user.FieldExtranetWorkEmail))
}

// WhereHasCreateBy applies a predicate to check if query has an edge create_by.
func (f *UserFilter) WhereHasCreateBy() {
	f.Where(entql.HasEdge("create_by"))
}

// WhereHasCreateByWith applies a predicate to check if query has an edge create_by with a given conditions (other predicates).
func (f *UserFilter) WhereHasCreateByWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("create_by", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdateBy applies a predicate to check if query has an edge update_by.
func (f *UserFilter) WhereHasUpdateBy() {
	f.Where(entql.HasEdge("update_by"))
}

// WhereHasUpdateByWith applies a predicate to check if query has an edge update_by with a given conditions (other predicates).
func (f *UserFilter) WhereHasUpdateByWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("update_by", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAuthHistories applies a predicate to check if query has an edge authHistories.
func (f *UserFilter) WhereHasAuthHistories() {
	f.Where(entql.HasEdge("authHistories"))
}

// WhereHasAuthHistoriesWith applies a predicate to check if query has an edge authHistories with a given conditions (other predicates).
func (f *UserFilter) WhereHasAuthHistoriesWith(preds ...predicate.Auth) {
	f.Where(entql.HasEdgeWith("authHistories", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasJobHistories applies a predicate to check if query has an edge jobHistories.
func (f *UserFilter) WhereHasJobHistories() {
	f.Where(entql.HasEdge("jobHistories"))
}

// WhereHasJobHistoriesWith applies a predicate to check if query has an edge jobHistories with a given conditions (other predicates).
func (f *UserFilter) WhereHasJobHistoriesWith(preds ...predicate.JobHistory) {
	f.Where(entql.HasEdgeWith("jobHistories", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCreates applies a predicate to check if query has an edge creates.
func (f *UserFilter) WhereHasCreates() {
	f.Where(entql.HasEdge("creates"))
}

// WhereHasCreatesWith applies a predicate to check if query has an edge creates with a given conditions (other predicates).
func (f *UserFilter) WhereHasCreatesWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("creates", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdates applies a predicate to check if query has an edge updates.
func (f *UserFilter) WhereHasUpdates() {
	f.Where(entql.HasEdge("updates"))
}

// WhereHasUpdatesWith applies a predicate to check if query has an edge updates with a given conditions (other predicates).
func (f *UserFilter) WhereHasUpdatesWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("updates", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBelongToOrgUnitMembers applies a predicate to check if query has an edge belongToOrgUnitMembers.
func (f *UserFilter) WhereHasBelongToOrgUnitMembers() {
	f.Where(entql.HasEdge("belongToOrgUnitMembers"))
}

// WhereHasBelongToOrgUnitMembersWith applies a predicate to check if query has an edge belongToOrgUnitMembers with a given conditions (other predicates).
func (f *UserFilter) WhereHasBelongToOrgUnitMembersWith(preds ...predicate.OrgUnitMember) {
	f.Where(entql.HasEdgeWith("belongToOrgUnitMembers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBelongToOg applies a predicate to check if query has an edge belongToOg.
func (f *UserFilter) WhereHasBelongToOg() {
	f.Where(entql.HasEdge("belongToOg"))
}

// WhereHasBelongToOgWith applies a predicate to check if query has an edge belongToOg with a given conditions (other predicates).
func (f *UserFilter) WhereHasBelongToOgWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("belongToOg", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
