// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wing/models/ent/internal"
	"wing/models/ent/orgunit"
	"wing/models/ent/orgunitmember"
	"wing/models/ent/orgunitposition"
	"wing/models/ent/predicate"
	"wing/models/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrgUnitPositionUpdate is the builder for updating OrgUnitPosition entities.
type OrgUnitPositionUpdate struct {
	config
	hooks    []Hook
	mutation *OrgUnitPositionMutation
}

// Where appends a list predicates to the OrgUnitPositionUpdate builder.
func (oupu *OrgUnitPositionUpdate) Where(ps ...predicate.OrgUnitPosition) *OrgUnitPositionUpdate {
	oupu.mutation.Where(ps...)
	return oupu
}

// SetCreateByUser sets the "create_by_user" field.
func (oupu *OrgUnitPositionUpdate) SetCreateByUser(i int) *OrgUnitPositionUpdate {
	oupu.mutation.SetCreateByUser(i)
	return oupu
}

// SetNillableCreateByUser sets the "create_by_user" field if the given value is not nil.
func (oupu *OrgUnitPositionUpdate) SetNillableCreateByUser(i *int) *OrgUnitPositionUpdate {
	if i != nil {
		oupu.SetCreateByUser(*i)
	}
	return oupu
}

// ClearCreateByUser clears the value of the "create_by_user" field.
func (oupu *OrgUnitPositionUpdate) ClearCreateByUser() *OrgUnitPositionUpdate {
	oupu.mutation.ClearCreateByUser()
	return oupu
}

// SetUpdateByUser sets the "update_by_user" field.
func (oupu *OrgUnitPositionUpdate) SetUpdateByUser(i int) *OrgUnitPositionUpdate {
	oupu.mutation.SetUpdateByUser(i)
	return oupu
}

// SetNillableUpdateByUser sets the "update_by_user" field if the given value is not nil.
func (oupu *OrgUnitPositionUpdate) SetNillableUpdateByUser(i *int) *OrgUnitPositionUpdate {
	if i != nil {
		oupu.SetUpdateByUser(*i)
	}
	return oupu
}

// ClearUpdateByUser clears the value of the "update_by_user" field.
func (oupu *OrgUnitPositionUpdate) ClearUpdateByUser() *OrgUnitPositionUpdate {
	oupu.mutation.ClearUpdateByUser()
	return oupu
}

// SetUpdateTime sets the "update_time" field.
func (oupu *OrgUnitPositionUpdate) SetUpdateTime(t time.Time) *OrgUnitPositionUpdate {
	oupu.mutation.SetUpdateTime(t)
	return oupu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (oupu *OrgUnitPositionUpdate) ClearUpdateTime() *OrgUnitPositionUpdate {
	oupu.mutation.ClearUpdateTime()
	return oupu
}

// SetName sets the "name" field.
func (oupu *OrgUnitPositionUpdate) SetName(s string) *OrgUnitPositionUpdate {
	oupu.mutation.SetName(s)
	return oupu
}

// SetDuty sets the "duty" field.
func (oupu *OrgUnitPositionUpdate) SetDuty(s string) *OrgUnitPositionUpdate {
	oupu.mutation.SetDuty(s)
	return oupu
}

// SetNillableDuty sets the "duty" field if the given value is not nil.
func (oupu *OrgUnitPositionUpdate) SetNillableDuty(s *string) *OrgUnitPositionUpdate {
	if s != nil {
		oupu.SetDuty(*s)
	}
	return oupu
}

// ClearDuty clears the value of the "duty" field.
func (oupu *OrgUnitPositionUpdate) ClearDuty() *OrgUnitPositionUpdate {
	oupu.mutation.ClearDuty()
	return oupu
}

// SetLevel sets the "level" field.
func (oupu *OrgUnitPositionUpdate) SetLevel(i int) *OrgUnitPositionUpdate {
	oupu.mutation.ResetLevel()
	oupu.mutation.SetLevel(i)
	return oupu
}

// AddLevel adds i to the "level" field.
func (oupu *OrgUnitPositionUpdate) AddLevel(i int) *OrgUnitPositionUpdate {
	oupu.mutation.AddLevel(i)
	return oupu
}

// SetOrgUnitID sets the "org_unit_id" field.
func (oupu *OrgUnitPositionUpdate) SetOrgUnitID(i int) *OrgUnitPositionUpdate {
	oupu.mutation.SetOrgUnitID(i)
	return oupu
}

// SetCreateByID sets the "create_by" edge to the User entity by ID.
func (oupu *OrgUnitPositionUpdate) SetCreateByID(id int) *OrgUnitPositionUpdate {
	oupu.mutation.SetCreateByID(id)
	return oupu
}

// SetNillableCreateByID sets the "create_by" edge to the User entity by ID if the given value is not nil.
func (oupu *OrgUnitPositionUpdate) SetNillableCreateByID(id *int) *OrgUnitPositionUpdate {
	if id != nil {
		oupu = oupu.SetCreateByID(*id)
	}
	return oupu
}

// SetCreateBy sets the "create_by" edge to the User entity.
func (oupu *OrgUnitPositionUpdate) SetCreateBy(u *User) *OrgUnitPositionUpdate {
	return oupu.SetCreateByID(u.ID)
}

// SetUpdateByID sets the "update_by" edge to the User entity by ID.
func (oupu *OrgUnitPositionUpdate) SetUpdateByID(id int) *OrgUnitPositionUpdate {
	oupu.mutation.SetUpdateByID(id)
	return oupu
}

// SetNillableUpdateByID sets the "update_by" edge to the User entity by ID if the given value is not nil.
func (oupu *OrgUnitPositionUpdate) SetNillableUpdateByID(id *int) *OrgUnitPositionUpdate {
	if id != nil {
		oupu = oupu.SetUpdateByID(*id)
	}
	return oupu
}

// SetUpdateBy sets the "update_by" edge to the User entity.
func (oupu *OrgUnitPositionUpdate) SetUpdateBy(u *User) *OrgUnitPositionUpdate {
	return oupu.SetUpdateByID(u.ID)
}

// AddBelongToOrgUnitMemberIDs adds the "belongToOrgUnitMembers" edge to the OrgUnitMember entity by IDs.
func (oupu *OrgUnitPositionUpdate) AddBelongToOrgUnitMemberIDs(ids ...int) *OrgUnitPositionUpdate {
	oupu.mutation.AddBelongToOrgUnitMemberIDs(ids...)
	return oupu
}

// AddBelongToOrgUnitMembers adds the "belongToOrgUnitMembers" edges to the OrgUnitMember entity.
func (oupu *OrgUnitPositionUpdate) AddBelongToOrgUnitMembers(o ...*OrgUnitMember) *OrgUnitPositionUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oupu.AddBelongToOrgUnitMemberIDs(ids...)
}

// SetBelongToOrgUnitID sets the "belongToOrgUnit" edge to the OrgUnit entity by ID.
func (oupu *OrgUnitPositionUpdate) SetBelongToOrgUnitID(id int) *OrgUnitPositionUpdate {
	oupu.mutation.SetBelongToOrgUnitID(id)
	return oupu
}

// SetBelongToOrgUnit sets the "belongToOrgUnit" edge to the OrgUnit entity.
func (oupu *OrgUnitPositionUpdate) SetBelongToOrgUnit(o *OrgUnit) *OrgUnitPositionUpdate {
	return oupu.SetBelongToOrgUnitID(o.ID)
}

// Mutation returns the OrgUnitPositionMutation object of the builder.
func (oupu *OrgUnitPositionUpdate) Mutation() *OrgUnitPositionMutation {
	return oupu.mutation
}

// ClearCreateBy clears the "create_by" edge to the User entity.
func (oupu *OrgUnitPositionUpdate) ClearCreateBy() *OrgUnitPositionUpdate {
	oupu.mutation.ClearCreateBy()
	return oupu
}

// ClearUpdateBy clears the "update_by" edge to the User entity.
func (oupu *OrgUnitPositionUpdate) ClearUpdateBy() *OrgUnitPositionUpdate {
	oupu.mutation.ClearUpdateBy()
	return oupu
}

// ClearBelongToOrgUnitMembers clears all "belongToOrgUnitMembers" edges to the OrgUnitMember entity.
func (oupu *OrgUnitPositionUpdate) ClearBelongToOrgUnitMembers() *OrgUnitPositionUpdate {
	oupu.mutation.ClearBelongToOrgUnitMembers()
	return oupu
}

// RemoveBelongToOrgUnitMemberIDs removes the "belongToOrgUnitMembers" edge to OrgUnitMember entities by IDs.
func (oupu *OrgUnitPositionUpdate) RemoveBelongToOrgUnitMemberIDs(ids ...int) *OrgUnitPositionUpdate {
	oupu.mutation.RemoveBelongToOrgUnitMemberIDs(ids...)
	return oupu
}

// RemoveBelongToOrgUnitMembers removes "belongToOrgUnitMembers" edges to OrgUnitMember entities.
func (oupu *OrgUnitPositionUpdate) RemoveBelongToOrgUnitMembers(o ...*OrgUnitMember) *OrgUnitPositionUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oupu.RemoveBelongToOrgUnitMemberIDs(ids...)
}

// ClearBelongToOrgUnit clears the "belongToOrgUnit" edge to the OrgUnit entity.
func (oupu *OrgUnitPositionUpdate) ClearBelongToOrgUnit() *OrgUnitPositionUpdate {
	oupu.mutation.ClearBelongToOrgUnit()
	return oupu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oupu *OrgUnitPositionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := oupu.defaults(); err != nil {
		return 0, err
	}
	if len(oupu.hooks) == 0 {
		if err = oupu.check(); err != nil {
			return 0, err
		}
		affected, err = oupu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrgUnitPositionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oupu.check(); err != nil {
				return 0, err
			}
			oupu.mutation = mutation
			affected, err = oupu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(oupu.hooks) - 1; i >= 0; i-- {
			if oupu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oupu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oupu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (oupu *OrgUnitPositionUpdate) SaveX(ctx context.Context) int {
	affected, err := oupu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oupu *OrgUnitPositionUpdate) Exec(ctx context.Context) error {
	_, err := oupu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oupu *OrgUnitPositionUpdate) ExecX(ctx context.Context) {
	if err := oupu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oupu *OrgUnitPositionUpdate) defaults() error {
	if _, ok := oupu.mutation.UpdateTime(); !ok && !oupu.mutation.UpdateTimeCleared() {
		if orgunitposition.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized orgunitposition.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := orgunitposition.UpdateDefaultUpdateTime()
		oupu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (oupu *OrgUnitPositionUpdate) check() error {
	if v, ok := oupu.mutation.Level(); ok {
		if err := orgunitposition.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf("ent: validator failed for field \"level\": %w", err)}
		}
	}
	if _, ok := oupu.mutation.BelongToOrgUnitID(); oupu.mutation.BelongToOrgUnitCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"belongToOrgUnit\"")
	}
	return nil
}

func (oupu *OrgUnitPositionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orgunitposition.Table,
			Columns: orgunitposition.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orgunitposition.FieldID,
			},
		},
	}
	if ps := oupu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oupu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orgunitposition.FieldUpdateTime,
		})
	}
	if oupu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orgunitposition.FieldUpdateTime,
		})
	}
	if value, ok := oupu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orgunitposition.FieldName,
		})
	}
	if value, ok := oupu.mutation.Duty(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orgunitposition.FieldDuty,
		})
	}
	if oupu.mutation.DutyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orgunitposition.FieldDuty,
		})
	}
	if value, ok := oupu.mutation.Level(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orgunitposition.FieldLevel,
		})
	}
	if value, ok := oupu.mutation.AddedLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orgunitposition.FieldLevel,
		})
	}
	if oupu.mutation.CreateByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitposition.CreateByTable,
			Columns: []string{orgunitposition.CreateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = oupu.schemaConfig.OrgUnitPosition
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oupu.mutation.CreateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitposition.CreateByTable,
			Columns: []string{orgunitposition.CreateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = oupu.schemaConfig.OrgUnitPosition
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oupu.mutation.UpdateByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitposition.UpdateByTable,
			Columns: []string{orgunitposition.UpdateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = oupu.schemaConfig.OrgUnitPosition
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oupu.mutation.UpdateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitposition.UpdateByTable,
			Columns: []string{orgunitposition.UpdateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = oupu.schemaConfig.OrgUnitPosition
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oupu.mutation.BelongToOrgUnitMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   orgunitposition.BelongToOrgUnitMembersTable,
			Columns: []string{orgunitposition.BelongToOrgUnitMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunitmember.FieldID,
				},
			},
		}
		edge.Schema = oupu.schemaConfig.OrgUnitMember
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oupu.mutation.RemovedBelongToOrgUnitMembersIDs(); len(nodes) > 0 && !oupu.mutation.BelongToOrgUnitMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   orgunitposition.BelongToOrgUnitMembersTable,
			Columns: []string{orgunitposition.BelongToOrgUnitMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunitmember.FieldID,
				},
			},
		}
		edge.Schema = oupu.schemaConfig.OrgUnitMember
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oupu.mutation.BelongToOrgUnitMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   orgunitposition.BelongToOrgUnitMembersTable,
			Columns: []string{orgunitposition.BelongToOrgUnitMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunitmember.FieldID,
				},
			},
		}
		edge.Schema = oupu.schemaConfig.OrgUnitMember
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oupu.mutation.BelongToOrgUnitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgunitposition.BelongToOrgUnitTable,
			Columns: []string{orgunitposition.BelongToOrgUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunit.FieldID,
				},
			},
		}
		edge.Schema = oupu.schemaConfig.OrgUnitPosition
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oupu.mutation.BelongToOrgUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgunitposition.BelongToOrgUnitTable,
			Columns: []string{orgunitposition.BelongToOrgUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunit.FieldID,
				},
			},
		}
		edge.Schema = oupu.schemaConfig.OrgUnitPosition
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = oupu.schemaConfig.OrgUnitPosition
	ctx = internal.NewSchemaConfigContext(ctx, oupu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, oupu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orgunitposition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// OrgUnitPositionUpdateOne is the builder for updating a single OrgUnitPosition entity.
type OrgUnitPositionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrgUnitPositionMutation
}

// SetCreateByUser sets the "create_by_user" field.
func (oupuo *OrgUnitPositionUpdateOne) SetCreateByUser(i int) *OrgUnitPositionUpdateOne {
	oupuo.mutation.SetCreateByUser(i)
	return oupuo
}

// SetNillableCreateByUser sets the "create_by_user" field if the given value is not nil.
func (oupuo *OrgUnitPositionUpdateOne) SetNillableCreateByUser(i *int) *OrgUnitPositionUpdateOne {
	if i != nil {
		oupuo.SetCreateByUser(*i)
	}
	return oupuo
}

// ClearCreateByUser clears the value of the "create_by_user" field.
func (oupuo *OrgUnitPositionUpdateOne) ClearCreateByUser() *OrgUnitPositionUpdateOne {
	oupuo.mutation.ClearCreateByUser()
	return oupuo
}

// SetUpdateByUser sets the "update_by_user" field.
func (oupuo *OrgUnitPositionUpdateOne) SetUpdateByUser(i int) *OrgUnitPositionUpdateOne {
	oupuo.mutation.SetUpdateByUser(i)
	return oupuo
}

// SetNillableUpdateByUser sets the "update_by_user" field if the given value is not nil.
func (oupuo *OrgUnitPositionUpdateOne) SetNillableUpdateByUser(i *int) *OrgUnitPositionUpdateOne {
	if i != nil {
		oupuo.SetUpdateByUser(*i)
	}
	return oupuo
}

// ClearUpdateByUser clears the value of the "update_by_user" field.
func (oupuo *OrgUnitPositionUpdateOne) ClearUpdateByUser() *OrgUnitPositionUpdateOne {
	oupuo.mutation.ClearUpdateByUser()
	return oupuo
}

// SetUpdateTime sets the "update_time" field.
func (oupuo *OrgUnitPositionUpdateOne) SetUpdateTime(t time.Time) *OrgUnitPositionUpdateOne {
	oupuo.mutation.SetUpdateTime(t)
	return oupuo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (oupuo *OrgUnitPositionUpdateOne) ClearUpdateTime() *OrgUnitPositionUpdateOne {
	oupuo.mutation.ClearUpdateTime()
	return oupuo
}

// SetName sets the "name" field.
func (oupuo *OrgUnitPositionUpdateOne) SetName(s string) *OrgUnitPositionUpdateOne {
	oupuo.mutation.SetName(s)
	return oupuo
}

// SetDuty sets the "duty" field.
func (oupuo *OrgUnitPositionUpdateOne) SetDuty(s string) *OrgUnitPositionUpdateOne {
	oupuo.mutation.SetDuty(s)
	return oupuo
}

// SetNillableDuty sets the "duty" field if the given value is not nil.
func (oupuo *OrgUnitPositionUpdateOne) SetNillableDuty(s *string) *OrgUnitPositionUpdateOne {
	if s != nil {
		oupuo.SetDuty(*s)
	}
	return oupuo
}

// ClearDuty clears the value of the "duty" field.
func (oupuo *OrgUnitPositionUpdateOne) ClearDuty() *OrgUnitPositionUpdateOne {
	oupuo.mutation.ClearDuty()
	return oupuo
}

// SetLevel sets the "level" field.
func (oupuo *OrgUnitPositionUpdateOne) SetLevel(i int) *OrgUnitPositionUpdateOne {
	oupuo.mutation.ResetLevel()
	oupuo.mutation.SetLevel(i)
	return oupuo
}

// AddLevel adds i to the "level" field.
func (oupuo *OrgUnitPositionUpdateOne) AddLevel(i int) *OrgUnitPositionUpdateOne {
	oupuo.mutation.AddLevel(i)
	return oupuo
}

// SetOrgUnitID sets the "org_unit_id" field.
func (oupuo *OrgUnitPositionUpdateOne) SetOrgUnitID(i int) *OrgUnitPositionUpdateOne {
	oupuo.mutation.SetOrgUnitID(i)
	return oupuo
}

// SetCreateByID sets the "create_by" edge to the User entity by ID.
func (oupuo *OrgUnitPositionUpdateOne) SetCreateByID(id int) *OrgUnitPositionUpdateOne {
	oupuo.mutation.SetCreateByID(id)
	return oupuo
}

// SetNillableCreateByID sets the "create_by" edge to the User entity by ID if the given value is not nil.
func (oupuo *OrgUnitPositionUpdateOne) SetNillableCreateByID(id *int) *OrgUnitPositionUpdateOne {
	if id != nil {
		oupuo = oupuo.SetCreateByID(*id)
	}
	return oupuo
}

// SetCreateBy sets the "create_by" edge to the User entity.
func (oupuo *OrgUnitPositionUpdateOne) SetCreateBy(u *User) *OrgUnitPositionUpdateOne {
	return oupuo.SetCreateByID(u.ID)
}

// SetUpdateByID sets the "update_by" edge to the User entity by ID.
func (oupuo *OrgUnitPositionUpdateOne) SetUpdateByID(id int) *OrgUnitPositionUpdateOne {
	oupuo.mutation.SetUpdateByID(id)
	return oupuo
}

// SetNillableUpdateByID sets the "update_by" edge to the User entity by ID if the given value is not nil.
func (oupuo *OrgUnitPositionUpdateOne) SetNillableUpdateByID(id *int) *OrgUnitPositionUpdateOne {
	if id != nil {
		oupuo = oupuo.SetUpdateByID(*id)
	}
	return oupuo
}

// SetUpdateBy sets the "update_by" edge to the User entity.
func (oupuo *OrgUnitPositionUpdateOne) SetUpdateBy(u *User) *OrgUnitPositionUpdateOne {
	return oupuo.SetUpdateByID(u.ID)
}

// AddBelongToOrgUnitMemberIDs adds the "belongToOrgUnitMembers" edge to the OrgUnitMember entity by IDs.
func (oupuo *OrgUnitPositionUpdateOne) AddBelongToOrgUnitMemberIDs(ids ...int) *OrgUnitPositionUpdateOne {
	oupuo.mutation.AddBelongToOrgUnitMemberIDs(ids...)
	return oupuo
}

// AddBelongToOrgUnitMembers adds the "belongToOrgUnitMembers" edges to the OrgUnitMember entity.
func (oupuo *OrgUnitPositionUpdateOne) AddBelongToOrgUnitMembers(o ...*OrgUnitMember) *OrgUnitPositionUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oupuo.AddBelongToOrgUnitMemberIDs(ids...)
}

// SetBelongToOrgUnitID sets the "belongToOrgUnit" edge to the OrgUnit entity by ID.
func (oupuo *OrgUnitPositionUpdateOne) SetBelongToOrgUnitID(id int) *OrgUnitPositionUpdateOne {
	oupuo.mutation.SetBelongToOrgUnitID(id)
	return oupuo
}

// SetBelongToOrgUnit sets the "belongToOrgUnit" edge to the OrgUnit entity.
func (oupuo *OrgUnitPositionUpdateOne) SetBelongToOrgUnit(o *OrgUnit) *OrgUnitPositionUpdateOne {
	return oupuo.SetBelongToOrgUnitID(o.ID)
}

// Mutation returns the OrgUnitPositionMutation object of the builder.
func (oupuo *OrgUnitPositionUpdateOne) Mutation() *OrgUnitPositionMutation {
	return oupuo.mutation
}

// ClearCreateBy clears the "create_by" edge to the User entity.
func (oupuo *OrgUnitPositionUpdateOne) ClearCreateBy() *OrgUnitPositionUpdateOne {
	oupuo.mutation.ClearCreateBy()
	return oupuo
}

// ClearUpdateBy clears the "update_by" edge to the User entity.
func (oupuo *OrgUnitPositionUpdateOne) ClearUpdateBy() *OrgUnitPositionUpdateOne {
	oupuo.mutation.ClearUpdateBy()
	return oupuo
}

// ClearBelongToOrgUnitMembers clears all "belongToOrgUnitMembers" edges to the OrgUnitMember entity.
func (oupuo *OrgUnitPositionUpdateOne) ClearBelongToOrgUnitMembers() *OrgUnitPositionUpdateOne {
	oupuo.mutation.ClearBelongToOrgUnitMembers()
	return oupuo
}

// RemoveBelongToOrgUnitMemberIDs removes the "belongToOrgUnitMembers" edge to OrgUnitMember entities by IDs.
func (oupuo *OrgUnitPositionUpdateOne) RemoveBelongToOrgUnitMemberIDs(ids ...int) *OrgUnitPositionUpdateOne {
	oupuo.mutation.RemoveBelongToOrgUnitMemberIDs(ids...)
	return oupuo
}

// RemoveBelongToOrgUnitMembers removes "belongToOrgUnitMembers" edges to OrgUnitMember entities.
func (oupuo *OrgUnitPositionUpdateOne) RemoveBelongToOrgUnitMembers(o ...*OrgUnitMember) *OrgUnitPositionUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oupuo.RemoveBelongToOrgUnitMemberIDs(ids...)
}

// ClearBelongToOrgUnit clears the "belongToOrgUnit" edge to the OrgUnit entity.
func (oupuo *OrgUnitPositionUpdateOne) ClearBelongToOrgUnit() *OrgUnitPositionUpdateOne {
	oupuo.mutation.ClearBelongToOrgUnit()
	return oupuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oupuo *OrgUnitPositionUpdateOne) Select(field string, fields ...string) *OrgUnitPositionUpdateOne {
	oupuo.fields = append([]string{field}, fields...)
	return oupuo
}

// Save executes the query and returns the updated OrgUnitPosition entity.
func (oupuo *OrgUnitPositionUpdateOne) Save(ctx context.Context) (*OrgUnitPosition, error) {
	var (
		err  error
		node *OrgUnitPosition
	)
	if err := oupuo.defaults(); err != nil {
		return nil, err
	}
	if len(oupuo.hooks) == 0 {
		if err = oupuo.check(); err != nil {
			return nil, err
		}
		node, err = oupuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrgUnitPositionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oupuo.check(); err != nil {
				return nil, err
			}
			oupuo.mutation = mutation
			node, err = oupuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oupuo.hooks) - 1; i >= 0; i-- {
			if oupuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oupuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oupuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (oupuo *OrgUnitPositionUpdateOne) SaveX(ctx context.Context) *OrgUnitPosition {
	node, err := oupuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oupuo *OrgUnitPositionUpdateOne) Exec(ctx context.Context) error {
	_, err := oupuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oupuo *OrgUnitPositionUpdateOne) ExecX(ctx context.Context) {
	if err := oupuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oupuo *OrgUnitPositionUpdateOne) defaults() error {
	if _, ok := oupuo.mutation.UpdateTime(); !ok && !oupuo.mutation.UpdateTimeCleared() {
		if orgunitposition.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized orgunitposition.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := orgunitposition.UpdateDefaultUpdateTime()
		oupuo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (oupuo *OrgUnitPositionUpdateOne) check() error {
	if v, ok := oupuo.mutation.Level(); ok {
		if err := orgunitposition.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf("ent: validator failed for field \"level\": %w", err)}
		}
	}
	if _, ok := oupuo.mutation.BelongToOrgUnitID(); oupuo.mutation.BelongToOrgUnitCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"belongToOrgUnit\"")
	}
	return nil
}

func (oupuo *OrgUnitPositionUpdateOne) sqlSave(ctx context.Context) (_node *OrgUnitPosition, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orgunitposition.Table,
			Columns: orgunitposition.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orgunitposition.FieldID,
			},
		},
	}
	id, ok := oupuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing OrgUnitPosition.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := oupuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orgunitposition.FieldID)
		for _, f := range fields {
			if !orgunitposition.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orgunitposition.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oupuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oupuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orgunitposition.FieldUpdateTime,
		})
	}
	if oupuo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orgunitposition.FieldUpdateTime,
		})
	}
	if value, ok := oupuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orgunitposition.FieldName,
		})
	}
	if value, ok := oupuo.mutation.Duty(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orgunitposition.FieldDuty,
		})
	}
	if oupuo.mutation.DutyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orgunitposition.FieldDuty,
		})
	}
	if value, ok := oupuo.mutation.Level(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orgunitposition.FieldLevel,
		})
	}
	if value, ok := oupuo.mutation.AddedLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orgunitposition.FieldLevel,
		})
	}
	if oupuo.mutation.CreateByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitposition.CreateByTable,
			Columns: []string{orgunitposition.CreateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = oupuo.schemaConfig.OrgUnitPosition
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oupuo.mutation.CreateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitposition.CreateByTable,
			Columns: []string{orgunitposition.CreateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = oupuo.schemaConfig.OrgUnitPosition
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oupuo.mutation.UpdateByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitposition.UpdateByTable,
			Columns: []string{orgunitposition.UpdateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = oupuo.schemaConfig.OrgUnitPosition
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oupuo.mutation.UpdateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitposition.UpdateByTable,
			Columns: []string{orgunitposition.UpdateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = oupuo.schemaConfig.OrgUnitPosition
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oupuo.mutation.BelongToOrgUnitMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   orgunitposition.BelongToOrgUnitMembersTable,
			Columns: []string{orgunitposition.BelongToOrgUnitMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunitmember.FieldID,
				},
			},
		}
		edge.Schema = oupuo.schemaConfig.OrgUnitMember
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oupuo.mutation.RemovedBelongToOrgUnitMembersIDs(); len(nodes) > 0 && !oupuo.mutation.BelongToOrgUnitMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   orgunitposition.BelongToOrgUnitMembersTable,
			Columns: []string{orgunitposition.BelongToOrgUnitMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunitmember.FieldID,
				},
			},
		}
		edge.Schema = oupuo.schemaConfig.OrgUnitMember
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oupuo.mutation.BelongToOrgUnitMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   orgunitposition.BelongToOrgUnitMembersTable,
			Columns: []string{orgunitposition.BelongToOrgUnitMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunitmember.FieldID,
				},
			},
		}
		edge.Schema = oupuo.schemaConfig.OrgUnitMember
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oupuo.mutation.BelongToOrgUnitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgunitposition.BelongToOrgUnitTable,
			Columns: []string{orgunitposition.BelongToOrgUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunit.FieldID,
				},
			},
		}
		edge.Schema = oupuo.schemaConfig.OrgUnitPosition
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oupuo.mutation.BelongToOrgUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgunitposition.BelongToOrgUnitTable,
			Columns: []string{orgunitposition.BelongToOrgUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunit.FieldID,
				},
			},
		}
		edge.Schema = oupuo.schemaConfig.OrgUnitPosition
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = oupuo.schemaConfig.OrgUnitPosition
	ctx = internal.NewSchemaConfigContext(ctx, oupuo.schemaConfig)
	_node = &OrgUnitPosition{config: oupuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oupuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orgunitposition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
