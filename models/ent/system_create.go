// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wing/models/ent/system"
	"wing/models/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SystemCreate is the builder for creating a System entity.
type SystemCreate struct {
	config
	mutation *SystemMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateByUser sets the "create_by_user" field.
func (sc *SystemCreate) SetCreateByUser(i int) *SystemCreate {
	sc.mutation.SetCreateByUser(i)
	return sc
}

// SetNillableCreateByUser sets the "create_by_user" field if the given value is not nil.
func (sc *SystemCreate) SetNillableCreateByUser(i *int) *SystemCreate {
	if i != nil {
		sc.SetCreateByUser(*i)
	}
	return sc
}

// SetUpdateByUser sets the "update_by_user" field.
func (sc *SystemCreate) SetUpdateByUser(i int) *SystemCreate {
	sc.mutation.SetUpdateByUser(i)
	return sc
}

// SetNillableUpdateByUser sets the "update_by_user" field if the given value is not nil.
func (sc *SystemCreate) SetNillableUpdateByUser(i *int) *SystemCreate {
	if i != nil {
		sc.SetUpdateByUser(*i)
	}
	return sc
}

// SetCreateTime sets the "create_time" field.
func (sc *SystemCreate) SetCreateTime(t time.Time) *SystemCreate {
	sc.mutation.SetCreateTime(t)
	return sc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sc *SystemCreate) SetNillableCreateTime(t *time.Time) *SystemCreate {
	if t != nil {
		sc.SetCreateTime(*t)
	}
	return sc
}

// SetUpdateTime sets the "update_time" field.
func (sc *SystemCreate) SetUpdateTime(t time.Time) *SystemCreate {
	sc.mutation.SetUpdateTime(t)
	return sc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (sc *SystemCreate) SetNillableUpdateTime(t *time.Time) *SystemCreate {
	if t != nil {
		sc.SetUpdateTime(*t)
	}
	return sc
}

// SetName sets the "name" field.
func (sc *SystemCreate) SetName(s string) *SystemCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetCreateByID sets the "create_by" edge to the User entity by ID.
func (sc *SystemCreate) SetCreateByID(id int) *SystemCreate {
	sc.mutation.SetCreateByID(id)
	return sc
}

// SetNillableCreateByID sets the "create_by" edge to the User entity by ID if the given value is not nil.
func (sc *SystemCreate) SetNillableCreateByID(id *int) *SystemCreate {
	if id != nil {
		sc = sc.SetCreateByID(*id)
	}
	return sc
}

// SetCreateBy sets the "create_by" edge to the User entity.
func (sc *SystemCreate) SetCreateBy(u *User) *SystemCreate {
	return sc.SetCreateByID(u.ID)
}

// SetUpdateByID sets the "update_by" edge to the User entity by ID.
func (sc *SystemCreate) SetUpdateByID(id int) *SystemCreate {
	sc.mutation.SetUpdateByID(id)
	return sc
}

// SetNillableUpdateByID sets the "update_by" edge to the User entity by ID if the given value is not nil.
func (sc *SystemCreate) SetNillableUpdateByID(id *int) *SystemCreate {
	if id != nil {
		sc = sc.SetUpdateByID(*id)
	}
	return sc
}

// SetUpdateBy sets the "update_by" edge to the User entity.
func (sc *SystemCreate) SetUpdateBy(u *User) *SystemCreate {
	return sc.SetUpdateByID(u.ID)
}

// Mutation returns the SystemMutation object of the builder.
func (sc *SystemCreate) Mutation() *SystemMutation {
	return sc.mutation
}

// Save creates the System in the database.
func (sc *SystemCreate) Save(ctx context.Context) (*System, error) {
	var (
		err  error
		node *System
	)
	if err := sc.defaults(); err != nil {
		return nil, err
	}
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SystemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SystemCreate) SaveX(ctx context.Context) *System {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SystemCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SystemCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SystemCreate) defaults() error {
	if _, ok := sc.mutation.CreateTime(); !ok {
		if system.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized system.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := system.DefaultCreateTime()
		sc.mutation.SetCreateTime(v)
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		if system.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized system.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := system.DefaultUpdateTime()
		sc.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sc *SystemCreate) check() error {
	if _, ok := sc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "create_time"`)}
	}
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if v, ok := sc.mutation.Name(); ok {
		if err := system.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "name": %w`, err)}
		}
	}
	return nil
}

func (sc *SystemCreate) sqlSave(ctx context.Context) (*System, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (sc *SystemCreate) createSpec() (*System, *sqlgraph.CreateSpec) {
	var (
		_node = &System{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: system.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: system.FieldID,
			},
		}
	)
	_spec.Schema = sc.schemaConfig.System
	_spec.OnConflict = sc.conflict
	if value, ok := sc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: system.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := sc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: system.FieldUpdateTime,
		})
		_node.UpdateTime = &value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: system.FieldName,
		})
		_node.Name = value
	}
	if nodes := sc.mutation.CreateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   system.CreateByTable,
			Columns: []string{system.CreateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = sc.schemaConfig.System
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreateByUser = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.UpdateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   system.UpdateByTable,
			Columns: []string{system.UpdateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = sc.schemaConfig.System
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UpdateByUser = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.System.Create().
//		SetCreateByUser(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemUpsert) {
//			SetCreateByUser(v+v).
//		}).
//		Exec(ctx)
//
func (sc *SystemCreate) OnConflict(opts ...sql.ConflictOption) *SystemUpsertOne {
	sc.conflict = opts
	return &SystemUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.System.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (sc *SystemCreate) OnConflictColumns(columns ...string) *SystemUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SystemUpsertOne{
		create: sc,
	}
}

type (
	// SystemUpsertOne is the builder for "upsert"-ing
	//  one System node.
	SystemUpsertOne struct {
		create *SystemCreate
	}

	// SystemUpsert is the "OnConflict" setter.
	SystemUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreateByUser sets the "create_by_user" field.
func (u *SystemUpsert) SetCreateByUser(v int) *SystemUpsert {
	u.Set(system.FieldCreateByUser, v)
	return u
}

// UpdateCreateByUser sets the "create_by_user" field to the value that was provided on create.
func (u *SystemUpsert) UpdateCreateByUser() *SystemUpsert {
	u.SetExcluded(system.FieldCreateByUser)
	return u
}

// ClearCreateByUser clears the value of the "create_by_user" field.
func (u *SystemUpsert) ClearCreateByUser() *SystemUpsert {
	u.SetNull(system.FieldCreateByUser)
	return u
}

// SetUpdateByUser sets the "update_by_user" field.
func (u *SystemUpsert) SetUpdateByUser(v int) *SystemUpsert {
	u.Set(system.FieldUpdateByUser, v)
	return u
}

// UpdateUpdateByUser sets the "update_by_user" field to the value that was provided on create.
func (u *SystemUpsert) UpdateUpdateByUser() *SystemUpsert {
	u.SetExcluded(system.FieldUpdateByUser)
	return u
}

// ClearUpdateByUser clears the value of the "update_by_user" field.
func (u *SystemUpsert) ClearUpdateByUser() *SystemUpsert {
	u.SetNull(system.FieldUpdateByUser)
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *SystemUpsert) SetCreateTime(v time.Time) *SystemUpsert {
	u.Set(system.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *SystemUpsert) UpdateCreateTime() *SystemUpsert {
	u.SetExcluded(system.FieldCreateTime)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *SystemUpsert) SetUpdateTime(v time.Time) *SystemUpsert {
	u.Set(system.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *SystemUpsert) UpdateUpdateTime() *SystemUpsert {
	u.SetExcluded(system.FieldUpdateTime)
	return u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *SystemUpsert) ClearUpdateTime() *SystemUpsert {
	u.SetNull(system.FieldUpdateTime)
	return u
}

// SetName sets the "name" field.
func (u *SystemUpsert) SetName(v string) *SystemUpsert {
	u.Set(system.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SystemUpsert) UpdateName() *SystemUpsert {
	u.SetExcluded(system.FieldName)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.System.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *SystemUpsertOne) UpdateNewValues() *SystemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.System.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *SystemUpsertOne) Ignore() *SystemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemUpsertOne) DoNothing() *SystemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemCreate.OnConflict
// documentation for more info.
func (u *SystemUpsertOne) Update(set func(*SystemUpsert)) *SystemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateByUser sets the "create_by_user" field.
func (u *SystemUpsertOne) SetCreateByUser(v int) *SystemUpsertOne {
	return u.Update(func(s *SystemUpsert) {
		s.SetCreateByUser(v)
	})
}

// UpdateCreateByUser sets the "create_by_user" field to the value that was provided on create.
func (u *SystemUpsertOne) UpdateCreateByUser() *SystemUpsertOne {
	return u.Update(func(s *SystemUpsert) {
		s.UpdateCreateByUser()
	})
}

// ClearCreateByUser clears the value of the "create_by_user" field.
func (u *SystemUpsertOne) ClearCreateByUser() *SystemUpsertOne {
	return u.Update(func(s *SystemUpsert) {
		s.ClearCreateByUser()
	})
}

// SetUpdateByUser sets the "update_by_user" field.
func (u *SystemUpsertOne) SetUpdateByUser(v int) *SystemUpsertOne {
	return u.Update(func(s *SystemUpsert) {
		s.SetUpdateByUser(v)
	})
}

// UpdateUpdateByUser sets the "update_by_user" field to the value that was provided on create.
func (u *SystemUpsertOne) UpdateUpdateByUser() *SystemUpsertOne {
	return u.Update(func(s *SystemUpsert) {
		s.UpdateUpdateByUser()
	})
}

// ClearUpdateByUser clears the value of the "update_by_user" field.
func (u *SystemUpsertOne) ClearUpdateByUser() *SystemUpsertOne {
	return u.Update(func(s *SystemUpsert) {
		s.ClearUpdateByUser()
	})
}

// SetCreateTime sets the "create_time" field.
func (u *SystemUpsertOne) SetCreateTime(v time.Time) *SystemUpsertOne {
	return u.Update(func(s *SystemUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *SystemUpsertOne) UpdateCreateTime() *SystemUpsertOne {
	return u.Update(func(s *SystemUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *SystemUpsertOne) SetUpdateTime(v time.Time) *SystemUpsertOne {
	return u.Update(func(s *SystemUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *SystemUpsertOne) UpdateUpdateTime() *SystemUpsertOne {
	return u.Update(func(s *SystemUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *SystemUpsertOne) ClearUpdateTime() *SystemUpsertOne {
	return u.Update(func(s *SystemUpsert) {
		s.ClearUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *SystemUpsertOne) SetName(v string) *SystemUpsertOne {
	return u.Update(func(s *SystemUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SystemUpsertOne) UpdateName() *SystemUpsertOne {
	return u.Update(func(s *SystemUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *SystemUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SystemUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SystemUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SystemCreateBulk is the builder for creating many System entities in bulk.
type SystemCreateBulk struct {
	config
	builders []*SystemCreate
	conflict []sql.ConflictOption
}

// Save creates the System entities in the database.
func (scb *SystemCreateBulk) Save(ctx context.Context) ([]*System, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*System, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SystemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SystemCreateBulk) SaveX(ctx context.Context) []*System {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SystemCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SystemCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.System.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemUpsert) {
//			SetCreateByUser(v+v).
//		}).
//		Exec(ctx)
//
func (scb *SystemCreateBulk) OnConflict(opts ...sql.ConflictOption) *SystemUpsertBulk {
	scb.conflict = opts
	return &SystemUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.System.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (scb *SystemCreateBulk) OnConflictColumns(columns ...string) *SystemUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SystemUpsertBulk{
		create: scb,
	}
}

// SystemUpsertBulk is the builder for "upsert"-ing
// a bulk of System nodes.
type SystemUpsertBulk struct {
	create *SystemCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.System.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *SystemUpsertBulk) UpdateNewValues() *SystemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.System.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *SystemUpsertBulk) Ignore() *SystemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemUpsertBulk) DoNothing() *SystemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemCreateBulk.OnConflict
// documentation for more info.
func (u *SystemUpsertBulk) Update(set func(*SystemUpsert)) *SystemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateByUser sets the "create_by_user" field.
func (u *SystemUpsertBulk) SetCreateByUser(v int) *SystemUpsertBulk {
	return u.Update(func(s *SystemUpsert) {
		s.SetCreateByUser(v)
	})
}

// UpdateCreateByUser sets the "create_by_user" field to the value that was provided on create.
func (u *SystemUpsertBulk) UpdateCreateByUser() *SystemUpsertBulk {
	return u.Update(func(s *SystemUpsert) {
		s.UpdateCreateByUser()
	})
}

// ClearCreateByUser clears the value of the "create_by_user" field.
func (u *SystemUpsertBulk) ClearCreateByUser() *SystemUpsertBulk {
	return u.Update(func(s *SystemUpsert) {
		s.ClearCreateByUser()
	})
}

// SetUpdateByUser sets the "update_by_user" field.
func (u *SystemUpsertBulk) SetUpdateByUser(v int) *SystemUpsertBulk {
	return u.Update(func(s *SystemUpsert) {
		s.SetUpdateByUser(v)
	})
}

// UpdateUpdateByUser sets the "update_by_user" field to the value that was provided on create.
func (u *SystemUpsertBulk) UpdateUpdateByUser() *SystemUpsertBulk {
	return u.Update(func(s *SystemUpsert) {
		s.UpdateUpdateByUser()
	})
}

// ClearUpdateByUser clears the value of the "update_by_user" field.
func (u *SystemUpsertBulk) ClearUpdateByUser() *SystemUpsertBulk {
	return u.Update(func(s *SystemUpsert) {
		s.ClearUpdateByUser()
	})
}

// SetCreateTime sets the "create_time" field.
func (u *SystemUpsertBulk) SetCreateTime(v time.Time) *SystemUpsertBulk {
	return u.Update(func(s *SystemUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *SystemUpsertBulk) UpdateCreateTime() *SystemUpsertBulk {
	return u.Update(func(s *SystemUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *SystemUpsertBulk) SetUpdateTime(v time.Time) *SystemUpsertBulk {
	return u.Update(func(s *SystemUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *SystemUpsertBulk) UpdateUpdateTime() *SystemUpsertBulk {
	return u.Update(func(s *SystemUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *SystemUpsertBulk) ClearUpdateTime() *SystemUpsertBulk {
	return u.Update(func(s *SystemUpsert) {
		s.ClearUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *SystemUpsertBulk) SetName(v string) *SystemUpsertBulk {
	return u.Update(func(s *SystemUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SystemUpsertBulk) UpdateName() *SystemUpsertBulk {
	return u.Update(func(s *SystemUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *SystemUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SystemCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
