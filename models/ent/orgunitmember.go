// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"wing/models/ent/orgunit"
	"wing/models/ent/orgunitmember"
	"wing/models/ent/orgunitposition"
	"wing/models/ent/user"

	"entgo.io/ent/dialect/sql"
)

// OrgUnitMember is the model entity for the OrgUnitMember schema.
type OrgUnitMember struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateByUser holds the value of the "create_by_user" field.
	CreateByUser int `json:"create_by_user,omitempty"`
	// UpdateByUser holds the value of the "update_by_user" field.
	UpdateByUser int `json:"update_by_user,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime *time.Time `json:"update_time,omitempty"`
	// IsAdditional holds the value of the "is_additional" field.
	IsAdditional bool `json:"is_additional,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// OrgUnitID holds the value of the "org_unit_id" field.
	OrgUnitID int `json:"org_unit_id,omitempty"`
	// OrgUnitPositionID holds the value of the "org_unit_position_id" field.
	OrgUnitPositionID int `json:"org_unit_position_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrgUnitMemberQuery when eager-loading is set.
	Edges OrgUnitMemberEdges `json:"edges"`
}

// OrgUnitMemberEdges holds the relations/edges for other nodes in the graph.
type OrgUnitMemberEdges struct {
	// CreateBy holds the value of the create_by edge.
	CreateBy *User `json:"create_by,omitempty"`
	// UpdateBy holds the value of the update_by edge.
	UpdateBy *User `json:"update_by,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Position holds the value of the position edge.
	Position *OrgUnitPosition `json:"position,omitempty"`
	// BelongToOrgUnit holds the value of the belongToOrgUnit edge.
	BelongToOrgUnit *OrgUnit `json:"belongToOrgUnit,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// CreateByOrErr returns the CreateBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrgUnitMemberEdges) CreateByOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.CreateBy == nil {
			// The edge create_by was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.CreateBy, nil
	}
	return nil, &NotLoadedError{edge: "create_by"}
}

// UpdateByOrErr returns the UpdateBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrgUnitMemberEdges) UpdateByOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.UpdateBy == nil {
			// The edge update_by was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.UpdateBy, nil
	}
	return nil, &NotLoadedError{edge: "update_by"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrgUnitMemberEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// PositionOrErr returns the Position value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrgUnitMemberEdges) PositionOrErr() (*OrgUnitPosition, error) {
	if e.loadedTypes[3] {
		if e.Position == nil {
			// The edge position was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: orgunitposition.Label}
		}
		return e.Position, nil
	}
	return nil, &NotLoadedError{edge: "position"}
}

// BelongToOrgUnitOrErr returns the BelongToOrgUnit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrgUnitMemberEdges) BelongToOrgUnitOrErr() (*OrgUnit, error) {
	if e.loadedTypes[4] {
		if e.BelongToOrgUnit == nil {
			// The edge belongToOrgUnit was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: orgunit.Label}
		}
		return e.BelongToOrgUnit, nil
	}
	return nil, &NotLoadedError{edge: "belongToOrgUnit"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrgUnitMember) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case orgunitmember.FieldIsAdditional:
			values[i] = new(sql.NullBool)
		case orgunitmember.FieldID, orgunitmember.FieldCreateByUser, orgunitmember.FieldUpdateByUser, orgunitmember.FieldUserID, orgunitmember.FieldOrgUnitID, orgunitmember.FieldOrgUnitPositionID:
			values[i] = new(sql.NullInt64)
		case orgunitmember.FieldCreateTime, orgunitmember.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrgUnitMember", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrgUnitMember fields.
func (oum *OrgUnitMember) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orgunitmember.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			oum.ID = int(value.Int64)
		case orgunitmember.FieldCreateByUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by_user", values[i])
			} else if value.Valid {
				oum.CreateByUser = int(value.Int64)
			}
		case orgunitmember.FieldUpdateByUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_by_user", values[i])
			} else if value.Valid {
				oum.UpdateByUser = int(value.Int64)
			}
		case orgunitmember.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				oum.CreateTime = value.Time
			}
		case orgunitmember.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				oum.UpdateTime = new(time.Time)
				*oum.UpdateTime = value.Time
			}
		case orgunitmember.FieldIsAdditional:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_additional", values[i])
			} else if value.Valid {
				oum.IsAdditional = value.Bool
			}
		case orgunitmember.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				oum.UserID = int(value.Int64)
			}
		case orgunitmember.FieldOrgUnitID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field org_unit_id", values[i])
			} else if value.Valid {
				oum.OrgUnitID = int(value.Int64)
			}
		case orgunitmember.FieldOrgUnitPositionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field org_unit_position_id", values[i])
			} else if value.Valid {
				oum.OrgUnitPositionID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCreateBy queries the "create_by" edge of the OrgUnitMember entity.
func (oum *OrgUnitMember) QueryCreateBy() *UserQuery {
	return (&OrgUnitMemberClient{config: oum.config}).QueryCreateBy(oum)
}

// QueryUpdateBy queries the "update_by" edge of the OrgUnitMember entity.
func (oum *OrgUnitMember) QueryUpdateBy() *UserQuery {
	return (&OrgUnitMemberClient{config: oum.config}).QueryUpdateBy(oum)
}

// QueryUser queries the "user" edge of the OrgUnitMember entity.
func (oum *OrgUnitMember) QueryUser() *UserQuery {
	return (&OrgUnitMemberClient{config: oum.config}).QueryUser(oum)
}

// QueryPosition queries the "position" edge of the OrgUnitMember entity.
func (oum *OrgUnitMember) QueryPosition() *OrgUnitPositionQuery {
	return (&OrgUnitMemberClient{config: oum.config}).QueryPosition(oum)
}

// QueryBelongToOrgUnit queries the "belongToOrgUnit" edge of the OrgUnitMember entity.
func (oum *OrgUnitMember) QueryBelongToOrgUnit() *OrgUnitQuery {
	return (&OrgUnitMemberClient{config: oum.config}).QueryBelongToOrgUnit(oum)
}

// Update returns a builder for updating this OrgUnitMember.
// Note that you need to call OrgUnitMember.Unwrap() before calling this method if this OrgUnitMember
// was returned from a transaction, and the transaction was committed or rolled back.
func (oum *OrgUnitMember) Update() *OrgUnitMemberUpdateOne {
	return (&OrgUnitMemberClient{config: oum.config}).UpdateOne(oum)
}

// Unwrap unwraps the OrgUnitMember entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oum *OrgUnitMember) Unwrap() *OrgUnitMember {
	tx, ok := oum.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrgUnitMember is not a transactional entity")
	}
	oum.config.driver = tx.drv
	return oum
}

// String implements the fmt.Stringer.
func (oum *OrgUnitMember) String() string {
	var builder strings.Builder
	builder.WriteString("OrgUnitMember(")
	builder.WriteString(fmt.Sprintf("id=%v", oum.ID))
	builder.WriteString(", create_by_user=")
	builder.WriteString(fmt.Sprintf("%v", oum.CreateByUser))
	builder.WriteString(", update_by_user=")
	builder.WriteString(fmt.Sprintf("%v", oum.UpdateByUser))
	builder.WriteString(", create_time=")
	builder.WriteString(oum.CreateTime.Format(time.ANSIC))
	if v := oum.UpdateTime; v != nil {
		builder.WriteString(", update_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", is_additional=")
	builder.WriteString(fmt.Sprintf("%v", oum.IsAdditional))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", oum.UserID))
	builder.WriteString(", org_unit_id=")
	builder.WriteString(fmt.Sprintf("%v", oum.OrgUnitID))
	builder.WriteString(", org_unit_position_id=")
	builder.WriteString(fmt.Sprintf("%v", oum.OrgUnitPositionID))
	builder.WriteByte(')')
	return builder.String()
}

// OrgUnitMembers is a parsable slice of OrgUnitMember.
type OrgUnitMembers []*OrgUnitMember

func (oum OrgUnitMembers) config(cfg config) {
	for _i := range oum {
		oum[_i].config = cfg
	}
}
