// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"
	"wing/models/ent/internal"
	"wing/models/ent/organization"
	"wing/models/ent/orgunit"
	"wing/models/ent/orgunitmember"
	"wing/models/ent/orgunitposition"
	"wing/models/ent/predicate"
	"wing/models/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrgUnitQuery is the builder for querying OrgUnit entities.
type OrgUnitQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.OrgUnit
	// eager-loading edges.
	withCreateBy    *UserQuery
	withUpdateBy    *UserQuery
	withMembers     *OrgUnitMemberQuery
	withPositions   *OrgUnitPositionQuery
	withSupUnit     *OrgUnitQuery
	withSubUnits    *OrgUnitQuery
	withBelongToOrg *OrganizationQuery
	withFKs         bool
	modifiers       []func(s *sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OrgUnitQuery builder.
func (ouq *OrgUnitQuery) Where(ps ...predicate.OrgUnit) *OrgUnitQuery {
	ouq.predicates = append(ouq.predicates, ps...)
	return ouq
}

// Limit adds a limit step to the query.
func (ouq *OrgUnitQuery) Limit(limit int) *OrgUnitQuery {
	ouq.limit = &limit
	return ouq
}

// Offset adds an offset step to the query.
func (ouq *OrgUnitQuery) Offset(offset int) *OrgUnitQuery {
	ouq.offset = &offset
	return ouq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ouq *OrgUnitQuery) Unique(unique bool) *OrgUnitQuery {
	ouq.unique = &unique
	return ouq
}

// Order adds an order step to the query.
func (ouq *OrgUnitQuery) Order(o ...OrderFunc) *OrgUnitQuery {
	ouq.order = append(ouq.order, o...)
	return ouq
}

// QueryCreateBy chains the current query on the "create_by" edge.
func (ouq *OrgUnitQuery) QueryCreateBy() *UserQuery {
	query := &UserQuery{config: ouq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ouq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ouq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orgunit.Table, orgunit.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, orgunit.CreateByTable, orgunit.CreateByColumn),
		)
		schemaConfig := ouq.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.OrgUnit
		fromU = sqlgraph.SetNeighbors(ouq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUpdateBy chains the current query on the "update_by" edge.
func (ouq *OrgUnitQuery) QueryUpdateBy() *UserQuery {
	query := &UserQuery{config: ouq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ouq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ouq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orgunit.Table, orgunit.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, orgunit.UpdateByTable, orgunit.UpdateByColumn),
		)
		schemaConfig := ouq.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.OrgUnit
		fromU = sqlgraph.SetNeighbors(ouq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMembers chains the current query on the "members" edge.
func (ouq *OrgUnitQuery) QueryMembers() *OrgUnitMemberQuery {
	query := &OrgUnitMemberQuery{config: ouq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ouq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ouq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orgunit.Table, orgunit.FieldID, selector),
			sqlgraph.To(orgunitmember.Table, orgunitmember.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orgunit.MembersTable, orgunit.MembersColumn),
		)
		schemaConfig := ouq.schemaConfig
		step.To.Schema = schemaConfig.OrgUnitMember
		step.Edge.Schema = schemaConfig.OrgUnitMember
		fromU = sqlgraph.SetNeighbors(ouq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPositions chains the current query on the "positions" edge.
func (ouq *OrgUnitQuery) QueryPositions() *OrgUnitPositionQuery {
	query := &OrgUnitPositionQuery{config: ouq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ouq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ouq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orgunit.Table, orgunit.FieldID, selector),
			sqlgraph.To(orgunitposition.Table, orgunitposition.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orgunit.PositionsTable, orgunit.PositionsColumn),
		)
		schemaConfig := ouq.schemaConfig
		step.To.Schema = schemaConfig.OrgUnitPosition
		step.Edge.Schema = schemaConfig.OrgUnitPosition
		fromU = sqlgraph.SetNeighbors(ouq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySupUnit chains the current query on the "supUnit" edge.
func (ouq *OrgUnitQuery) QuerySupUnit() *OrgUnitQuery {
	query := &OrgUnitQuery{config: ouq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ouq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ouq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orgunit.Table, orgunit.FieldID, selector),
			sqlgraph.To(orgunit.Table, orgunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orgunit.SupUnitTable, orgunit.SupUnitColumn),
		)
		schemaConfig := ouq.schemaConfig
		step.To.Schema = schemaConfig.OrgUnit
		step.Edge.Schema = schemaConfig.OrgUnit
		fromU = sqlgraph.SetNeighbors(ouq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubUnits chains the current query on the "subUnits" edge.
func (ouq *OrgUnitQuery) QuerySubUnits() *OrgUnitQuery {
	query := &OrgUnitQuery{config: ouq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ouq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ouq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orgunit.Table, orgunit.FieldID, selector),
			sqlgraph.To(orgunit.Table, orgunit.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orgunit.SubUnitsTable, orgunit.SubUnitsColumn),
		)
		schemaConfig := ouq.schemaConfig
		step.To.Schema = schemaConfig.OrgUnit
		step.Edge.Schema = schemaConfig.OrgUnit
		fromU = sqlgraph.SetNeighbors(ouq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBelongToOrg chains the current query on the "belongToOrg" edge.
func (ouq *OrgUnitQuery) QueryBelongToOrg() *OrganizationQuery {
	query := &OrganizationQuery{config: ouq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ouq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ouq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orgunit.Table, orgunit.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orgunit.BelongToOrgTable, orgunit.BelongToOrgColumn),
		)
		schemaConfig := ouq.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.OrgUnit
		fromU = sqlgraph.SetNeighbors(ouq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OrgUnit entity from the query.
// Returns a *NotFoundError when no OrgUnit was found.
func (ouq *OrgUnitQuery) First(ctx context.Context) (*OrgUnit, error) {
	nodes, err := ouq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{orgunit.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ouq *OrgUnitQuery) FirstX(ctx context.Context) *OrgUnit {
	node, err := ouq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OrgUnit ID from the query.
// Returns a *NotFoundError when no OrgUnit ID was found.
func (ouq *OrgUnitQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ouq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{orgunit.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ouq *OrgUnitQuery) FirstIDX(ctx context.Context) int {
	id, err := ouq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OrgUnit entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one OrgUnit entity is not found.
// Returns a *NotFoundError when no OrgUnit entities are found.
func (ouq *OrgUnitQuery) Only(ctx context.Context) (*OrgUnit, error) {
	nodes, err := ouq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{orgunit.Label}
	default:
		return nil, &NotSingularError{orgunit.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ouq *OrgUnitQuery) OnlyX(ctx context.Context) *OrgUnit {
	node, err := ouq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OrgUnit ID in the query.
// Returns a *NotSingularError when exactly one OrgUnit ID is not found.
// Returns a *NotFoundError when no entities are found.
func (ouq *OrgUnitQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ouq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{orgunit.Label}
	default:
		err = &NotSingularError{orgunit.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ouq *OrgUnitQuery) OnlyIDX(ctx context.Context) int {
	id, err := ouq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OrgUnits.
func (ouq *OrgUnitQuery) All(ctx context.Context) ([]*OrgUnit, error) {
	if err := ouq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ouq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ouq *OrgUnitQuery) AllX(ctx context.Context) []*OrgUnit {
	nodes, err := ouq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OrgUnit IDs.
func (ouq *OrgUnitQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := ouq.Select(orgunit.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ouq *OrgUnitQuery) IDsX(ctx context.Context) []int {
	ids, err := ouq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ouq *OrgUnitQuery) Count(ctx context.Context) (int, error) {
	if err := ouq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ouq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ouq *OrgUnitQuery) CountX(ctx context.Context) int {
	count, err := ouq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ouq *OrgUnitQuery) Exist(ctx context.Context) (bool, error) {
	if err := ouq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ouq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ouq *OrgUnitQuery) ExistX(ctx context.Context) bool {
	exist, err := ouq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OrgUnitQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ouq *OrgUnitQuery) Clone() *OrgUnitQuery {
	if ouq == nil {
		return nil
	}
	return &OrgUnitQuery{
		config:          ouq.config,
		limit:           ouq.limit,
		offset:          ouq.offset,
		order:           append([]OrderFunc{}, ouq.order...),
		predicates:      append([]predicate.OrgUnit{}, ouq.predicates...),
		withCreateBy:    ouq.withCreateBy.Clone(),
		withUpdateBy:    ouq.withUpdateBy.Clone(),
		withMembers:     ouq.withMembers.Clone(),
		withPositions:   ouq.withPositions.Clone(),
		withSupUnit:     ouq.withSupUnit.Clone(),
		withSubUnits:    ouq.withSubUnits.Clone(),
		withBelongToOrg: ouq.withBelongToOrg.Clone(),
		// clone intermediate query.
		sql:  ouq.sql.Clone(),
		path: ouq.path,
	}
}

// WithCreateBy tells the query-builder to eager-load the nodes that are connected to
// the "create_by" edge. The optional arguments are used to configure the query builder of the edge.
func (ouq *OrgUnitQuery) WithCreateBy(opts ...func(*UserQuery)) *OrgUnitQuery {
	query := &UserQuery{config: ouq.config}
	for _, opt := range opts {
		opt(query)
	}
	ouq.withCreateBy = query
	return ouq
}

// WithUpdateBy tells the query-builder to eager-load the nodes that are connected to
// the "update_by" edge. The optional arguments are used to configure the query builder of the edge.
func (ouq *OrgUnitQuery) WithUpdateBy(opts ...func(*UserQuery)) *OrgUnitQuery {
	query := &UserQuery{config: ouq.config}
	for _, opt := range opts {
		opt(query)
	}
	ouq.withUpdateBy = query
	return ouq
}

// WithMembers tells the query-builder to eager-load the nodes that are connected to
// the "members" edge. The optional arguments are used to configure the query builder of the edge.
func (ouq *OrgUnitQuery) WithMembers(opts ...func(*OrgUnitMemberQuery)) *OrgUnitQuery {
	query := &OrgUnitMemberQuery{config: ouq.config}
	for _, opt := range opts {
		opt(query)
	}
	ouq.withMembers = query
	return ouq
}

// WithPositions tells the query-builder to eager-load the nodes that are connected to
// the "positions" edge. The optional arguments are used to configure the query builder of the edge.
func (ouq *OrgUnitQuery) WithPositions(opts ...func(*OrgUnitPositionQuery)) *OrgUnitQuery {
	query := &OrgUnitPositionQuery{config: ouq.config}
	for _, opt := range opts {
		opt(query)
	}
	ouq.withPositions = query
	return ouq
}

// WithSupUnit tells the query-builder to eager-load the nodes that are connected to
// the "supUnit" edge. The optional arguments are used to configure the query builder of the edge.
func (ouq *OrgUnitQuery) WithSupUnit(opts ...func(*OrgUnitQuery)) *OrgUnitQuery {
	query := &OrgUnitQuery{config: ouq.config}
	for _, opt := range opts {
		opt(query)
	}
	ouq.withSupUnit = query
	return ouq
}

// WithSubUnits tells the query-builder to eager-load the nodes that are connected to
// the "subUnits" edge. The optional arguments are used to configure the query builder of the edge.
func (ouq *OrgUnitQuery) WithSubUnits(opts ...func(*OrgUnitQuery)) *OrgUnitQuery {
	query := &OrgUnitQuery{config: ouq.config}
	for _, opt := range opts {
		opt(query)
	}
	ouq.withSubUnits = query
	return ouq
}

// WithBelongToOrg tells the query-builder to eager-load the nodes that are connected to
// the "belongToOrg" edge. The optional arguments are used to configure the query builder of the edge.
func (ouq *OrgUnitQuery) WithBelongToOrg(opts ...func(*OrganizationQuery)) *OrgUnitQuery {
	query := &OrganizationQuery{config: ouq.config}
	for _, opt := range opts {
		opt(query)
	}
	ouq.withBelongToOrg = query
	return ouq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateByUser int `json:"create_by_user,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OrgUnit.Query().
//		GroupBy(orgunit.FieldCreateByUser).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (ouq *OrgUnitQuery) GroupBy(field string, fields ...string) *OrgUnitGroupBy {
	group := &OrgUnitGroupBy{config: ouq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ouq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ouq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateByUser int `json:"create_by_user,omitempty"`
//	}
//
//	client.OrgUnit.Query().
//		Select(orgunit.FieldCreateByUser).
//		Scan(ctx, &v)
//
func (ouq *OrgUnitQuery) Select(fields ...string) *OrgUnitSelect {
	ouq.fields = append(ouq.fields, fields...)
	return &OrgUnitSelect{OrgUnitQuery: ouq}
}

func (ouq *OrgUnitQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ouq.fields {
		if !orgunit.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ouq.path != nil {
		prev, err := ouq.path(ctx)
		if err != nil {
			return err
		}
		ouq.sql = prev
	}
	return nil
}

func (ouq *OrgUnitQuery) sqlAll(ctx context.Context) ([]*OrgUnit, error) {
	var (
		nodes       = []*OrgUnit{}
		withFKs     = ouq.withFKs
		_spec       = ouq.querySpec()
		loadedTypes = [7]bool{
			ouq.withCreateBy != nil,
			ouq.withUpdateBy != nil,
			ouq.withMembers != nil,
			ouq.withPositions != nil,
			ouq.withSupUnit != nil,
			ouq.withSubUnits != nil,
			ouq.withBelongToOrg != nil,
		}
	)
	if ouq.withCreateBy != nil || ouq.withUpdateBy != nil || ouq.withSupUnit != nil || ouq.withBelongToOrg != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, orgunit.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &OrgUnit{config: ouq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ouq.modifiers) > 0 {
		_spec.Modifiers = ouq.modifiers
	}
	_spec.Node.Schema = ouq.schemaConfig.OrgUnit
	ctx = internal.NewSchemaConfigContext(ctx, ouq.schemaConfig)
	if err := sqlgraph.QueryNodes(ctx, ouq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := ouq.withCreateBy; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*OrgUnit)
		for i := range nodes {
			fk := nodes[i].CreateByUser
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(user.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "create_by_user" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.CreateBy = n
			}
		}
	}

	if query := ouq.withUpdateBy; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*OrgUnit)
		for i := range nodes {
			fk := nodes[i].UpdateByUser
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(user.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "update_by_user" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.UpdateBy = n
			}
		}
	}

	if query := ouq.withMembers; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*OrgUnit)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Members = []*OrgUnitMember{}
		}
		query.Where(predicate.OrgUnitMember(func(s *sql.Selector) {
			s.Where(sql.InValues(orgunit.MembersColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.OrgUnitID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "org_unit_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.Members = append(node.Edges.Members, n)
		}
	}

	if query := ouq.withPositions; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*OrgUnit)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Positions = []*OrgUnitPosition{}
		}
		query.Where(predicate.OrgUnitPosition(func(s *sql.Selector) {
			s.Where(sql.InValues(orgunit.PositionsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.OrgUnitID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "org_unit_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.Positions = append(node.Edges.Positions, n)
		}
	}

	if query := ouq.withSupUnit; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*OrgUnit)
		for i := range nodes {
			if nodes[i].org_unit_sub_units == nil {
				continue
			}
			fk := *nodes[i].org_unit_sub_units
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(orgunit.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "org_unit_sub_units" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.SupUnit = n
			}
		}
	}

	if query := ouq.withSubUnits; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*OrgUnit)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.SubUnits = []*OrgUnit{}
		}
		query.withFKs = true
		query.Where(predicate.OrgUnit(func(s *sql.Selector) {
			s.Where(sql.InValues(orgunit.SubUnitsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.org_unit_sub_units
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "org_unit_sub_units" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "org_unit_sub_units" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.SubUnits = append(node.Edges.SubUnits, n)
		}
	}

	if query := ouq.withBelongToOrg; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*OrgUnit)
		for i := range nodes {
			if nodes[i].organization_units == nil {
				continue
			}
			fk := *nodes[i].organization_units
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(organization.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "organization_units" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.BelongToOrg = n
			}
		}
	}

	return nodes, nil
}

func (ouq *OrgUnitQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ouq.querySpec()
	if len(ouq.modifiers) > 0 {
		_spec.Modifiers = ouq.modifiers
	}
	_spec.Node.Schema = ouq.schemaConfig.OrgUnit
	ctx = internal.NewSchemaConfigContext(ctx, ouq.schemaConfig)
	return sqlgraph.CountNodes(ctx, ouq.driver, _spec)
}

func (ouq *OrgUnitQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := ouq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (ouq *OrgUnitQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orgunit.Table,
			Columns: orgunit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orgunit.FieldID,
			},
		},
		From:   ouq.sql,
		Unique: true,
	}
	if unique := ouq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := ouq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orgunit.FieldID)
		for i := range fields {
			if fields[i] != orgunit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ouq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ouq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ouq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ouq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ouq *OrgUnitQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ouq.driver.Dialect())
	t1 := builder.Table(orgunit.Table)
	columns := ouq.fields
	if len(columns) == 0 {
		columns = orgunit.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ouq.sql != nil {
		selector = ouq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, m := range ouq.modifiers {
		m(selector)
	}
	t1.Schema(ouq.schemaConfig.OrgUnit)
	ctx = internal.NewSchemaConfigContext(ctx, ouq.schemaConfig)
	selector.WithContext(ctx)
	for _, p := range ouq.predicates {
		p(selector)
	}
	for _, p := range ouq.order {
		p(selector)
	}
	if offset := ouq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ouq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (ouq *OrgUnitQuery) ForUpdate(opts ...sql.LockOption) *OrgUnitQuery {
	if ouq.driver.Dialect() == dialect.Postgres {
		ouq.Unique(false)
	}
	ouq.modifiers = append(ouq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return ouq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (ouq *OrgUnitQuery) ForShare(opts ...sql.LockOption) *OrgUnitQuery {
	if ouq.driver.Dialect() == dialect.Postgres {
		ouq.Unique(false)
	}
	ouq.modifiers = append(ouq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return ouq
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ouq *OrgUnitQuery) Modify(modifiers ...func(s *sql.Selector)) *OrgUnitSelect {
	ouq.modifiers = append(ouq.modifiers, modifiers...)
	return ouq.Select()
}

// OrgUnitGroupBy is the group-by builder for OrgUnit entities.
type OrgUnitGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ougb *OrgUnitGroupBy) Aggregate(fns ...AggregateFunc) *OrgUnitGroupBy {
	ougb.fns = append(ougb.fns, fns...)
	return ougb
}

// Scan applies the group-by query and scans the result into the given value.
func (ougb *OrgUnitGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ougb.path(ctx)
	if err != nil {
		return err
	}
	ougb.sql = query
	return ougb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ougb *OrgUnitGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := ougb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (ougb *OrgUnitGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(ougb.fields) > 1 {
		return nil, errors.New("ent: OrgUnitGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := ougb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ougb *OrgUnitGroupBy) StringsX(ctx context.Context) []string {
	v, err := ougb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ougb *OrgUnitGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ougb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orgunit.Label}
	default:
		err = fmt.Errorf("ent: OrgUnitGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ougb *OrgUnitGroupBy) StringX(ctx context.Context) string {
	v, err := ougb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (ougb *OrgUnitGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(ougb.fields) > 1 {
		return nil, errors.New("ent: OrgUnitGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := ougb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ougb *OrgUnitGroupBy) IntsX(ctx context.Context) []int {
	v, err := ougb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ougb *OrgUnitGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ougb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orgunit.Label}
	default:
		err = fmt.Errorf("ent: OrgUnitGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ougb *OrgUnitGroupBy) IntX(ctx context.Context) int {
	v, err := ougb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (ougb *OrgUnitGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(ougb.fields) > 1 {
		return nil, errors.New("ent: OrgUnitGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := ougb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ougb *OrgUnitGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := ougb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ougb *OrgUnitGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ougb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orgunit.Label}
	default:
		err = fmt.Errorf("ent: OrgUnitGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ougb *OrgUnitGroupBy) Float64X(ctx context.Context) float64 {
	v, err := ougb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (ougb *OrgUnitGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(ougb.fields) > 1 {
		return nil, errors.New("ent: OrgUnitGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := ougb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ougb *OrgUnitGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := ougb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ougb *OrgUnitGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ougb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orgunit.Label}
	default:
		err = fmt.Errorf("ent: OrgUnitGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ougb *OrgUnitGroupBy) BoolX(ctx context.Context) bool {
	v, err := ougb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ougb *OrgUnitGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range ougb.fields {
		if !orgunit.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ougb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ougb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ougb *OrgUnitGroupBy) sqlQuery() *sql.Selector {
	selector := ougb.sql.Select()
	aggregation := make([]string, 0, len(ougb.fns))
	for _, fn := range ougb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(ougb.fields)+len(ougb.fns))
		for _, f := range ougb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(ougb.fields...)...)
}

// OrgUnitSelect is the builder for selecting fields of OrgUnit entities.
type OrgUnitSelect struct {
	*OrgUnitQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ous *OrgUnitSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ous.prepareQuery(ctx); err != nil {
		return err
	}
	ous.sql = ous.OrgUnitQuery.sqlQuery(ctx)
	return ous.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ous *OrgUnitSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ous.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (ous *OrgUnitSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ous.fields) > 1 {
		return nil, errors.New("ent: OrgUnitSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ous.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ous *OrgUnitSelect) StringsX(ctx context.Context) []string {
	v, err := ous.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (ous *OrgUnitSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ous.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orgunit.Label}
	default:
		err = fmt.Errorf("ent: OrgUnitSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ous *OrgUnitSelect) StringX(ctx context.Context) string {
	v, err := ous.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (ous *OrgUnitSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ous.fields) > 1 {
		return nil, errors.New("ent: OrgUnitSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ous.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ous *OrgUnitSelect) IntsX(ctx context.Context) []int {
	v, err := ous.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (ous *OrgUnitSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ous.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orgunit.Label}
	default:
		err = fmt.Errorf("ent: OrgUnitSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ous *OrgUnitSelect) IntX(ctx context.Context) int {
	v, err := ous.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (ous *OrgUnitSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ous.fields) > 1 {
		return nil, errors.New("ent: OrgUnitSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ous.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ous *OrgUnitSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ous.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (ous *OrgUnitSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ous.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orgunit.Label}
	default:
		err = fmt.Errorf("ent: OrgUnitSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ous *OrgUnitSelect) Float64X(ctx context.Context) float64 {
	v, err := ous.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (ous *OrgUnitSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ous.fields) > 1 {
		return nil, errors.New("ent: OrgUnitSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ous.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ous *OrgUnitSelect) BoolsX(ctx context.Context) []bool {
	v, err := ous.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (ous *OrgUnitSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ous.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orgunit.Label}
	default:
		err = fmt.Errorf("ent: OrgUnitSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ous *OrgUnitSelect) BoolX(ctx context.Context) bool {
	v, err := ous.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ous *OrgUnitSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ous.sql.Query()
	if err := ous.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ous *OrgUnitSelect) Modify(modifiers ...func(s *sql.Selector)) *OrgUnitSelect {
	ous.modifiers = append(ous.modifiers, modifiers...)
	return ous
}
