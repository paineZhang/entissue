// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wing/models/ent/internal"
	"wing/models/ent/organization"
	"wing/models/ent/orgunit"
	"wing/models/ent/orgunitmember"
	"wing/models/ent/orgunitposition"
	"wing/models/ent/predicate"
	"wing/models/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrgUnitUpdate is the builder for updating OrgUnit entities.
type OrgUnitUpdate struct {
	config
	hooks    []Hook
	mutation *OrgUnitMutation
}

// Where appends a list predicates to the OrgUnitUpdate builder.
func (ouu *OrgUnitUpdate) Where(ps ...predicate.OrgUnit) *OrgUnitUpdate {
	ouu.mutation.Where(ps...)
	return ouu
}

// SetCreateByUser sets the "create_by_user" field.
func (ouu *OrgUnitUpdate) SetCreateByUser(i int) *OrgUnitUpdate {
	ouu.mutation.SetCreateByUser(i)
	return ouu
}

// SetNillableCreateByUser sets the "create_by_user" field if the given value is not nil.
func (ouu *OrgUnitUpdate) SetNillableCreateByUser(i *int) *OrgUnitUpdate {
	if i != nil {
		ouu.SetCreateByUser(*i)
	}
	return ouu
}

// ClearCreateByUser clears the value of the "create_by_user" field.
func (ouu *OrgUnitUpdate) ClearCreateByUser() *OrgUnitUpdate {
	ouu.mutation.ClearCreateByUser()
	return ouu
}

// SetUpdateByUser sets the "update_by_user" field.
func (ouu *OrgUnitUpdate) SetUpdateByUser(i int) *OrgUnitUpdate {
	ouu.mutation.SetUpdateByUser(i)
	return ouu
}

// SetNillableUpdateByUser sets the "update_by_user" field if the given value is not nil.
func (ouu *OrgUnitUpdate) SetNillableUpdateByUser(i *int) *OrgUnitUpdate {
	if i != nil {
		ouu.SetUpdateByUser(*i)
	}
	return ouu
}

// ClearUpdateByUser clears the value of the "update_by_user" field.
func (ouu *OrgUnitUpdate) ClearUpdateByUser() *OrgUnitUpdate {
	ouu.mutation.ClearUpdateByUser()
	return ouu
}

// SetUpdateTime sets the "update_time" field.
func (ouu *OrgUnitUpdate) SetUpdateTime(t time.Time) *OrgUnitUpdate {
	ouu.mutation.SetUpdateTime(t)
	return ouu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (ouu *OrgUnitUpdate) ClearUpdateTime() *OrgUnitUpdate {
	ouu.mutation.ClearUpdateTime()
	return ouu
}

// SetName sets the "name" field.
func (ouu *OrgUnitUpdate) SetName(s string) *OrgUnitUpdate {
	ouu.mutation.SetName(s)
	return ouu
}

// SetDuty sets the "duty" field.
func (ouu *OrgUnitUpdate) SetDuty(s string) *OrgUnitUpdate {
	ouu.mutation.SetDuty(s)
	return ouu
}

// SetNillableDuty sets the "duty" field if the given value is not nil.
func (ouu *OrgUnitUpdate) SetNillableDuty(s *string) *OrgUnitUpdate {
	if s != nil {
		ouu.SetDuty(*s)
	}
	return ouu
}

// ClearDuty clears the value of the "duty" field.
func (ouu *OrgUnitUpdate) ClearDuty() *OrgUnitUpdate {
	ouu.mutation.ClearDuty()
	return ouu
}

// SetCreateByID sets the "create_by" edge to the User entity by ID.
func (ouu *OrgUnitUpdate) SetCreateByID(id int) *OrgUnitUpdate {
	ouu.mutation.SetCreateByID(id)
	return ouu
}

// SetNillableCreateByID sets the "create_by" edge to the User entity by ID if the given value is not nil.
func (ouu *OrgUnitUpdate) SetNillableCreateByID(id *int) *OrgUnitUpdate {
	if id != nil {
		ouu = ouu.SetCreateByID(*id)
	}
	return ouu
}

// SetCreateBy sets the "create_by" edge to the User entity.
func (ouu *OrgUnitUpdate) SetCreateBy(u *User) *OrgUnitUpdate {
	return ouu.SetCreateByID(u.ID)
}

// SetUpdateByID sets the "update_by" edge to the User entity by ID.
func (ouu *OrgUnitUpdate) SetUpdateByID(id int) *OrgUnitUpdate {
	ouu.mutation.SetUpdateByID(id)
	return ouu
}

// SetNillableUpdateByID sets the "update_by" edge to the User entity by ID if the given value is not nil.
func (ouu *OrgUnitUpdate) SetNillableUpdateByID(id *int) *OrgUnitUpdate {
	if id != nil {
		ouu = ouu.SetUpdateByID(*id)
	}
	return ouu
}

// SetUpdateBy sets the "update_by" edge to the User entity.
func (ouu *OrgUnitUpdate) SetUpdateBy(u *User) *OrgUnitUpdate {
	return ouu.SetUpdateByID(u.ID)
}

// AddMemberIDs adds the "members" edge to the OrgUnitMember entity by IDs.
func (ouu *OrgUnitUpdate) AddMemberIDs(ids ...int) *OrgUnitUpdate {
	ouu.mutation.AddMemberIDs(ids...)
	return ouu
}

// AddMembers adds the "members" edges to the OrgUnitMember entity.
func (ouu *OrgUnitUpdate) AddMembers(o ...*OrgUnitMember) *OrgUnitUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouu.AddMemberIDs(ids...)
}

// AddPositionIDs adds the "positions" edge to the OrgUnitPosition entity by IDs.
func (ouu *OrgUnitUpdate) AddPositionIDs(ids ...int) *OrgUnitUpdate {
	ouu.mutation.AddPositionIDs(ids...)
	return ouu
}

// AddPositions adds the "positions" edges to the OrgUnitPosition entity.
func (ouu *OrgUnitUpdate) AddPositions(o ...*OrgUnitPosition) *OrgUnitUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouu.AddPositionIDs(ids...)
}

// SetSupUnitID sets the "supUnit" edge to the OrgUnit entity by ID.
func (ouu *OrgUnitUpdate) SetSupUnitID(id int) *OrgUnitUpdate {
	ouu.mutation.SetSupUnitID(id)
	return ouu
}

// SetNillableSupUnitID sets the "supUnit" edge to the OrgUnit entity by ID if the given value is not nil.
func (ouu *OrgUnitUpdate) SetNillableSupUnitID(id *int) *OrgUnitUpdate {
	if id != nil {
		ouu = ouu.SetSupUnitID(*id)
	}
	return ouu
}

// SetSupUnit sets the "supUnit" edge to the OrgUnit entity.
func (ouu *OrgUnitUpdate) SetSupUnit(o *OrgUnit) *OrgUnitUpdate {
	return ouu.SetSupUnitID(o.ID)
}

// AddSubUnitIDs adds the "subUnits" edge to the OrgUnit entity by IDs.
func (ouu *OrgUnitUpdate) AddSubUnitIDs(ids ...int) *OrgUnitUpdate {
	ouu.mutation.AddSubUnitIDs(ids...)
	return ouu
}

// AddSubUnits adds the "subUnits" edges to the OrgUnit entity.
func (ouu *OrgUnitUpdate) AddSubUnits(o ...*OrgUnit) *OrgUnitUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouu.AddSubUnitIDs(ids...)
}

// SetBelongToOrgID sets the "belongToOrg" edge to the Organization entity by ID.
func (ouu *OrgUnitUpdate) SetBelongToOrgID(id int) *OrgUnitUpdate {
	ouu.mutation.SetBelongToOrgID(id)
	return ouu
}

// SetBelongToOrg sets the "belongToOrg" edge to the Organization entity.
func (ouu *OrgUnitUpdate) SetBelongToOrg(o *Organization) *OrgUnitUpdate {
	return ouu.SetBelongToOrgID(o.ID)
}

// Mutation returns the OrgUnitMutation object of the builder.
func (ouu *OrgUnitUpdate) Mutation() *OrgUnitMutation {
	return ouu.mutation
}

// ClearCreateBy clears the "create_by" edge to the User entity.
func (ouu *OrgUnitUpdate) ClearCreateBy() *OrgUnitUpdate {
	ouu.mutation.ClearCreateBy()
	return ouu
}

// ClearUpdateBy clears the "update_by" edge to the User entity.
func (ouu *OrgUnitUpdate) ClearUpdateBy() *OrgUnitUpdate {
	ouu.mutation.ClearUpdateBy()
	return ouu
}

// ClearMembers clears all "members" edges to the OrgUnitMember entity.
func (ouu *OrgUnitUpdate) ClearMembers() *OrgUnitUpdate {
	ouu.mutation.ClearMembers()
	return ouu
}

// RemoveMemberIDs removes the "members" edge to OrgUnitMember entities by IDs.
func (ouu *OrgUnitUpdate) RemoveMemberIDs(ids ...int) *OrgUnitUpdate {
	ouu.mutation.RemoveMemberIDs(ids...)
	return ouu
}

// RemoveMembers removes "members" edges to OrgUnitMember entities.
func (ouu *OrgUnitUpdate) RemoveMembers(o ...*OrgUnitMember) *OrgUnitUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouu.RemoveMemberIDs(ids...)
}

// ClearPositions clears all "positions" edges to the OrgUnitPosition entity.
func (ouu *OrgUnitUpdate) ClearPositions() *OrgUnitUpdate {
	ouu.mutation.ClearPositions()
	return ouu
}

// RemovePositionIDs removes the "positions" edge to OrgUnitPosition entities by IDs.
func (ouu *OrgUnitUpdate) RemovePositionIDs(ids ...int) *OrgUnitUpdate {
	ouu.mutation.RemovePositionIDs(ids...)
	return ouu
}

// RemovePositions removes "positions" edges to OrgUnitPosition entities.
func (ouu *OrgUnitUpdate) RemovePositions(o ...*OrgUnitPosition) *OrgUnitUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouu.RemovePositionIDs(ids...)
}

// ClearSupUnit clears the "supUnit" edge to the OrgUnit entity.
func (ouu *OrgUnitUpdate) ClearSupUnit() *OrgUnitUpdate {
	ouu.mutation.ClearSupUnit()
	return ouu
}

// ClearSubUnits clears all "subUnits" edges to the OrgUnit entity.
func (ouu *OrgUnitUpdate) ClearSubUnits() *OrgUnitUpdate {
	ouu.mutation.ClearSubUnits()
	return ouu
}

// RemoveSubUnitIDs removes the "subUnits" edge to OrgUnit entities by IDs.
func (ouu *OrgUnitUpdate) RemoveSubUnitIDs(ids ...int) *OrgUnitUpdate {
	ouu.mutation.RemoveSubUnitIDs(ids...)
	return ouu
}

// RemoveSubUnits removes "subUnits" edges to OrgUnit entities.
func (ouu *OrgUnitUpdate) RemoveSubUnits(o ...*OrgUnit) *OrgUnitUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouu.RemoveSubUnitIDs(ids...)
}

// ClearBelongToOrg clears the "belongToOrg" edge to the Organization entity.
func (ouu *OrgUnitUpdate) ClearBelongToOrg() *OrgUnitUpdate {
	ouu.mutation.ClearBelongToOrg()
	return ouu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ouu *OrgUnitUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := ouu.defaults(); err != nil {
		return 0, err
	}
	if len(ouu.hooks) == 0 {
		if err = ouu.check(); err != nil {
			return 0, err
		}
		affected, err = ouu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrgUnitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ouu.check(); err != nil {
				return 0, err
			}
			ouu.mutation = mutation
			affected, err = ouu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ouu.hooks) - 1; i >= 0; i-- {
			if ouu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ouu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ouu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ouu *OrgUnitUpdate) SaveX(ctx context.Context) int {
	affected, err := ouu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ouu *OrgUnitUpdate) Exec(ctx context.Context) error {
	_, err := ouu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouu *OrgUnitUpdate) ExecX(ctx context.Context) {
	if err := ouu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouu *OrgUnitUpdate) defaults() error {
	if _, ok := ouu.mutation.UpdateTime(); !ok && !ouu.mutation.UpdateTimeCleared() {
		if orgunit.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized orgunit.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := orgunit.UpdateDefaultUpdateTime()
		ouu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ouu *OrgUnitUpdate) check() error {
	if _, ok := ouu.mutation.BelongToOrgID(); ouu.mutation.BelongToOrgCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"belongToOrg\"")
	}
	return nil
}

func (ouu *OrgUnitUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orgunit.Table,
			Columns: orgunit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orgunit.FieldID,
			},
		},
	}
	if ps := ouu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orgunit.FieldUpdateTime,
		})
	}
	if ouu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orgunit.FieldUpdateTime,
		})
	}
	if value, ok := ouu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orgunit.FieldName,
		})
	}
	if value, ok := ouu.mutation.Duty(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orgunit.FieldDuty,
		})
	}
	if ouu.mutation.DutyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orgunit.FieldDuty,
		})
	}
	if ouu.mutation.CreateByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunit.CreateByTable,
			Columns: []string{orgunit.CreateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = ouu.schemaConfig.OrgUnit
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouu.mutation.CreateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunit.CreateByTable,
			Columns: []string{orgunit.CreateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = ouu.schemaConfig.OrgUnit
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouu.mutation.UpdateByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunit.UpdateByTable,
			Columns: []string{orgunit.UpdateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = ouu.schemaConfig.OrgUnit
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouu.mutation.UpdateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunit.UpdateByTable,
			Columns: []string{orgunit.UpdateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = ouu.schemaConfig.OrgUnit
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgunit.MembersTable,
			Columns: []string{orgunit.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunitmember.FieldID,
				},
			},
		}
		edge.Schema = ouu.schemaConfig.OrgUnitMember
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouu.mutation.RemovedMembersIDs(); len(nodes) > 0 && !ouu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgunit.MembersTable,
			Columns: []string{orgunit.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunitmember.FieldID,
				},
			},
		}
		edge.Schema = ouu.schemaConfig.OrgUnitMember
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouu.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgunit.MembersTable,
			Columns: []string{orgunit.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunitmember.FieldID,
				},
			},
		}
		edge.Schema = ouu.schemaConfig.OrgUnitMember
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouu.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgunit.PositionsTable,
			Columns: []string{orgunit.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunitposition.FieldID,
				},
			},
		}
		edge.Schema = ouu.schemaConfig.OrgUnitPosition
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouu.mutation.RemovedPositionsIDs(); len(nodes) > 0 && !ouu.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgunit.PositionsTable,
			Columns: []string{orgunit.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunitposition.FieldID,
				},
			},
		}
		edge.Schema = ouu.schemaConfig.OrgUnitPosition
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouu.mutation.PositionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgunit.PositionsTable,
			Columns: []string{orgunit.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunitposition.FieldID,
				},
			},
		}
		edge.Schema = ouu.schemaConfig.OrgUnitPosition
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouu.mutation.SupUnitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgunit.SupUnitTable,
			Columns: []string{orgunit.SupUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunit.FieldID,
				},
			},
		}
		edge.Schema = ouu.schemaConfig.OrgUnit
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouu.mutation.SupUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgunit.SupUnitTable,
			Columns: []string{orgunit.SupUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunit.FieldID,
				},
			},
		}
		edge.Schema = ouu.schemaConfig.OrgUnit
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouu.mutation.SubUnitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgunit.SubUnitsTable,
			Columns: []string{orgunit.SubUnitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunit.FieldID,
				},
			},
		}
		edge.Schema = ouu.schemaConfig.OrgUnit
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouu.mutation.RemovedSubUnitsIDs(); len(nodes) > 0 && !ouu.mutation.SubUnitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgunit.SubUnitsTable,
			Columns: []string{orgunit.SubUnitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunit.FieldID,
				},
			},
		}
		edge.Schema = ouu.schemaConfig.OrgUnit
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouu.mutation.SubUnitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgunit.SubUnitsTable,
			Columns: []string{orgunit.SubUnitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunit.FieldID,
				},
			},
		}
		edge.Schema = ouu.schemaConfig.OrgUnit
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouu.mutation.BelongToOrgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgunit.BelongToOrgTable,
			Columns: []string{orgunit.BelongToOrgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		edge.Schema = ouu.schemaConfig.OrgUnit
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouu.mutation.BelongToOrgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgunit.BelongToOrgTable,
			Columns: []string{orgunit.BelongToOrgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		edge.Schema = ouu.schemaConfig.OrgUnit
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = ouu.schemaConfig.OrgUnit
	ctx = internal.NewSchemaConfigContext(ctx, ouu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, ouu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orgunit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// OrgUnitUpdateOne is the builder for updating a single OrgUnit entity.
type OrgUnitUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrgUnitMutation
}

// SetCreateByUser sets the "create_by_user" field.
func (ouuo *OrgUnitUpdateOne) SetCreateByUser(i int) *OrgUnitUpdateOne {
	ouuo.mutation.SetCreateByUser(i)
	return ouuo
}

// SetNillableCreateByUser sets the "create_by_user" field if the given value is not nil.
func (ouuo *OrgUnitUpdateOne) SetNillableCreateByUser(i *int) *OrgUnitUpdateOne {
	if i != nil {
		ouuo.SetCreateByUser(*i)
	}
	return ouuo
}

// ClearCreateByUser clears the value of the "create_by_user" field.
func (ouuo *OrgUnitUpdateOne) ClearCreateByUser() *OrgUnitUpdateOne {
	ouuo.mutation.ClearCreateByUser()
	return ouuo
}

// SetUpdateByUser sets the "update_by_user" field.
func (ouuo *OrgUnitUpdateOne) SetUpdateByUser(i int) *OrgUnitUpdateOne {
	ouuo.mutation.SetUpdateByUser(i)
	return ouuo
}

// SetNillableUpdateByUser sets the "update_by_user" field if the given value is not nil.
func (ouuo *OrgUnitUpdateOne) SetNillableUpdateByUser(i *int) *OrgUnitUpdateOne {
	if i != nil {
		ouuo.SetUpdateByUser(*i)
	}
	return ouuo
}

// ClearUpdateByUser clears the value of the "update_by_user" field.
func (ouuo *OrgUnitUpdateOne) ClearUpdateByUser() *OrgUnitUpdateOne {
	ouuo.mutation.ClearUpdateByUser()
	return ouuo
}

// SetUpdateTime sets the "update_time" field.
func (ouuo *OrgUnitUpdateOne) SetUpdateTime(t time.Time) *OrgUnitUpdateOne {
	ouuo.mutation.SetUpdateTime(t)
	return ouuo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (ouuo *OrgUnitUpdateOne) ClearUpdateTime() *OrgUnitUpdateOne {
	ouuo.mutation.ClearUpdateTime()
	return ouuo
}

// SetName sets the "name" field.
func (ouuo *OrgUnitUpdateOne) SetName(s string) *OrgUnitUpdateOne {
	ouuo.mutation.SetName(s)
	return ouuo
}

// SetDuty sets the "duty" field.
func (ouuo *OrgUnitUpdateOne) SetDuty(s string) *OrgUnitUpdateOne {
	ouuo.mutation.SetDuty(s)
	return ouuo
}

// SetNillableDuty sets the "duty" field if the given value is not nil.
func (ouuo *OrgUnitUpdateOne) SetNillableDuty(s *string) *OrgUnitUpdateOne {
	if s != nil {
		ouuo.SetDuty(*s)
	}
	return ouuo
}

// ClearDuty clears the value of the "duty" field.
func (ouuo *OrgUnitUpdateOne) ClearDuty() *OrgUnitUpdateOne {
	ouuo.mutation.ClearDuty()
	return ouuo
}

// SetCreateByID sets the "create_by" edge to the User entity by ID.
func (ouuo *OrgUnitUpdateOne) SetCreateByID(id int) *OrgUnitUpdateOne {
	ouuo.mutation.SetCreateByID(id)
	return ouuo
}

// SetNillableCreateByID sets the "create_by" edge to the User entity by ID if the given value is not nil.
func (ouuo *OrgUnitUpdateOne) SetNillableCreateByID(id *int) *OrgUnitUpdateOne {
	if id != nil {
		ouuo = ouuo.SetCreateByID(*id)
	}
	return ouuo
}

// SetCreateBy sets the "create_by" edge to the User entity.
func (ouuo *OrgUnitUpdateOne) SetCreateBy(u *User) *OrgUnitUpdateOne {
	return ouuo.SetCreateByID(u.ID)
}

// SetUpdateByID sets the "update_by" edge to the User entity by ID.
func (ouuo *OrgUnitUpdateOne) SetUpdateByID(id int) *OrgUnitUpdateOne {
	ouuo.mutation.SetUpdateByID(id)
	return ouuo
}

// SetNillableUpdateByID sets the "update_by" edge to the User entity by ID if the given value is not nil.
func (ouuo *OrgUnitUpdateOne) SetNillableUpdateByID(id *int) *OrgUnitUpdateOne {
	if id != nil {
		ouuo = ouuo.SetUpdateByID(*id)
	}
	return ouuo
}

// SetUpdateBy sets the "update_by" edge to the User entity.
func (ouuo *OrgUnitUpdateOne) SetUpdateBy(u *User) *OrgUnitUpdateOne {
	return ouuo.SetUpdateByID(u.ID)
}

// AddMemberIDs adds the "members" edge to the OrgUnitMember entity by IDs.
func (ouuo *OrgUnitUpdateOne) AddMemberIDs(ids ...int) *OrgUnitUpdateOne {
	ouuo.mutation.AddMemberIDs(ids...)
	return ouuo
}

// AddMembers adds the "members" edges to the OrgUnitMember entity.
func (ouuo *OrgUnitUpdateOne) AddMembers(o ...*OrgUnitMember) *OrgUnitUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouuo.AddMemberIDs(ids...)
}

// AddPositionIDs adds the "positions" edge to the OrgUnitPosition entity by IDs.
func (ouuo *OrgUnitUpdateOne) AddPositionIDs(ids ...int) *OrgUnitUpdateOne {
	ouuo.mutation.AddPositionIDs(ids...)
	return ouuo
}

// AddPositions adds the "positions" edges to the OrgUnitPosition entity.
func (ouuo *OrgUnitUpdateOne) AddPositions(o ...*OrgUnitPosition) *OrgUnitUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouuo.AddPositionIDs(ids...)
}

// SetSupUnitID sets the "supUnit" edge to the OrgUnit entity by ID.
func (ouuo *OrgUnitUpdateOne) SetSupUnitID(id int) *OrgUnitUpdateOne {
	ouuo.mutation.SetSupUnitID(id)
	return ouuo
}

// SetNillableSupUnitID sets the "supUnit" edge to the OrgUnit entity by ID if the given value is not nil.
func (ouuo *OrgUnitUpdateOne) SetNillableSupUnitID(id *int) *OrgUnitUpdateOne {
	if id != nil {
		ouuo = ouuo.SetSupUnitID(*id)
	}
	return ouuo
}

// SetSupUnit sets the "supUnit" edge to the OrgUnit entity.
func (ouuo *OrgUnitUpdateOne) SetSupUnit(o *OrgUnit) *OrgUnitUpdateOne {
	return ouuo.SetSupUnitID(o.ID)
}

// AddSubUnitIDs adds the "subUnits" edge to the OrgUnit entity by IDs.
func (ouuo *OrgUnitUpdateOne) AddSubUnitIDs(ids ...int) *OrgUnitUpdateOne {
	ouuo.mutation.AddSubUnitIDs(ids...)
	return ouuo
}

// AddSubUnits adds the "subUnits" edges to the OrgUnit entity.
func (ouuo *OrgUnitUpdateOne) AddSubUnits(o ...*OrgUnit) *OrgUnitUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouuo.AddSubUnitIDs(ids...)
}

// SetBelongToOrgID sets the "belongToOrg" edge to the Organization entity by ID.
func (ouuo *OrgUnitUpdateOne) SetBelongToOrgID(id int) *OrgUnitUpdateOne {
	ouuo.mutation.SetBelongToOrgID(id)
	return ouuo
}

// SetBelongToOrg sets the "belongToOrg" edge to the Organization entity.
func (ouuo *OrgUnitUpdateOne) SetBelongToOrg(o *Organization) *OrgUnitUpdateOne {
	return ouuo.SetBelongToOrgID(o.ID)
}

// Mutation returns the OrgUnitMutation object of the builder.
func (ouuo *OrgUnitUpdateOne) Mutation() *OrgUnitMutation {
	return ouuo.mutation
}

// ClearCreateBy clears the "create_by" edge to the User entity.
func (ouuo *OrgUnitUpdateOne) ClearCreateBy() *OrgUnitUpdateOne {
	ouuo.mutation.ClearCreateBy()
	return ouuo
}

// ClearUpdateBy clears the "update_by" edge to the User entity.
func (ouuo *OrgUnitUpdateOne) ClearUpdateBy() *OrgUnitUpdateOne {
	ouuo.mutation.ClearUpdateBy()
	return ouuo
}

// ClearMembers clears all "members" edges to the OrgUnitMember entity.
func (ouuo *OrgUnitUpdateOne) ClearMembers() *OrgUnitUpdateOne {
	ouuo.mutation.ClearMembers()
	return ouuo
}

// RemoveMemberIDs removes the "members" edge to OrgUnitMember entities by IDs.
func (ouuo *OrgUnitUpdateOne) RemoveMemberIDs(ids ...int) *OrgUnitUpdateOne {
	ouuo.mutation.RemoveMemberIDs(ids...)
	return ouuo
}

// RemoveMembers removes "members" edges to OrgUnitMember entities.
func (ouuo *OrgUnitUpdateOne) RemoveMembers(o ...*OrgUnitMember) *OrgUnitUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouuo.RemoveMemberIDs(ids...)
}

// ClearPositions clears all "positions" edges to the OrgUnitPosition entity.
func (ouuo *OrgUnitUpdateOne) ClearPositions() *OrgUnitUpdateOne {
	ouuo.mutation.ClearPositions()
	return ouuo
}

// RemovePositionIDs removes the "positions" edge to OrgUnitPosition entities by IDs.
func (ouuo *OrgUnitUpdateOne) RemovePositionIDs(ids ...int) *OrgUnitUpdateOne {
	ouuo.mutation.RemovePositionIDs(ids...)
	return ouuo
}

// RemovePositions removes "positions" edges to OrgUnitPosition entities.
func (ouuo *OrgUnitUpdateOne) RemovePositions(o ...*OrgUnitPosition) *OrgUnitUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouuo.RemovePositionIDs(ids...)
}

// ClearSupUnit clears the "supUnit" edge to the OrgUnit entity.
func (ouuo *OrgUnitUpdateOne) ClearSupUnit() *OrgUnitUpdateOne {
	ouuo.mutation.ClearSupUnit()
	return ouuo
}

// ClearSubUnits clears all "subUnits" edges to the OrgUnit entity.
func (ouuo *OrgUnitUpdateOne) ClearSubUnits() *OrgUnitUpdateOne {
	ouuo.mutation.ClearSubUnits()
	return ouuo
}

// RemoveSubUnitIDs removes the "subUnits" edge to OrgUnit entities by IDs.
func (ouuo *OrgUnitUpdateOne) RemoveSubUnitIDs(ids ...int) *OrgUnitUpdateOne {
	ouuo.mutation.RemoveSubUnitIDs(ids...)
	return ouuo
}

// RemoveSubUnits removes "subUnits" edges to OrgUnit entities.
func (ouuo *OrgUnitUpdateOne) RemoveSubUnits(o ...*OrgUnit) *OrgUnitUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouuo.RemoveSubUnitIDs(ids...)
}

// ClearBelongToOrg clears the "belongToOrg" edge to the Organization entity.
func (ouuo *OrgUnitUpdateOne) ClearBelongToOrg() *OrgUnitUpdateOne {
	ouuo.mutation.ClearBelongToOrg()
	return ouuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouuo *OrgUnitUpdateOne) Select(field string, fields ...string) *OrgUnitUpdateOne {
	ouuo.fields = append([]string{field}, fields...)
	return ouuo
}

// Save executes the query and returns the updated OrgUnit entity.
func (ouuo *OrgUnitUpdateOne) Save(ctx context.Context) (*OrgUnit, error) {
	var (
		err  error
		node *OrgUnit
	)
	if err := ouuo.defaults(); err != nil {
		return nil, err
	}
	if len(ouuo.hooks) == 0 {
		if err = ouuo.check(); err != nil {
			return nil, err
		}
		node, err = ouuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrgUnitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ouuo.check(); err != nil {
				return nil, err
			}
			ouuo.mutation = mutation
			node, err = ouuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ouuo.hooks) - 1; i >= 0; i-- {
			if ouuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ouuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ouuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ouuo *OrgUnitUpdateOne) SaveX(ctx context.Context) *OrgUnit {
	node, err := ouuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouuo *OrgUnitUpdateOne) Exec(ctx context.Context) error {
	_, err := ouuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouuo *OrgUnitUpdateOne) ExecX(ctx context.Context) {
	if err := ouuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouuo *OrgUnitUpdateOne) defaults() error {
	if _, ok := ouuo.mutation.UpdateTime(); !ok && !ouuo.mutation.UpdateTimeCleared() {
		if orgunit.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized orgunit.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := orgunit.UpdateDefaultUpdateTime()
		ouuo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ouuo *OrgUnitUpdateOne) check() error {
	if _, ok := ouuo.mutation.BelongToOrgID(); ouuo.mutation.BelongToOrgCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"belongToOrg\"")
	}
	return nil
}

func (ouuo *OrgUnitUpdateOne) sqlSave(ctx context.Context) (_node *OrgUnit, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orgunit.Table,
			Columns: orgunit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orgunit.FieldID,
			},
		},
	}
	id, ok := ouuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing OrgUnit.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ouuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orgunit.FieldID)
		for _, f := range fields {
			if !orgunit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orgunit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orgunit.FieldUpdateTime,
		})
	}
	if ouuo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orgunit.FieldUpdateTime,
		})
	}
	if value, ok := ouuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orgunit.FieldName,
		})
	}
	if value, ok := ouuo.mutation.Duty(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orgunit.FieldDuty,
		})
	}
	if ouuo.mutation.DutyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orgunit.FieldDuty,
		})
	}
	if ouuo.mutation.CreateByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunit.CreateByTable,
			Columns: []string{orgunit.CreateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = ouuo.schemaConfig.OrgUnit
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouuo.mutation.CreateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunit.CreateByTable,
			Columns: []string{orgunit.CreateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = ouuo.schemaConfig.OrgUnit
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouuo.mutation.UpdateByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunit.UpdateByTable,
			Columns: []string{orgunit.UpdateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = ouuo.schemaConfig.OrgUnit
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouuo.mutation.UpdateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunit.UpdateByTable,
			Columns: []string{orgunit.UpdateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = ouuo.schemaConfig.OrgUnit
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouuo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgunit.MembersTable,
			Columns: []string{orgunit.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunitmember.FieldID,
				},
			},
		}
		edge.Schema = ouuo.schemaConfig.OrgUnitMember
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouuo.mutation.RemovedMembersIDs(); len(nodes) > 0 && !ouuo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgunit.MembersTable,
			Columns: []string{orgunit.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunitmember.FieldID,
				},
			},
		}
		edge.Schema = ouuo.schemaConfig.OrgUnitMember
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouuo.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgunit.MembersTable,
			Columns: []string{orgunit.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunitmember.FieldID,
				},
			},
		}
		edge.Schema = ouuo.schemaConfig.OrgUnitMember
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouuo.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgunit.PositionsTable,
			Columns: []string{orgunit.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunitposition.FieldID,
				},
			},
		}
		edge.Schema = ouuo.schemaConfig.OrgUnitPosition
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouuo.mutation.RemovedPositionsIDs(); len(nodes) > 0 && !ouuo.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgunit.PositionsTable,
			Columns: []string{orgunit.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunitposition.FieldID,
				},
			},
		}
		edge.Schema = ouuo.schemaConfig.OrgUnitPosition
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouuo.mutation.PositionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgunit.PositionsTable,
			Columns: []string{orgunit.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunitposition.FieldID,
				},
			},
		}
		edge.Schema = ouuo.schemaConfig.OrgUnitPosition
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouuo.mutation.SupUnitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgunit.SupUnitTable,
			Columns: []string{orgunit.SupUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunit.FieldID,
				},
			},
		}
		edge.Schema = ouuo.schemaConfig.OrgUnit
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouuo.mutation.SupUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgunit.SupUnitTable,
			Columns: []string{orgunit.SupUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunit.FieldID,
				},
			},
		}
		edge.Schema = ouuo.schemaConfig.OrgUnit
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouuo.mutation.SubUnitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgunit.SubUnitsTable,
			Columns: []string{orgunit.SubUnitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunit.FieldID,
				},
			},
		}
		edge.Schema = ouuo.schemaConfig.OrgUnit
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouuo.mutation.RemovedSubUnitsIDs(); len(nodes) > 0 && !ouuo.mutation.SubUnitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgunit.SubUnitsTable,
			Columns: []string{orgunit.SubUnitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunit.FieldID,
				},
			},
		}
		edge.Schema = ouuo.schemaConfig.OrgUnit
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouuo.mutation.SubUnitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgunit.SubUnitsTable,
			Columns: []string{orgunit.SubUnitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunit.FieldID,
				},
			},
		}
		edge.Schema = ouuo.schemaConfig.OrgUnit
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouuo.mutation.BelongToOrgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgunit.BelongToOrgTable,
			Columns: []string{orgunit.BelongToOrgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		edge.Schema = ouuo.schemaConfig.OrgUnit
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouuo.mutation.BelongToOrgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgunit.BelongToOrgTable,
			Columns: []string{orgunit.BelongToOrgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		edge.Schema = ouuo.schemaConfig.OrgUnit
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = ouuo.schemaConfig.OrgUnit
	ctx = internal.NewSchemaConfigContext(ctx, ouuo.schemaConfig)
	_node = &OrgUnit{config: ouuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orgunit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
