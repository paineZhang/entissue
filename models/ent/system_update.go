// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"wing/models/ent/internal"
	"wing/models/ent/predicate"
	"wing/models/ent/system"
	"wing/models/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SystemUpdate is the builder for updating System entities.
type SystemUpdate struct {
	config
	hooks    []Hook
	mutation *SystemMutation
}

// Where appends a list predicates to the SystemUpdate builder.
func (su *SystemUpdate) Where(ps ...predicate.System) *SystemUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetCreateByUser sets the "create_by_user" field.
func (su *SystemUpdate) SetCreateByUser(i int) *SystemUpdate {
	su.mutation.SetCreateByUser(i)
	return su
}

// SetNillableCreateByUser sets the "create_by_user" field if the given value is not nil.
func (su *SystemUpdate) SetNillableCreateByUser(i *int) *SystemUpdate {
	if i != nil {
		su.SetCreateByUser(*i)
	}
	return su
}

// ClearCreateByUser clears the value of the "create_by_user" field.
func (su *SystemUpdate) ClearCreateByUser() *SystemUpdate {
	su.mutation.ClearCreateByUser()
	return su
}

// SetUpdateByUser sets the "update_by_user" field.
func (su *SystemUpdate) SetUpdateByUser(i int) *SystemUpdate {
	su.mutation.SetUpdateByUser(i)
	return su
}

// SetNillableUpdateByUser sets the "update_by_user" field if the given value is not nil.
func (su *SystemUpdate) SetNillableUpdateByUser(i *int) *SystemUpdate {
	if i != nil {
		su.SetUpdateByUser(*i)
	}
	return su
}

// ClearUpdateByUser clears the value of the "update_by_user" field.
func (su *SystemUpdate) ClearUpdateByUser() *SystemUpdate {
	su.mutation.ClearUpdateByUser()
	return su
}

// SetUpdateTime sets the "update_time" field.
func (su *SystemUpdate) SetUpdateTime(t time.Time) *SystemUpdate {
	su.mutation.SetUpdateTime(t)
	return su
}

// ClearUpdateTime clears the value of the "update_time" field.
func (su *SystemUpdate) ClearUpdateTime() *SystemUpdate {
	su.mutation.ClearUpdateTime()
	return su
}

// SetName sets the "name" field.
func (su *SystemUpdate) SetName(s string) *SystemUpdate {
	su.mutation.SetName(s)
	return su
}

// SetCreateByID sets the "create_by" edge to the User entity by ID.
func (su *SystemUpdate) SetCreateByID(id int) *SystemUpdate {
	su.mutation.SetCreateByID(id)
	return su
}

// SetNillableCreateByID sets the "create_by" edge to the User entity by ID if the given value is not nil.
func (su *SystemUpdate) SetNillableCreateByID(id *int) *SystemUpdate {
	if id != nil {
		su = su.SetCreateByID(*id)
	}
	return su
}

// SetCreateBy sets the "create_by" edge to the User entity.
func (su *SystemUpdate) SetCreateBy(u *User) *SystemUpdate {
	return su.SetCreateByID(u.ID)
}

// SetUpdateByID sets the "update_by" edge to the User entity by ID.
func (su *SystemUpdate) SetUpdateByID(id int) *SystemUpdate {
	su.mutation.SetUpdateByID(id)
	return su
}

// SetNillableUpdateByID sets the "update_by" edge to the User entity by ID if the given value is not nil.
func (su *SystemUpdate) SetNillableUpdateByID(id *int) *SystemUpdate {
	if id != nil {
		su = su.SetUpdateByID(*id)
	}
	return su
}

// SetUpdateBy sets the "update_by" edge to the User entity.
func (su *SystemUpdate) SetUpdateBy(u *User) *SystemUpdate {
	return su.SetUpdateByID(u.ID)
}

// Mutation returns the SystemMutation object of the builder.
func (su *SystemUpdate) Mutation() *SystemMutation {
	return su.mutation
}

// ClearCreateBy clears the "create_by" edge to the User entity.
func (su *SystemUpdate) ClearCreateBy() *SystemUpdate {
	su.mutation.ClearCreateBy()
	return su
}

// ClearUpdateBy clears the "update_by" edge to the User entity.
func (su *SystemUpdate) ClearUpdateBy() *SystemUpdate {
	su.mutation.ClearUpdateBy()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SystemUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := su.defaults(); err != nil {
		return 0, err
	}
	if len(su.hooks) == 0 {
		if err = su.check(); err != nil {
			return 0, err
		}
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SystemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = su.check(); err != nil {
				return 0, err
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SystemUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SystemUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SystemUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SystemUpdate) defaults() error {
	if _, ok := su.mutation.UpdateTime(); !ok && !su.mutation.UpdateTimeCleared() {
		if system.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized system.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := system.UpdateDefaultUpdateTime()
		su.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (su *SystemUpdate) check() error {
	if v, ok := su.mutation.Name(); ok {
		if err := system.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (su *SystemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   system.Table,
			Columns: system.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: system.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: system.FieldUpdateTime,
		})
	}
	if su.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: system.FieldUpdateTime,
		})
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: system.FieldName,
		})
	}
	if su.mutation.CreateByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   system.CreateByTable,
			Columns: []string{system.CreateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = su.schemaConfig.System
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CreateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   system.CreateByTable,
			Columns: []string{system.CreateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = su.schemaConfig.System
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.UpdateByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   system.UpdateByTable,
			Columns: []string{system.UpdateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = su.schemaConfig.System
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.UpdateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   system.UpdateByTable,
			Columns: []string{system.UpdateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = su.schemaConfig.System
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = su.schemaConfig.System
	ctx = internal.NewSchemaConfigContext(ctx, su.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{system.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SystemUpdateOne is the builder for updating a single System entity.
type SystemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SystemMutation
}

// SetCreateByUser sets the "create_by_user" field.
func (suo *SystemUpdateOne) SetCreateByUser(i int) *SystemUpdateOne {
	suo.mutation.SetCreateByUser(i)
	return suo
}

// SetNillableCreateByUser sets the "create_by_user" field if the given value is not nil.
func (suo *SystemUpdateOne) SetNillableCreateByUser(i *int) *SystemUpdateOne {
	if i != nil {
		suo.SetCreateByUser(*i)
	}
	return suo
}

// ClearCreateByUser clears the value of the "create_by_user" field.
func (suo *SystemUpdateOne) ClearCreateByUser() *SystemUpdateOne {
	suo.mutation.ClearCreateByUser()
	return suo
}

// SetUpdateByUser sets the "update_by_user" field.
func (suo *SystemUpdateOne) SetUpdateByUser(i int) *SystemUpdateOne {
	suo.mutation.SetUpdateByUser(i)
	return suo
}

// SetNillableUpdateByUser sets the "update_by_user" field if the given value is not nil.
func (suo *SystemUpdateOne) SetNillableUpdateByUser(i *int) *SystemUpdateOne {
	if i != nil {
		suo.SetUpdateByUser(*i)
	}
	return suo
}

// ClearUpdateByUser clears the value of the "update_by_user" field.
func (suo *SystemUpdateOne) ClearUpdateByUser() *SystemUpdateOne {
	suo.mutation.ClearUpdateByUser()
	return suo
}

// SetUpdateTime sets the "update_time" field.
func (suo *SystemUpdateOne) SetUpdateTime(t time.Time) *SystemUpdateOne {
	suo.mutation.SetUpdateTime(t)
	return suo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (suo *SystemUpdateOne) ClearUpdateTime() *SystemUpdateOne {
	suo.mutation.ClearUpdateTime()
	return suo
}

// SetName sets the "name" field.
func (suo *SystemUpdateOne) SetName(s string) *SystemUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetCreateByID sets the "create_by" edge to the User entity by ID.
func (suo *SystemUpdateOne) SetCreateByID(id int) *SystemUpdateOne {
	suo.mutation.SetCreateByID(id)
	return suo
}

// SetNillableCreateByID sets the "create_by" edge to the User entity by ID if the given value is not nil.
func (suo *SystemUpdateOne) SetNillableCreateByID(id *int) *SystemUpdateOne {
	if id != nil {
		suo = suo.SetCreateByID(*id)
	}
	return suo
}

// SetCreateBy sets the "create_by" edge to the User entity.
func (suo *SystemUpdateOne) SetCreateBy(u *User) *SystemUpdateOne {
	return suo.SetCreateByID(u.ID)
}

// SetUpdateByID sets the "update_by" edge to the User entity by ID.
func (suo *SystemUpdateOne) SetUpdateByID(id int) *SystemUpdateOne {
	suo.mutation.SetUpdateByID(id)
	return suo
}

// SetNillableUpdateByID sets the "update_by" edge to the User entity by ID if the given value is not nil.
func (suo *SystemUpdateOne) SetNillableUpdateByID(id *int) *SystemUpdateOne {
	if id != nil {
		suo = suo.SetUpdateByID(*id)
	}
	return suo
}

// SetUpdateBy sets the "update_by" edge to the User entity.
func (suo *SystemUpdateOne) SetUpdateBy(u *User) *SystemUpdateOne {
	return suo.SetUpdateByID(u.ID)
}

// Mutation returns the SystemMutation object of the builder.
func (suo *SystemUpdateOne) Mutation() *SystemMutation {
	return suo.mutation
}

// ClearCreateBy clears the "create_by" edge to the User entity.
func (suo *SystemUpdateOne) ClearCreateBy() *SystemUpdateOne {
	suo.mutation.ClearCreateBy()
	return suo
}

// ClearUpdateBy clears the "update_by" edge to the User entity.
func (suo *SystemUpdateOne) ClearUpdateBy() *SystemUpdateOne {
	suo.mutation.ClearUpdateBy()
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SystemUpdateOne) Select(field string, fields ...string) *SystemUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated System entity.
func (suo *SystemUpdateOne) Save(ctx context.Context) (*System, error) {
	var (
		err  error
		node *System
	)
	if err := suo.defaults(); err != nil {
		return nil, err
	}
	if len(suo.hooks) == 0 {
		if err = suo.check(); err != nil {
			return nil, err
		}
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SystemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suo.check(); err != nil {
				return nil, err
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SystemUpdateOne) SaveX(ctx context.Context) *System {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SystemUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SystemUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SystemUpdateOne) defaults() error {
	if _, ok := suo.mutation.UpdateTime(); !ok && !suo.mutation.UpdateTimeCleared() {
		if system.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized system.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := system.UpdateDefaultUpdateTime()
		suo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (suo *SystemUpdateOne) check() error {
	if v, ok := suo.mutation.Name(); ok {
		if err := system.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (suo *SystemUpdateOne) sqlSave(ctx context.Context) (_node *System, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   system.Table,
			Columns: system.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: system.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing System.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, system.FieldID)
		for _, f := range fields {
			if !system.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != system.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: system.FieldUpdateTime,
		})
	}
	if suo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: system.FieldUpdateTime,
		})
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: system.FieldName,
		})
	}
	if suo.mutation.CreateByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   system.CreateByTable,
			Columns: []string{system.CreateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = suo.schemaConfig.System
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CreateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   system.CreateByTable,
			Columns: []string{system.CreateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = suo.schemaConfig.System
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.UpdateByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   system.UpdateByTable,
			Columns: []string{system.UpdateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = suo.schemaConfig.System
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.UpdateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   system.UpdateByTable,
			Columns: []string{system.UpdateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = suo.schemaConfig.System
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = suo.schemaConfig.System
	ctx = internal.NewSchemaConfigContext(ctx, suo.schemaConfig)
	_node = &System{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{system.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
