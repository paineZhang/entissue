// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AuthsColumns holds the columns for the "auths" table.
	AuthsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "last_auth_time", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "auth_type", Type: field.TypeEnum, Enums: []string{"login", "refresh"}},
		{Name: "user_auth_histories", Type: field.TypeInt, Nullable: true},
	}
	// AuthsTable holds the schema information for the "auths" table.
	AuthsTable = &schema.Table{
		Name:       "auths",
		Columns:    AuthsColumns,
		PrimaryKey: []*schema.Column{AuthsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "auths_users_authHistories",
				Columns:    []*schema.Column{AuthsColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// JobHistoriesColumns holds the columns for the "job_histories" table.
	JobHistoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "date", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "date"}},
		{Name: "job_entry_leave_type", Type: field.TypeEnum, Enums: []string{"entry", "leave"}},
		{Name: "create_by_user", Type: field.TypeInt, Nullable: true},
		{Name: "user_job_histories", Type: field.TypeInt, Nullable: true},
	}
	// JobHistoriesTable holds the schema information for the "job_histories" table.
	JobHistoriesTable = &schema.Table{
		Name:       "job_histories",
		Columns:    JobHistoriesColumns,
		PrimaryKey: []*schema.Column{JobHistoriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "job_histories_users_create_by",
				Columns:    []*schema.Column{JobHistoriesColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "job_histories_users_jobHistories",
				Columns:    []*schema.Column{JobHistoriesColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "jobhistory_create_time",
				Unique:  false,
				Columns: []*schema.Column{JobHistoriesColumns[1]},
			},
			{
				Name:    "jobhistory_date",
				Unique:  false,
				Columns: []*schema.Column{JobHistoriesColumns[2]},
			},
			{
				Name:    "jobhistory_create_time",
				Unique:  false,
				Columns: []*schema.Column{JobHistoriesColumns[1]},
			},
			{
				Name:    "jobhistory_job_entry_leave_type",
				Unique:  false,
				Columns: []*schema.Column{JobHistoriesColumns[3]},
			},
			{
				Name:    "jobhistory_date_job_entry_leave_type",
				Unique:  false,
				Columns: []*schema.Column{JobHistoriesColumns[2], JobHistoriesColumns[3]},
			},
		},
	}
	// OrgUnitsColumns holds the columns for the "org_units" table.
	OrgUnitsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "update_time", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "name", Type: field.TypeString},
		{Name: "duty", Type: field.TypeString, Nullable: true},
		{Name: "create_by_user", Type: field.TypeInt, Nullable: true},
		{Name: "update_by_user", Type: field.TypeInt, Nullable: true},
		{Name: "org_unit_sub_units", Type: field.TypeInt, Nullable: true},
		{Name: "organization_units", Type: field.TypeInt, Nullable: true},
	}
	// OrgUnitsTable holds the schema information for the "org_units" table.
	OrgUnitsTable = &schema.Table{
		Name:       "org_units",
		Columns:    OrgUnitsColumns,
		PrimaryKey: []*schema.Column{OrgUnitsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "org_units_users_create_by",
				Columns:    []*schema.Column{OrgUnitsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "org_units_users_update_by",
				Columns:    []*schema.Column{OrgUnitsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "org_units_org_units_subUnits",
				Columns:    []*schema.Column{OrgUnitsColumns[7]},
				RefColumns: []*schema.Column{OrgUnitsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "org_units_organizations_units",
				Columns:    []*schema.Column{OrgUnitsColumns[8]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "orgunit_create_time",
				Unique:  false,
				Columns: []*schema.Column{OrgUnitsColumns[1]},
			},
			{
				Name:    "orgunit_update_time",
				Unique:  false,
				Columns: []*schema.Column{OrgUnitsColumns[2]},
			},
		},
	}
	// OrgUnitMembersColumns holds the columns for the "org_unit_members" table.
	OrgUnitMembersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "update_time", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "is_additional", Type: field.TypeBool},
		{Name: "org_unit_id", Type: field.TypeInt, Nullable: true},
		{Name: "create_by_user", Type: field.TypeInt, Nullable: true},
		{Name: "update_by_user", Type: field.TypeInt, Nullable: true},
		{Name: "user_id", Type: field.TypeInt, Nullable: true},
		{Name: "org_unit_position_id", Type: field.TypeInt, Nullable: true},
	}
	// OrgUnitMembersTable holds the schema information for the "org_unit_members" table.
	OrgUnitMembersTable = &schema.Table{
		Name:       "org_unit_members",
		Columns:    OrgUnitMembersColumns,
		PrimaryKey: []*schema.Column{OrgUnitMembersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "org_unit_members_org_units_members",
				Columns:    []*schema.Column{OrgUnitMembersColumns[4]},
				RefColumns: []*schema.Column{OrgUnitsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "org_unit_members_users_create_by",
				Columns:    []*schema.Column{OrgUnitMembersColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "org_unit_members_users_update_by",
				Columns:    []*schema.Column{OrgUnitMembersColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "org_unit_members_users_user",
				Columns:    []*schema.Column{OrgUnitMembersColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "org_unit_members_org_unit_positions_position",
				Columns:    []*schema.Column{OrgUnitMembersColumns[8]},
				RefColumns: []*schema.Column{OrgUnitPositionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "orgunitmember_create_time",
				Unique:  false,
				Columns: []*schema.Column{OrgUnitMembersColumns[1]},
			},
			{
				Name:    "orgunitmember_update_time",
				Unique:  false,
				Columns: []*schema.Column{OrgUnitMembersColumns[2]},
			},
			{
				Name:    "orgunitmember_user_id_org_unit_id",
				Unique:  true,
				Columns: []*schema.Column{OrgUnitMembersColumns[7], OrgUnitMembersColumns[4]},
			},
		},
	}
	// OrgUnitPositionsColumns holds the columns for the "org_unit_positions" table.
	OrgUnitPositionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "update_time", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "name", Type: field.TypeString},
		{Name: "duty", Type: field.TypeString, Nullable: true},
		{Name: "level", Type: field.TypeInt},
		{Name: "org_unit_id", Type: field.TypeInt, Nullable: true},
		{Name: "create_by_user", Type: field.TypeInt, Nullable: true},
		{Name: "update_by_user", Type: field.TypeInt, Nullable: true},
	}
	// OrgUnitPositionsTable holds the schema information for the "org_unit_positions" table.
	OrgUnitPositionsTable = &schema.Table{
		Name:       "org_unit_positions",
		Columns:    OrgUnitPositionsColumns,
		PrimaryKey: []*schema.Column{OrgUnitPositionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "org_unit_positions_org_units_positions",
				Columns:    []*schema.Column{OrgUnitPositionsColumns[6]},
				RefColumns: []*schema.Column{OrgUnitsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "org_unit_positions_users_create_by",
				Columns:    []*schema.Column{OrgUnitPositionsColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "org_unit_positions_users_update_by",
				Columns:    []*schema.Column{OrgUnitPositionsColumns[8]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "orgunitposition_create_time",
				Unique:  false,
				Columns: []*schema.Column{OrgUnitPositionsColumns[1]},
			},
			{
				Name:    "orgunitposition_update_time",
				Unique:  false,
				Columns: []*schema.Column{OrgUnitPositionsColumns[2]},
			},
			{
				Name:    "orgunitposition_name_org_unit_id",
				Unique:  true,
				Columns: []*schema.Column{OrgUnitPositionsColumns[3], OrgUnitPositionsColumns[6]},
			},
			{
				Name:    "orgunitposition_level_org_unit_id",
				Unique:  true,
				Columns: []*schema.Column{OrgUnitPositionsColumns[5], OrgUnitPositionsColumns[6]},
			},
		},
	}
	// OrganizationsColumns holds the columns for the "organizations" table.
	OrganizationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "update_time", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "name", Type: field.TypeString},
		{Name: "create_by_user", Type: field.TypeInt, Nullable: true},
		{Name: "update_by_user", Type: field.TypeInt, Nullable: true},
	}
	// OrganizationsTable holds the schema information for the "organizations" table.
	OrganizationsTable = &schema.Table{
		Name:       "organizations",
		Columns:    OrganizationsColumns,
		PrimaryKey: []*schema.Column{OrganizationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "organizations_users_create_by",
				Columns:    []*schema.Column{OrganizationsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "organizations_users_update_by",
				Columns:    []*schema.Column{OrganizationsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "organization_create_time",
				Unique:  false,
				Columns: []*schema.Column{OrganizationsColumns[1]},
			},
			{
				Name:    "organization_update_time",
				Unique:  false,
				Columns: []*schema.Column{OrganizationsColumns[2]},
			},
		},
	}
	// ResourcesColumns holds the columns for the "resources" table.
	ResourcesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true, Size: 64},
		{Name: "type", Type: field.TypeString, Unique: true, Size: 64},
	}
	// ResourcesTable holds the schema information for the "resources" table.
	ResourcesTable = &schema.Table{
		Name:       "resources",
		Columns:    ResourcesColumns,
		PrimaryKey: []*schema.Column{ResourcesColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "resource_name",
				Unique:  false,
				Columns: []*schema.Column{ResourcesColumns[1]},
			},
			{
				Name:    "resource_type",
				Unique:  false,
				Columns: []*schema.Column{ResourcesColumns[2]},
			},
		},
	}
	// SystemsColumns holds the columns for the "systems" table.
	SystemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "update_time", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "name", Type: field.TypeString, Unique: true, Size: 64},
		{Name: "create_by_user", Type: field.TypeInt, Nullable: true},
		{Name: "update_by_user", Type: field.TypeInt, Nullable: true},
	}
	// SystemsTable holds the schema information for the "systems" table.
	SystemsTable = &schema.Table{
		Name:       "systems",
		Columns:    SystemsColumns,
		PrimaryKey: []*schema.Column{SystemsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "systems_users_create_by",
				Columns:    []*schema.Column{SystemsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "systems_users_update_by",
				Columns:    []*schema.Column{SystemsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "system_create_time",
				Unique:  false,
				Columns: []*schema.Column{SystemsColumns[1]},
			},
			{
				Name:    "system_update_time",
				Unique:  false,
				Columns: []*schema.Column{SystemsColumns[2]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "update_time", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "account_name", Type: field.TypeString, Unique: true, Size: 64},
		{Name: "staff_type", Type: field.TypeEnum, Enums: []string{"regular", "dispatching", "intern", "external"}},
		{Name: "is_on_job", Type: field.TypeBool, Default: false},
		{Name: "family_name", Type: field.TypeString, Size: 20},
		{Name: "given_name", Type: field.TypeString, Size: 20},
		{Name: "display_name", Type: field.TypeString, Size: 20},
		{Name: "birthday", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "date"}},
		{Name: "id_number", Type: field.TypeString, Unique: true, Nullable: true, Size: 18},
		{Name: "sex", Type: field.TypeEnum, Nullable: true, Enums: []string{"male", "female"}},
		{Name: "phone_number", Type: field.TypeString, Unique: true, Nullable: true, Size: 20},
		{Name: "address", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "staff_id", Type: field.TypeString, Unique: true, Nullable: true, Size: 64},
		{Name: "personal_email", Type: field.TypeString, Unique: true, Nullable: true, Size: 64},
		{Name: "intranet_work_email", Type: field.TypeString, Unique: true, Size: 64},
		{Name: "extranet_work_email", Type: field.TypeString, Unique: true, Nullable: true, Size: 64},
		{Name: "create_by_user", Type: field.TypeInt, Nullable: true},
		{Name: "update_by_user", Type: field.TypeInt, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_users_create_by",
				Columns:    []*schema.Column{UsersColumns[18]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "users_users_update_by",
				Columns:    []*schema.Column{UsersColumns[19]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "user_create_time",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[1]},
			},
			{
				Name:    "user_update_time",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[2]},
			},
			{
				Name:    "user_account_name",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[3]},
			},
			{
				Name:    "user_staff_type",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[4]},
			},
			{
				Name:    "user_family_name_given_name",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[6], UsersColumns[7]},
			},
			{
				Name:    "user_family_name",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[6]},
			},
			{
				Name:    "user_display_name",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[8]},
			},
			{
				Name:    "user_is_on_job",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[5]},
			},
			{
				Name:    "user_sex",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[11]},
			},
			{
				Name:    "user_phone_number",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[12]},
			},
			{
				Name:    "user_birthday",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[9]},
			},
			{
				Name:    "user_id_number",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[10]},
			},
			{
				Name:    "user_staff_id",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[14]},
			},
			{
				Name:    "user_personal_email",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[15]},
			},
			{
				Name:    "user_intranet_work_email",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[16]},
			},
			{
				Name:    "user_extranet_work_email",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[17]},
			},
			{
				Name:    "user_intranet_work_email_extranet_work_email",
				Unique:  true,
				Columns: []*schema.Column{UsersColumns[16], UsersColumns[17]},
			},
		},
	}
	// OrganizationStaffsColumns holds the columns for the "organization_staffs" table.
	OrganizationStaffsColumns = []*schema.Column{
		{Name: "organization_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// OrganizationStaffsTable holds the schema information for the "organization_staffs" table.
	OrganizationStaffsTable = &schema.Table{
		Name:       "organization_staffs",
		Columns:    OrganizationStaffsColumns,
		PrimaryKey: []*schema.Column{OrganizationStaffsColumns[0], OrganizationStaffsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "organization_staffs_organization_id",
				Columns:    []*schema.Column{OrganizationStaffsColumns[0]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "organization_staffs_user_id",
				Columns:    []*schema.Column{OrganizationStaffsColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AuthsTable,
		JobHistoriesTable,
		OrgUnitsTable,
		OrgUnitMembersTable,
		OrgUnitPositionsTable,
		OrganizationsTable,
		ResourcesTable,
		SystemsTable,
		UsersTable,
		OrganizationStaffsTable,
	}
)

func init() {
	AuthsTable.ForeignKeys[0].RefTable = UsersTable
	JobHistoriesTable.ForeignKeys[0].RefTable = UsersTable
	JobHistoriesTable.ForeignKeys[1].RefTable = UsersTable
	OrgUnitsTable.ForeignKeys[0].RefTable = UsersTable
	OrgUnitsTable.ForeignKeys[1].RefTable = UsersTable
	OrgUnitsTable.ForeignKeys[2].RefTable = OrgUnitsTable
	OrgUnitsTable.ForeignKeys[3].RefTable = OrganizationsTable
	OrgUnitMembersTable.ForeignKeys[0].RefTable = OrgUnitsTable
	OrgUnitMembersTable.ForeignKeys[1].RefTable = UsersTable
	OrgUnitMembersTable.ForeignKeys[2].RefTable = UsersTable
	OrgUnitMembersTable.ForeignKeys[3].RefTable = UsersTable
	OrgUnitMembersTable.ForeignKeys[4].RefTable = OrgUnitPositionsTable
	OrgUnitPositionsTable.ForeignKeys[0].RefTable = OrgUnitsTable
	OrgUnitPositionsTable.ForeignKeys[1].RefTable = UsersTable
	OrgUnitPositionsTable.ForeignKeys[2].RefTable = UsersTable
	OrganizationsTable.ForeignKeys[0].RefTable = UsersTable
	OrganizationsTable.ForeignKeys[1].RefTable = UsersTable
	SystemsTable.ForeignKeys[0].RefTable = UsersTable
	SystemsTable.ForeignKeys[1].RefTable = UsersTable
	UsersTable.ForeignKeys[0].RefTable = UsersTable
	UsersTable.ForeignKeys[1].RefTable = UsersTable
	OrganizationStaffsTable.ForeignKeys[0].RefTable = OrganizationsTable
	OrganizationStaffsTable.ForeignKeys[1].RefTable = UsersTable
}
