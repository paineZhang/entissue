// Code generated by entc, DO NOT EDIT.

package orgunitpositon

import (
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the orgunitpositon type in the database.
	Label = "org_unit_positon"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateByUser holds the string denoting the create_by_user field in the database.
	FieldCreateByUser = "create_by_user"
	// FieldUpdateByUser holds the string denoting the update_by_user field in the database.
	FieldUpdateByUser = "update_by_user"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDuty holds the string denoting the duty field in the database.
	FieldDuty = "duty"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"
	// FieldOrgUnitID holds the string denoting the org_unit_id field in the database.
	FieldOrgUnitID = "org_unit_id"
	// EdgeCreateBy holds the string denoting the create_by edge name in mutations.
	EdgeCreateBy = "create_by"
	// EdgeUpdateBy holds the string denoting the update_by edge name in mutations.
	EdgeUpdateBy = "update_by"
	// EdgeBelongToOrgUnitMembers holds the string denoting the belongtoorgunitmembers edge name in mutations.
	EdgeBelongToOrgUnitMembers = "belongToOrgUnitMembers"
	// EdgeBelongToOrgUnit holds the string denoting the belongtoorgunit edge name in mutations.
	EdgeBelongToOrgUnit = "belongToOrgUnit"
	// Table holds the table name of the orgunitpositon in the database.
	Table = "org_unit_positons"
	// CreateByTable is the table that holds the create_by relation/edge.
	CreateByTable = "org_unit_positons"
	// CreateByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreateByInverseTable = "users"
	// CreateByColumn is the table column denoting the create_by relation/edge.
	CreateByColumn = "create_by_user"
	// UpdateByTable is the table that holds the update_by relation/edge.
	UpdateByTable = "org_unit_positons"
	// UpdateByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UpdateByInverseTable = "users"
	// UpdateByColumn is the table column denoting the update_by relation/edge.
	UpdateByColumn = "update_by_user"
	// BelongToOrgUnitMembersTable is the table that holds the belongToOrgUnitMembers relation/edge.
	BelongToOrgUnitMembersTable = "org_unit_members"
	// BelongToOrgUnitMembersInverseTable is the table name for the OrgUnitMember entity.
	// It exists in this package in order to avoid circular dependency with the "orgunitmember" package.
	BelongToOrgUnitMembersInverseTable = "org_unit_members"
	// BelongToOrgUnitMembersColumn is the table column denoting the belongToOrgUnitMembers relation/edge.
	BelongToOrgUnitMembersColumn = "org_unit_positon_id"
	// BelongToOrgUnitTable is the table that holds the belongToOrgUnit relation/edge.
	BelongToOrgUnitTable = "org_unit_positons"
	// BelongToOrgUnitInverseTable is the table name for the OrgUnit entity.
	// It exists in this package in order to avoid circular dependency with the "orgunit" package.
	BelongToOrgUnitInverseTable = "org_units"
	// BelongToOrgUnitColumn is the table column denoting the belongToOrgUnit relation/edge.
	BelongToOrgUnitColumn = "org_unit_id"
)

// Columns holds all SQL columns for orgunitpositon fields.
var Columns = []string{
	FieldID,
	FieldCreateByUser,
	FieldUpdateByUser,
	FieldCreateTime,
	FieldUpdateTime,
	FieldName,
	FieldDuty,
	FieldLevel,
	FieldOrgUnitID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "wing/models/ent/runtime"
//
var (
	Hooks [4]ent.Hook
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// LevelValidator is a validator for the "level" field. It is called by the builders before save.
	LevelValidator func(int) error
)
