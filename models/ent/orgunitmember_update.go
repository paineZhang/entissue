// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wing/models/ent/internal"
	"wing/models/ent/orgunit"
	"wing/models/ent/orgunitmember"
	"wing/models/ent/orgunitposition"
	"wing/models/ent/predicate"
	"wing/models/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrgUnitMemberUpdate is the builder for updating OrgUnitMember entities.
type OrgUnitMemberUpdate struct {
	config
	hooks    []Hook
	mutation *OrgUnitMemberMutation
}

// Where appends a list predicates to the OrgUnitMemberUpdate builder.
func (oumu *OrgUnitMemberUpdate) Where(ps ...predicate.OrgUnitMember) *OrgUnitMemberUpdate {
	oumu.mutation.Where(ps...)
	return oumu
}

// SetCreateByUser sets the "create_by_user" field.
func (oumu *OrgUnitMemberUpdate) SetCreateByUser(i int) *OrgUnitMemberUpdate {
	oumu.mutation.SetCreateByUser(i)
	return oumu
}

// SetNillableCreateByUser sets the "create_by_user" field if the given value is not nil.
func (oumu *OrgUnitMemberUpdate) SetNillableCreateByUser(i *int) *OrgUnitMemberUpdate {
	if i != nil {
		oumu.SetCreateByUser(*i)
	}
	return oumu
}

// ClearCreateByUser clears the value of the "create_by_user" field.
func (oumu *OrgUnitMemberUpdate) ClearCreateByUser() *OrgUnitMemberUpdate {
	oumu.mutation.ClearCreateByUser()
	return oumu
}

// SetUpdateByUser sets the "update_by_user" field.
func (oumu *OrgUnitMemberUpdate) SetUpdateByUser(i int) *OrgUnitMemberUpdate {
	oumu.mutation.SetUpdateByUser(i)
	return oumu
}

// SetNillableUpdateByUser sets the "update_by_user" field if the given value is not nil.
func (oumu *OrgUnitMemberUpdate) SetNillableUpdateByUser(i *int) *OrgUnitMemberUpdate {
	if i != nil {
		oumu.SetUpdateByUser(*i)
	}
	return oumu
}

// ClearUpdateByUser clears the value of the "update_by_user" field.
func (oumu *OrgUnitMemberUpdate) ClearUpdateByUser() *OrgUnitMemberUpdate {
	oumu.mutation.ClearUpdateByUser()
	return oumu
}

// SetUpdateTime sets the "update_time" field.
func (oumu *OrgUnitMemberUpdate) SetUpdateTime(t time.Time) *OrgUnitMemberUpdate {
	oumu.mutation.SetUpdateTime(t)
	return oumu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (oumu *OrgUnitMemberUpdate) ClearUpdateTime() *OrgUnitMemberUpdate {
	oumu.mutation.ClearUpdateTime()
	return oumu
}

// SetIsAdditional sets the "is_additional" field.
func (oumu *OrgUnitMemberUpdate) SetIsAdditional(b bool) *OrgUnitMemberUpdate {
	oumu.mutation.SetIsAdditional(b)
	return oumu
}

// SetUserID sets the "user_id" field.
func (oumu *OrgUnitMemberUpdate) SetUserID(i int) *OrgUnitMemberUpdate {
	oumu.mutation.SetUserID(i)
	return oumu
}

// SetOrgUnitID sets the "org_unit_id" field.
func (oumu *OrgUnitMemberUpdate) SetOrgUnitID(i int) *OrgUnitMemberUpdate {
	oumu.mutation.SetOrgUnitID(i)
	return oumu
}

// SetOrgUnitPositionID sets the "org_unit_position_id" field.
func (oumu *OrgUnitMemberUpdate) SetOrgUnitPositionID(i int) *OrgUnitMemberUpdate {
	oumu.mutation.SetOrgUnitPositionID(i)
	return oumu
}

// SetCreateByID sets the "create_by" edge to the User entity by ID.
func (oumu *OrgUnitMemberUpdate) SetCreateByID(id int) *OrgUnitMemberUpdate {
	oumu.mutation.SetCreateByID(id)
	return oumu
}

// SetNillableCreateByID sets the "create_by" edge to the User entity by ID if the given value is not nil.
func (oumu *OrgUnitMemberUpdate) SetNillableCreateByID(id *int) *OrgUnitMemberUpdate {
	if id != nil {
		oumu = oumu.SetCreateByID(*id)
	}
	return oumu
}

// SetCreateBy sets the "create_by" edge to the User entity.
func (oumu *OrgUnitMemberUpdate) SetCreateBy(u *User) *OrgUnitMemberUpdate {
	return oumu.SetCreateByID(u.ID)
}

// SetUpdateByID sets the "update_by" edge to the User entity by ID.
func (oumu *OrgUnitMemberUpdate) SetUpdateByID(id int) *OrgUnitMemberUpdate {
	oumu.mutation.SetUpdateByID(id)
	return oumu
}

// SetNillableUpdateByID sets the "update_by" edge to the User entity by ID if the given value is not nil.
func (oumu *OrgUnitMemberUpdate) SetNillableUpdateByID(id *int) *OrgUnitMemberUpdate {
	if id != nil {
		oumu = oumu.SetUpdateByID(*id)
	}
	return oumu
}

// SetUpdateBy sets the "update_by" edge to the User entity.
func (oumu *OrgUnitMemberUpdate) SetUpdateBy(u *User) *OrgUnitMemberUpdate {
	return oumu.SetUpdateByID(u.ID)
}

// SetUser sets the "user" edge to the User entity.
func (oumu *OrgUnitMemberUpdate) SetUser(u *User) *OrgUnitMemberUpdate {
	return oumu.SetUserID(u.ID)
}

// SetPositionID sets the "position" edge to the OrgUnitPosition entity by ID.
func (oumu *OrgUnitMemberUpdate) SetPositionID(id int) *OrgUnitMemberUpdate {
	oumu.mutation.SetPositionID(id)
	return oumu
}

// SetPosition sets the "position" edge to the OrgUnitPosition entity.
func (oumu *OrgUnitMemberUpdate) SetPosition(o *OrgUnitPosition) *OrgUnitMemberUpdate {
	return oumu.SetPositionID(o.ID)
}

// SetBelongToOrgUnitID sets the "belongToOrgUnit" edge to the OrgUnit entity by ID.
func (oumu *OrgUnitMemberUpdate) SetBelongToOrgUnitID(id int) *OrgUnitMemberUpdate {
	oumu.mutation.SetBelongToOrgUnitID(id)
	return oumu
}

// SetBelongToOrgUnit sets the "belongToOrgUnit" edge to the OrgUnit entity.
func (oumu *OrgUnitMemberUpdate) SetBelongToOrgUnit(o *OrgUnit) *OrgUnitMemberUpdate {
	return oumu.SetBelongToOrgUnitID(o.ID)
}

// Mutation returns the OrgUnitMemberMutation object of the builder.
func (oumu *OrgUnitMemberUpdate) Mutation() *OrgUnitMemberMutation {
	return oumu.mutation
}

// ClearCreateBy clears the "create_by" edge to the User entity.
func (oumu *OrgUnitMemberUpdate) ClearCreateBy() *OrgUnitMemberUpdate {
	oumu.mutation.ClearCreateBy()
	return oumu
}

// ClearUpdateBy clears the "update_by" edge to the User entity.
func (oumu *OrgUnitMemberUpdate) ClearUpdateBy() *OrgUnitMemberUpdate {
	oumu.mutation.ClearUpdateBy()
	return oumu
}

// ClearUser clears the "user" edge to the User entity.
func (oumu *OrgUnitMemberUpdate) ClearUser() *OrgUnitMemberUpdate {
	oumu.mutation.ClearUser()
	return oumu
}

// ClearPosition clears the "position" edge to the OrgUnitPosition entity.
func (oumu *OrgUnitMemberUpdate) ClearPosition() *OrgUnitMemberUpdate {
	oumu.mutation.ClearPosition()
	return oumu
}

// ClearBelongToOrgUnit clears the "belongToOrgUnit" edge to the OrgUnit entity.
func (oumu *OrgUnitMemberUpdate) ClearBelongToOrgUnit() *OrgUnitMemberUpdate {
	oumu.mutation.ClearBelongToOrgUnit()
	return oumu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oumu *OrgUnitMemberUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := oumu.defaults(); err != nil {
		return 0, err
	}
	if len(oumu.hooks) == 0 {
		if err = oumu.check(); err != nil {
			return 0, err
		}
		affected, err = oumu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrgUnitMemberMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oumu.check(); err != nil {
				return 0, err
			}
			oumu.mutation = mutation
			affected, err = oumu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(oumu.hooks) - 1; i >= 0; i-- {
			if oumu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oumu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oumu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (oumu *OrgUnitMemberUpdate) SaveX(ctx context.Context) int {
	affected, err := oumu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oumu *OrgUnitMemberUpdate) Exec(ctx context.Context) error {
	_, err := oumu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oumu *OrgUnitMemberUpdate) ExecX(ctx context.Context) {
	if err := oumu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oumu *OrgUnitMemberUpdate) defaults() error {
	if _, ok := oumu.mutation.UpdateTime(); !ok && !oumu.mutation.UpdateTimeCleared() {
		if orgunitmember.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized orgunitmember.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := orgunitmember.UpdateDefaultUpdateTime()
		oumu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (oumu *OrgUnitMemberUpdate) check() error {
	if _, ok := oumu.mutation.UserID(); oumu.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	if _, ok := oumu.mutation.PositionID(); oumu.mutation.PositionCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"position\"")
	}
	if _, ok := oumu.mutation.BelongToOrgUnitID(); oumu.mutation.BelongToOrgUnitCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"belongToOrgUnit\"")
	}
	return nil
}

func (oumu *OrgUnitMemberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orgunitmember.Table,
			Columns: orgunitmember.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orgunitmember.FieldID,
			},
		},
	}
	if ps := oumu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oumu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orgunitmember.FieldUpdateTime,
		})
	}
	if oumu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orgunitmember.FieldUpdateTime,
		})
	}
	if value, ok := oumu.mutation.IsAdditional(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: orgunitmember.FieldIsAdditional,
		})
	}
	if oumu.mutation.CreateByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitmember.CreateByTable,
			Columns: []string{orgunitmember.CreateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = oumu.schemaConfig.OrgUnitMember
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oumu.mutation.CreateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitmember.CreateByTable,
			Columns: []string{orgunitmember.CreateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = oumu.schemaConfig.OrgUnitMember
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oumu.mutation.UpdateByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitmember.UpdateByTable,
			Columns: []string{orgunitmember.UpdateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = oumu.schemaConfig.OrgUnitMember
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oumu.mutation.UpdateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitmember.UpdateByTable,
			Columns: []string{orgunitmember.UpdateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = oumu.schemaConfig.OrgUnitMember
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oumu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitmember.UserTable,
			Columns: []string{orgunitmember.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = oumu.schemaConfig.OrgUnitMember
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oumu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitmember.UserTable,
			Columns: []string{orgunitmember.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = oumu.schemaConfig.OrgUnitMember
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oumu.mutation.PositionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitmember.PositionTable,
			Columns: []string{orgunitmember.PositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunitposition.FieldID,
				},
			},
		}
		edge.Schema = oumu.schemaConfig.OrgUnitMember
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oumu.mutation.PositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitmember.PositionTable,
			Columns: []string{orgunitmember.PositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunitposition.FieldID,
				},
			},
		}
		edge.Schema = oumu.schemaConfig.OrgUnitMember
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oumu.mutation.BelongToOrgUnitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgunitmember.BelongToOrgUnitTable,
			Columns: []string{orgunitmember.BelongToOrgUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunit.FieldID,
				},
			},
		}
		edge.Schema = oumu.schemaConfig.OrgUnitMember
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oumu.mutation.BelongToOrgUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgunitmember.BelongToOrgUnitTable,
			Columns: []string{orgunitmember.BelongToOrgUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunit.FieldID,
				},
			},
		}
		edge.Schema = oumu.schemaConfig.OrgUnitMember
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = oumu.schemaConfig.OrgUnitMember
	ctx = internal.NewSchemaConfigContext(ctx, oumu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, oumu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orgunitmember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// OrgUnitMemberUpdateOne is the builder for updating a single OrgUnitMember entity.
type OrgUnitMemberUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrgUnitMemberMutation
}

// SetCreateByUser sets the "create_by_user" field.
func (oumuo *OrgUnitMemberUpdateOne) SetCreateByUser(i int) *OrgUnitMemberUpdateOne {
	oumuo.mutation.SetCreateByUser(i)
	return oumuo
}

// SetNillableCreateByUser sets the "create_by_user" field if the given value is not nil.
func (oumuo *OrgUnitMemberUpdateOne) SetNillableCreateByUser(i *int) *OrgUnitMemberUpdateOne {
	if i != nil {
		oumuo.SetCreateByUser(*i)
	}
	return oumuo
}

// ClearCreateByUser clears the value of the "create_by_user" field.
func (oumuo *OrgUnitMemberUpdateOne) ClearCreateByUser() *OrgUnitMemberUpdateOne {
	oumuo.mutation.ClearCreateByUser()
	return oumuo
}

// SetUpdateByUser sets the "update_by_user" field.
func (oumuo *OrgUnitMemberUpdateOne) SetUpdateByUser(i int) *OrgUnitMemberUpdateOne {
	oumuo.mutation.SetUpdateByUser(i)
	return oumuo
}

// SetNillableUpdateByUser sets the "update_by_user" field if the given value is not nil.
func (oumuo *OrgUnitMemberUpdateOne) SetNillableUpdateByUser(i *int) *OrgUnitMemberUpdateOne {
	if i != nil {
		oumuo.SetUpdateByUser(*i)
	}
	return oumuo
}

// ClearUpdateByUser clears the value of the "update_by_user" field.
func (oumuo *OrgUnitMemberUpdateOne) ClearUpdateByUser() *OrgUnitMemberUpdateOne {
	oumuo.mutation.ClearUpdateByUser()
	return oumuo
}

// SetUpdateTime sets the "update_time" field.
func (oumuo *OrgUnitMemberUpdateOne) SetUpdateTime(t time.Time) *OrgUnitMemberUpdateOne {
	oumuo.mutation.SetUpdateTime(t)
	return oumuo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (oumuo *OrgUnitMemberUpdateOne) ClearUpdateTime() *OrgUnitMemberUpdateOne {
	oumuo.mutation.ClearUpdateTime()
	return oumuo
}

// SetIsAdditional sets the "is_additional" field.
func (oumuo *OrgUnitMemberUpdateOne) SetIsAdditional(b bool) *OrgUnitMemberUpdateOne {
	oumuo.mutation.SetIsAdditional(b)
	return oumuo
}

// SetUserID sets the "user_id" field.
func (oumuo *OrgUnitMemberUpdateOne) SetUserID(i int) *OrgUnitMemberUpdateOne {
	oumuo.mutation.SetUserID(i)
	return oumuo
}

// SetOrgUnitID sets the "org_unit_id" field.
func (oumuo *OrgUnitMemberUpdateOne) SetOrgUnitID(i int) *OrgUnitMemberUpdateOne {
	oumuo.mutation.SetOrgUnitID(i)
	return oumuo
}

// SetOrgUnitPositionID sets the "org_unit_position_id" field.
func (oumuo *OrgUnitMemberUpdateOne) SetOrgUnitPositionID(i int) *OrgUnitMemberUpdateOne {
	oumuo.mutation.SetOrgUnitPositionID(i)
	return oumuo
}

// SetCreateByID sets the "create_by" edge to the User entity by ID.
func (oumuo *OrgUnitMemberUpdateOne) SetCreateByID(id int) *OrgUnitMemberUpdateOne {
	oumuo.mutation.SetCreateByID(id)
	return oumuo
}

// SetNillableCreateByID sets the "create_by" edge to the User entity by ID if the given value is not nil.
func (oumuo *OrgUnitMemberUpdateOne) SetNillableCreateByID(id *int) *OrgUnitMemberUpdateOne {
	if id != nil {
		oumuo = oumuo.SetCreateByID(*id)
	}
	return oumuo
}

// SetCreateBy sets the "create_by" edge to the User entity.
func (oumuo *OrgUnitMemberUpdateOne) SetCreateBy(u *User) *OrgUnitMemberUpdateOne {
	return oumuo.SetCreateByID(u.ID)
}

// SetUpdateByID sets the "update_by" edge to the User entity by ID.
func (oumuo *OrgUnitMemberUpdateOne) SetUpdateByID(id int) *OrgUnitMemberUpdateOne {
	oumuo.mutation.SetUpdateByID(id)
	return oumuo
}

// SetNillableUpdateByID sets the "update_by" edge to the User entity by ID if the given value is not nil.
func (oumuo *OrgUnitMemberUpdateOne) SetNillableUpdateByID(id *int) *OrgUnitMemberUpdateOne {
	if id != nil {
		oumuo = oumuo.SetUpdateByID(*id)
	}
	return oumuo
}

// SetUpdateBy sets the "update_by" edge to the User entity.
func (oumuo *OrgUnitMemberUpdateOne) SetUpdateBy(u *User) *OrgUnitMemberUpdateOne {
	return oumuo.SetUpdateByID(u.ID)
}

// SetUser sets the "user" edge to the User entity.
func (oumuo *OrgUnitMemberUpdateOne) SetUser(u *User) *OrgUnitMemberUpdateOne {
	return oumuo.SetUserID(u.ID)
}

// SetPositionID sets the "position" edge to the OrgUnitPosition entity by ID.
func (oumuo *OrgUnitMemberUpdateOne) SetPositionID(id int) *OrgUnitMemberUpdateOne {
	oumuo.mutation.SetPositionID(id)
	return oumuo
}

// SetPosition sets the "position" edge to the OrgUnitPosition entity.
func (oumuo *OrgUnitMemberUpdateOne) SetPosition(o *OrgUnitPosition) *OrgUnitMemberUpdateOne {
	return oumuo.SetPositionID(o.ID)
}

// SetBelongToOrgUnitID sets the "belongToOrgUnit" edge to the OrgUnit entity by ID.
func (oumuo *OrgUnitMemberUpdateOne) SetBelongToOrgUnitID(id int) *OrgUnitMemberUpdateOne {
	oumuo.mutation.SetBelongToOrgUnitID(id)
	return oumuo
}

// SetBelongToOrgUnit sets the "belongToOrgUnit" edge to the OrgUnit entity.
func (oumuo *OrgUnitMemberUpdateOne) SetBelongToOrgUnit(o *OrgUnit) *OrgUnitMemberUpdateOne {
	return oumuo.SetBelongToOrgUnitID(o.ID)
}

// Mutation returns the OrgUnitMemberMutation object of the builder.
func (oumuo *OrgUnitMemberUpdateOne) Mutation() *OrgUnitMemberMutation {
	return oumuo.mutation
}

// ClearCreateBy clears the "create_by" edge to the User entity.
func (oumuo *OrgUnitMemberUpdateOne) ClearCreateBy() *OrgUnitMemberUpdateOne {
	oumuo.mutation.ClearCreateBy()
	return oumuo
}

// ClearUpdateBy clears the "update_by" edge to the User entity.
func (oumuo *OrgUnitMemberUpdateOne) ClearUpdateBy() *OrgUnitMemberUpdateOne {
	oumuo.mutation.ClearUpdateBy()
	return oumuo
}

// ClearUser clears the "user" edge to the User entity.
func (oumuo *OrgUnitMemberUpdateOne) ClearUser() *OrgUnitMemberUpdateOne {
	oumuo.mutation.ClearUser()
	return oumuo
}

// ClearPosition clears the "position" edge to the OrgUnitPosition entity.
func (oumuo *OrgUnitMemberUpdateOne) ClearPosition() *OrgUnitMemberUpdateOne {
	oumuo.mutation.ClearPosition()
	return oumuo
}

// ClearBelongToOrgUnit clears the "belongToOrgUnit" edge to the OrgUnit entity.
func (oumuo *OrgUnitMemberUpdateOne) ClearBelongToOrgUnit() *OrgUnitMemberUpdateOne {
	oumuo.mutation.ClearBelongToOrgUnit()
	return oumuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oumuo *OrgUnitMemberUpdateOne) Select(field string, fields ...string) *OrgUnitMemberUpdateOne {
	oumuo.fields = append([]string{field}, fields...)
	return oumuo
}

// Save executes the query and returns the updated OrgUnitMember entity.
func (oumuo *OrgUnitMemberUpdateOne) Save(ctx context.Context) (*OrgUnitMember, error) {
	var (
		err  error
		node *OrgUnitMember
	)
	if err := oumuo.defaults(); err != nil {
		return nil, err
	}
	if len(oumuo.hooks) == 0 {
		if err = oumuo.check(); err != nil {
			return nil, err
		}
		node, err = oumuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrgUnitMemberMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oumuo.check(); err != nil {
				return nil, err
			}
			oumuo.mutation = mutation
			node, err = oumuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oumuo.hooks) - 1; i >= 0; i-- {
			if oumuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oumuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oumuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (oumuo *OrgUnitMemberUpdateOne) SaveX(ctx context.Context) *OrgUnitMember {
	node, err := oumuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oumuo *OrgUnitMemberUpdateOne) Exec(ctx context.Context) error {
	_, err := oumuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oumuo *OrgUnitMemberUpdateOne) ExecX(ctx context.Context) {
	if err := oumuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oumuo *OrgUnitMemberUpdateOne) defaults() error {
	if _, ok := oumuo.mutation.UpdateTime(); !ok && !oumuo.mutation.UpdateTimeCleared() {
		if orgunitmember.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized orgunitmember.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := orgunitmember.UpdateDefaultUpdateTime()
		oumuo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (oumuo *OrgUnitMemberUpdateOne) check() error {
	if _, ok := oumuo.mutation.UserID(); oumuo.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	if _, ok := oumuo.mutation.PositionID(); oumuo.mutation.PositionCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"position\"")
	}
	if _, ok := oumuo.mutation.BelongToOrgUnitID(); oumuo.mutation.BelongToOrgUnitCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"belongToOrgUnit\"")
	}
	return nil
}

func (oumuo *OrgUnitMemberUpdateOne) sqlSave(ctx context.Context) (_node *OrgUnitMember, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orgunitmember.Table,
			Columns: orgunitmember.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orgunitmember.FieldID,
			},
		},
	}
	id, ok := oumuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing OrgUnitMember.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := oumuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orgunitmember.FieldID)
		for _, f := range fields {
			if !orgunitmember.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orgunitmember.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oumuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oumuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orgunitmember.FieldUpdateTime,
		})
	}
	if oumuo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orgunitmember.FieldUpdateTime,
		})
	}
	if value, ok := oumuo.mutation.IsAdditional(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: orgunitmember.FieldIsAdditional,
		})
	}
	if oumuo.mutation.CreateByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitmember.CreateByTable,
			Columns: []string{orgunitmember.CreateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = oumuo.schemaConfig.OrgUnitMember
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oumuo.mutation.CreateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitmember.CreateByTable,
			Columns: []string{orgunitmember.CreateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = oumuo.schemaConfig.OrgUnitMember
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oumuo.mutation.UpdateByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitmember.UpdateByTable,
			Columns: []string{orgunitmember.UpdateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = oumuo.schemaConfig.OrgUnitMember
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oumuo.mutation.UpdateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitmember.UpdateByTable,
			Columns: []string{orgunitmember.UpdateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = oumuo.schemaConfig.OrgUnitMember
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oumuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitmember.UserTable,
			Columns: []string{orgunitmember.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = oumuo.schemaConfig.OrgUnitMember
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oumuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitmember.UserTable,
			Columns: []string{orgunitmember.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = oumuo.schemaConfig.OrgUnitMember
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oumuo.mutation.PositionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitmember.PositionTable,
			Columns: []string{orgunitmember.PositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunitposition.FieldID,
				},
			},
		}
		edge.Schema = oumuo.schemaConfig.OrgUnitMember
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oumuo.mutation.PositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgunitmember.PositionTable,
			Columns: []string{orgunitmember.PositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunitposition.FieldID,
				},
			},
		}
		edge.Schema = oumuo.schemaConfig.OrgUnitMember
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oumuo.mutation.BelongToOrgUnitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgunitmember.BelongToOrgUnitTable,
			Columns: []string{orgunitmember.BelongToOrgUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunit.FieldID,
				},
			},
		}
		edge.Schema = oumuo.schemaConfig.OrgUnitMember
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oumuo.mutation.BelongToOrgUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgunitmember.BelongToOrgUnitTable,
			Columns: []string{orgunitmember.BelongToOrgUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunit.FieldID,
				},
			},
		}
		edge.Schema = oumuo.schemaConfig.OrgUnitMember
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = oumuo.schemaConfig.OrgUnitMember
	ctx = internal.NewSchemaConfigContext(ctx, oumuo.schemaConfig)
	_node = &OrgUnitMember{config: oumuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oumuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orgunitmember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
