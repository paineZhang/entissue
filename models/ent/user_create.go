// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wing/models/ent/auth"
	"wing/models/ent/jobhistory"
	"wing/models/ent/organization"
	"wing/models/ent/orgunitmember"
	"wing/models/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateByUser sets the "create_by_user" field.
func (uc *UserCreate) SetCreateByUser(i int) *UserCreate {
	uc.mutation.SetCreateByUser(i)
	return uc
}

// SetNillableCreateByUser sets the "create_by_user" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreateByUser(i *int) *UserCreate {
	if i != nil {
		uc.SetCreateByUser(*i)
	}
	return uc
}

// SetUpdateByUser sets the "update_by_user" field.
func (uc *UserCreate) SetUpdateByUser(i int) *UserCreate {
	uc.mutation.SetUpdateByUser(i)
	return uc
}

// SetNillableUpdateByUser sets the "update_by_user" field if the given value is not nil.
func (uc *UserCreate) SetNillableUpdateByUser(i *int) *UserCreate {
	if i != nil {
		uc.SetUpdateByUser(*i)
	}
	return uc
}

// SetCreateTime sets the "create_time" field.
func (uc *UserCreate) SetCreateTime(t time.Time) *UserCreate {
	uc.mutation.SetCreateTime(t)
	return uc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreateTime(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreateTime(*t)
	}
	return uc
}

// SetUpdateTime sets the "update_time" field.
func (uc *UserCreate) SetUpdateTime(t time.Time) *UserCreate {
	uc.mutation.SetUpdateTime(t)
	return uc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (uc *UserCreate) SetNillableUpdateTime(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetUpdateTime(*t)
	}
	return uc
}

// SetAccountName sets the "account_name" field.
func (uc *UserCreate) SetAccountName(s string) *UserCreate {
	uc.mutation.SetAccountName(s)
	return uc
}

// SetStaffType sets the "staff_type" field.
func (uc *UserCreate) SetStaffType(ut user.StaffType) *UserCreate {
	uc.mutation.SetStaffType(ut)
	return uc
}

// SetIsOnJob sets the "is_on_job" field.
func (uc *UserCreate) SetIsOnJob(b bool) *UserCreate {
	uc.mutation.SetIsOnJob(b)
	return uc
}

// SetNillableIsOnJob sets the "is_on_job" field if the given value is not nil.
func (uc *UserCreate) SetNillableIsOnJob(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsOnJob(*b)
	}
	return uc
}

// SetFamilyName sets the "family_name" field.
func (uc *UserCreate) SetFamilyName(s string) *UserCreate {
	uc.mutation.SetFamilyName(s)
	return uc
}

// SetGivenName sets the "given_name" field.
func (uc *UserCreate) SetGivenName(s string) *UserCreate {
	uc.mutation.SetGivenName(s)
	return uc
}

// SetDisplayName sets the "display_name" field.
func (uc *UserCreate) SetDisplayName(s string) *UserCreate {
	uc.mutation.SetDisplayName(s)
	return uc
}

// SetBirthday sets the "birthday" field.
func (uc *UserCreate) SetBirthday(t time.Time) *UserCreate {
	uc.mutation.SetBirthday(t)
	return uc
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (uc *UserCreate) SetNillableBirthday(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetBirthday(*t)
	}
	return uc
}

// SetIDNumber sets the "id_number" field.
func (uc *UserCreate) SetIDNumber(s string) *UserCreate {
	uc.mutation.SetIDNumber(s)
	return uc
}

// SetNillableIDNumber sets the "id_number" field if the given value is not nil.
func (uc *UserCreate) SetNillableIDNumber(s *string) *UserCreate {
	if s != nil {
		uc.SetIDNumber(*s)
	}
	return uc
}

// SetSex sets the "sex" field.
func (uc *UserCreate) SetSex(u user.Sex) *UserCreate {
	uc.mutation.SetSex(u)
	return uc
}

// SetNillableSex sets the "sex" field if the given value is not nil.
func (uc *UserCreate) SetNillableSex(u *user.Sex) *UserCreate {
	if u != nil {
		uc.SetSex(*u)
	}
	return uc
}

// SetPhoneNumber sets the "phone_number" field.
func (uc *UserCreate) SetPhoneNumber(s string) *UserCreate {
	uc.mutation.SetPhoneNumber(s)
	return uc
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (uc *UserCreate) SetNillablePhoneNumber(s *string) *UserCreate {
	if s != nil {
		uc.SetPhoneNumber(*s)
	}
	return uc
}

// SetAddress sets the "address" field.
func (uc *UserCreate) SetAddress(s string) *UserCreate {
	uc.mutation.SetAddress(s)
	return uc
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (uc *UserCreate) SetNillableAddress(s *string) *UserCreate {
	if s != nil {
		uc.SetAddress(*s)
	}
	return uc
}

// SetStaffID sets the "staff_id" field.
func (uc *UserCreate) SetStaffID(s string) *UserCreate {
	uc.mutation.SetStaffID(s)
	return uc
}

// SetNillableStaffID sets the "staff_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableStaffID(s *string) *UserCreate {
	if s != nil {
		uc.SetStaffID(*s)
	}
	return uc
}

// SetPersonalEmail sets the "personal_email" field.
func (uc *UserCreate) SetPersonalEmail(s string) *UserCreate {
	uc.mutation.SetPersonalEmail(s)
	return uc
}

// SetNillablePersonalEmail sets the "personal_email" field if the given value is not nil.
func (uc *UserCreate) SetNillablePersonalEmail(s *string) *UserCreate {
	if s != nil {
		uc.SetPersonalEmail(*s)
	}
	return uc
}

// SetIntranetWorkEmail sets the "intranet_work_email" field.
func (uc *UserCreate) SetIntranetWorkEmail(s string) *UserCreate {
	uc.mutation.SetIntranetWorkEmail(s)
	return uc
}

// SetExtranetWorkEmail sets the "extranet_work_email" field.
func (uc *UserCreate) SetExtranetWorkEmail(s string) *UserCreate {
	uc.mutation.SetExtranetWorkEmail(s)
	return uc
}

// SetNillableExtranetWorkEmail sets the "extranet_work_email" field if the given value is not nil.
func (uc *UserCreate) SetNillableExtranetWorkEmail(s *string) *UserCreate {
	if s != nil {
		uc.SetExtranetWorkEmail(*s)
	}
	return uc
}

// SetCreateByID sets the "create_by" edge to the User entity by ID.
func (uc *UserCreate) SetCreateByID(id int) *UserCreate {
	uc.mutation.SetCreateByID(id)
	return uc
}

// SetNillableCreateByID sets the "create_by" edge to the User entity by ID if the given value is not nil.
func (uc *UserCreate) SetNillableCreateByID(id *int) *UserCreate {
	if id != nil {
		uc = uc.SetCreateByID(*id)
	}
	return uc
}

// SetCreateBy sets the "create_by" edge to the User entity.
func (uc *UserCreate) SetCreateBy(u *User) *UserCreate {
	return uc.SetCreateByID(u.ID)
}

// SetUpdateByID sets the "update_by" edge to the User entity by ID.
func (uc *UserCreate) SetUpdateByID(id int) *UserCreate {
	uc.mutation.SetUpdateByID(id)
	return uc
}

// SetNillableUpdateByID sets the "update_by" edge to the User entity by ID if the given value is not nil.
func (uc *UserCreate) SetNillableUpdateByID(id *int) *UserCreate {
	if id != nil {
		uc = uc.SetUpdateByID(*id)
	}
	return uc
}

// SetUpdateBy sets the "update_by" edge to the User entity.
func (uc *UserCreate) SetUpdateBy(u *User) *UserCreate {
	return uc.SetUpdateByID(u.ID)
}

// AddAuthHistoryIDs adds the "authHistories" edge to the Auth entity by IDs.
func (uc *UserCreate) AddAuthHistoryIDs(ids ...int) *UserCreate {
	uc.mutation.AddAuthHistoryIDs(ids...)
	return uc
}

// AddAuthHistories adds the "authHistories" edges to the Auth entity.
func (uc *UserCreate) AddAuthHistories(a ...*Auth) *UserCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uc.AddAuthHistoryIDs(ids...)
}

// AddJobHistoryIDs adds the "jobHistories" edge to the JobHistory entity by IDs.
func (uc *UserCreate) AddJobHistoryIDs(ids ...int) *UserCreate {
	uc.mutation.AddJobHistoryIDs(ids...)
	return uc
}

// AddJobHistories adds the "jobHistories" edges to the JobHistory entity.
func (uc *UserCreate) AddJobHistories(j ...*JobHistory) *UserCreate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return uc.AddJobHistoryIDs(ids...)
}

// AddCreateIDs adds the "creates" edge to the User entity by IDs.
func (uc *UserCreate) AddCreateIDs(ids ...int) *UserCreate {
	uc.mutation.AddCreateIDs(ids...)
	return uc
}

// AddCreates adds the "creates" edges to the User entity.
func (uc *UserCreate) AddCreates(u ...*User) *UserCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddCreateIDs(ids...)
}

// AddUpdateIDs adds the "updates" edge to the User entity by IDs.
func (uc *UserCreate) AddUpdateIDs(ids ...int) *UserCreate {
	uc.mutation.AddUpdateIDs(ids...)
	return uc
}

// AddUpdates adds the "updates" edges to the User entity.
func (uc *UserCreate) AddUpdates(u ...*User) *UserCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddUpdateIDs(ids...)
}

// AddBelongToOrgUnitMemberIDs adds the "belongToOrgUnitMembers" edge to the OrgUnitMember entity by IDs.
func (uc *UserCreate) AddBelongToOrgUnitMemberIDs(ids ...int) *UserCreate {
	uc.mutation.AddBelongToOrgUnitMemberIDs(ids...)
	return uc
}

// AddBelongToOrgUnitMembers adds the "belongToOrgUnitMembers" edges to the OrgUnitMember entity.
func (uc *UserCreate) AddBelongToOrgUnitMembers(o ...*OrgUnitMember) *UserCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uc.AddBelongToOrgUnitMemberIDs(ids...)
}

// AddBelongToOgIDs adds the "belongToOg" edge to the Organization entity by IDs.
func (uc *UserCreate) AddBelongToOgIDs(ids ...int) *UserCreate {
	uc.mutation.AddBelongToOgIDs(ids...)
	return uc
}

// AddBelongToOg adds the "belongToOg" edges to the Organization entity.
func (uc *UserCreate) AddBelongToOg(o ...*Organization) *UserCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uc.AddBelongToOgIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	if err := uc.defaults(); err != nil {
		return nil, err
	}
	if len(uc.hooks) == 0 {
		if err = uc.check(); err != nil {
			return nil, err
		}
		node, err = uc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uc.check(); err != nil {
				return nil, err
			}
			uc.mutation = mutation
			if node, err = uc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(uc.hooks) - 1; i >= 0; i-- {
			if uc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() error {
	if _, ok := uc.mutation.CreateTime(); !ok {
		if user.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized user.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := user.DefaultCreateTime()
		uc.mutation.SetCreateTime(v)
	}
	if _, ok := uc.mutation.UpdateTime(); !ok {
		if user.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized user.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := user.DefaultUpdateTime()
		uc.mutation.SetUpdateTime(v)
	}
	if _, ok := uc.mutation.IsOnJob(); !ok {
		v := user.DefaultIsOnJob
		uc.mutation.SetIsOnJob(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "create_time"`)}
	}
	if _, ok := uc.mutation.AccountName(); !ok {
		return &ValidationError{Name: "account_name", err: errors.New(`ent: missing required field "account_name"`)}
	}
	if v, ok := uc.mutation.AccountName(); ok {
		if err := user.AccountNameValidator(v); err != nil {
			return &ValidationError{Name: "account_name", err: fmt.Errorf(`ent: validator failed for field "account_name": %w`, err)}
		}
	}
	if _, ok := uc.mutation.StaffType(); !ok {
		return &ValidationError{Name: "staff_type", err: errors.New(`ent: missing required field "staff_type"`)}
	}
	if v, ok := uc.mutation.StaffType(); ok {
		if err := user.StaffTypeValidator(v); err != nil {
			return &ValidationError{Name: "staff_type", err: fmt.Errorf(`ent: validator failed for field "staff_type": %w`, err)}
		}
	}
	if _, ok := uc.mutation.IsOnJob(); !ok {
		return &ValidationError{Name: "is_on_job", err: errors.New(`ent: missing required field "is_on_job"`)}
	}
	if _, ok := uc.mutation.FamilyName(); !ok {
		return &ValidationError{Name: "family_name", err: errors.New(`ent: missing required field "family_name"`)}
	}
	if v, ok := uc.mutation.FamilyName(); ok {
		if err := user.FamilyNameValidator(v); err != nil {
			return &ValidationError{Name: "family_name", err: fmt.Errorf(`ent: validator failed for field "family_name": %w`, err)}
		}
	}
	if _, ok := uc.mutation.GivenName(); !ok {
		return &ValidationError{Name: "given_name", err: errors.New(`ent: missing required field "given_name"`)}
	}
	if v, ok := uc.mutation.GivenName(); ok {
		if err := user.GivenNameValidator(v); err != nil {
			return &ValidationError{Name: "given_name", err: fmt.Errorf(`ent: validator failed for field "given_name": %w`, err)}
		}
	}
	if _, ok := uc.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`ent: missing required field "display_name"`)}
	}
	if v, ok := uc.mutation.DisplayName(); ok {
		if err := user.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "display_name": %w`, err)}
		}
	}
	if v, ok := uc.mutation.IDNumber(); ok {
		if err := user.IDNumberValidator(v); err != nil {
			return &ValidationError{Name: "id_number", err: fmt.Errorf(`ent: validator failed for field "id_number": %w`, err)}
		}
	}
	if v, ok := uc.mutation.Sex(); ok {
		if err := user.SexValidator(v); err != nil {
			return &ValidationError{Name: "sex", err: fmt.Errorf(`ent: validator failed for field "sex": %w`, err)}
		}
	}
	if v, ok := uc.mutation.PhoneNumber(); ok {
		if err := user.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "phone_number": %w`, err)}
		}
	}
	if v, ok := uc.mutation.Address(); ok {
		if err := user.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "address": %w`, err)}
		}
	}
	if v, ok := uc.mutation.StaffID(); ok {
		if err := user.StaffIDValidator(v); err != nil {
			return &ValidationError{Name: "staff_id", err: fmt.Errorf(`ent: validator failed for field "staff_id": %w`, err)}
		}
	}
	if v, ok := uc.mutation.PersonalEmail(); ok {
		if err := user.PersonalEmailValidator(v); err != nil {
			return &ValidationError{Name: "personal_email", err: fmt.Errorf(`ent: validator failed for field "personal_email": %w`, err)}
		}
	}
	if _, ok := uc.mutation.IntranetWorkEmail(); !ok {
		return &ValidationError{Name: "intranet_work_email", err: errors.New(`ent: missing required field "intranet_work_email"`)}
	}
	if v, ok := uc.mutation.IntranetWorkEmail(); ok {
		if err := user.IntranetWorkEmailValidator(v); err != nil {
			return &ValidationError{Name: "intranet_work_email", err: fmt.Errorf(`ent: validator failed for field "intranet_work_email": %w`, err)}
		}
	}
	if v, ok := uc.mutation.ExtranetWorkEmail(); ok {
		if err := user.ExtranetWorkEmailValidator(v); err != nil {
			return &ValidationError{Name: "extranet_work_email", err: fmt.Errorf(`ent: validator failed for field "extranet_work_email": %w`, err)}
		}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: user.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		}
	)
	_spec.Schema = uc.schemaConfig.User
	_spec.OnConflict = uc.conflict
	if value, ok := uc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := uc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldUpdateTime,
		})
		_node.UpdateTime = &value
	}
	if value, ok := uc.mutation.AccountName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldAccountName,
		})
		_node.AccountName = value
	}
	if value, ok := uc.mutation.StaffType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: user.FieldStaffType,
		})
		_node.StaffType = value
	}
	if value, ok := uc.mutation.IsOnJob(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldIsOnJob,
		})
		_node.IsOnJob = value
	}
	if value, ok := uc.mutation.FamilyName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldFamilyName,
		})
		_node.FamilyName = value
	}
	if value, ok := uc.mutation.GivenName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldGivenName,
		})
		_node.GivenName = value
	}
	if value, ok := uc.mutation.DisplayName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldDisplayName,
		})
		_node.DisplayName = value
	}
	if value, ok := uc.mutation.Birthday(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldBirthday,
		})
		_node.Birthday = &value
	}
	if value, ok := uc.mutation.IDNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldIDNumber,
		})
		_node.IDNumber = &value
	}
	if value, ok := uc.mutation.Sex(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: user.FieldSex,
		})
		_node.Sex = &value
	}
	if value, ok := uc.mutation.PhoneNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPhoneNumber,
		})
		_node.PhoneNumber = &value
	}
	if value, ok := uc.mutation.Address(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldAddress,
		})
		_node.Address = &value
	}
	if value, ok := uc.mutation.StaffID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldStaffID,
		})
		_node.StaffID = value
	}
	if value, ok := uc.mutation.PersonalEmail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPersonalEmail,
		})
		_node.PersonalEmail = value
	}
	if value, ok := uc.mutation.IntranetWorkEmail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldIntranetWorkEmail,
		})
		_node.IntranetWorkEmail = value
	}
	if value, ok := uc.mutation.ExtranetWorkEmail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldExtranetWorkEmail,
		})
		_node.ExtranetWorkEmail = value
	}
	if nodes := uc.mutation.CreateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.CreateByTable,
			Columns: []string{user.CreateByColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = uc.schemaConfig.User
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreateByUser = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UpdateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.UpdateByTable,
			Columns: []string{user.UpdateByColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = uc.schemaConfig.User
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UpdateByUser = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.AuthHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuthHistoriesTable,
			Columns: []string{user.AuthHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: auth.FieldID,
				},
			},
		}
		edge.Schema = uc.schemaConfig.Auth
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.JobHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobHistoriesTable,
			Columns: []string{user.JobHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: jobhistory.FieldID,
				},
			},
		}
		edge.Schema = uc.schemaConfig.JobHistory
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.CreatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.CreatesTable,
			Columns: []string{user.CreatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = uc.schemaConfig.User
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UpdatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UpdatesTable,
			Columns: []string{user.UpdatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = uc.schemaConfig.User
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.BelongToOrgUnitMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.BelongToOrgUnitMembersTable,
			Columns: []string{user.BelongToOrgUnitMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgunitmember.FieldID,
				},
			},
		}
		edge.Schema = uc.schemaConfig.OrgUnitMember
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.BelongToOgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.BelongToOgTable,
			Columns: user.BelongToOgPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		edge.Schema = uc.schemaConfig.OrganizationStaffs
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.Create().
//		SetCreateByUser(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetCreateByUser(v+v).
//		}).
//		Exec(ctx)
//
func (uc *UserCreate) OnConflict(opts ...sql.ConflictOption) *UserUpsertOne {
	uc.conflict = opts
	return &UserUpsertOne{
		create: uc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (uc *UserCreate) OnConflictColumns(columns ...string) *UserUpsertOne {
	uc.conflict = append(uc.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertOne{
		create: uc,
	}
}

type (
	// UserUpsertOne is the builder for "upsert"-ing
	//  one User node.
	UserUpsertOne struct {
		create *UserCreate
	}

	// UserUpsert is the "OnConflict" setter.
	UserUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreateByUser sets the "create_by_user" field.
func (u *UserUpsert) SetCreateByUser(v int) *UserUpsert {
	u.Set(user.FieldCreateByUser, v)
	return u
}

// UpdateCreateByUser sets the "create_by_user" field to the value that was provided on create.
func (u *UserUpsert) UpdateCreateByUser() *UserUpsert {
	u.SetExcluded(user.FieldCreateByUser)
	return u
}

// ClearCreateByUser clears the value of the "create_by_user" field.
func (u *UserUpsert) ClearCreateByUser() *UserUpsert {
	u.SetNull(user.FieldCreateByUser)
	return u
}

// SetUpdateByUser sets the "update_by_user" field.
func (u *UserUpsert) SetUpdateByUser(v int) *UserUpsert {
	u.Set(user.FieldUpdateByUser, v)
	return u
}

// UpdateUpdateByUser sets the "update_by_user" field to the value that was provided on create.
func (u *UserUpsert) UpdateUpdateByUser() *UserUpsert {
	u.SetExcluded(user.FieldUpdateByUser)
	return u
}

// ClearUpdateByUser clears the value of the "update_by_user" field.
func (u *UserUpsert) ClearUpdateByUser() *UserUpsert {
	u.SetNull(user.FieldUpdateByUser)
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *UserUpsert) SetCreateTime(v time.Time) *UserUpsert {
	u.Set(user.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *UserUpsert) UpdateCreateTime() *UserUpsert {
	u.SetExcluded(user.FieldCreateTime)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *UserUpsert) SetUpdateTime(v time.Time) *UserUpsert {
	u.Set(user.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *UserUpsert) UpdateUpdateTime() *UserUpsert {
	u.SetExcluded(user.FieldUpdateTime)
	return u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *UserUpsert) ClearUpdateTime() *UserUpsert {
	u.SetNull(user.FieldUpdateTime)
	return u
}

// SetAccountName sets the "account_name" field.
func (u *UserUpsert) SetAccountName(v string) *UserUpsert {
	u.Set(user.FieldAccountName, v)
	return u
}

// UpdateAccountName sets the "account_name" field to the value that was provided on create.
func (u *UserUpsert) UpdateAccountName() *UserUpsert {
	u.SetExcluded(user.FieldAccountName)
	return u
}

// SetStaffType sets the "staff_type" field.
func (u *UserUpsert) SetStaffType(v user.StaffType) *UserUpsert {
	u.Set(user.FieldStaffType, v)
	return u
}

// UpdateStaffType sets the "staff_type" field to the value that was provided on create.
func (u *UserUpsert) UpdateStaffType() *UserUpsert {
	u.SetExcluded(user.FieldStaffType)
	return u
}

// SetIsOnJob sets the "is_on_job" field.
func (u *UserUpsert) SetIsOnJob(v bool) *UserUpsert {
	u.Set(user.FieldIsOnJob, v)
	return u
}

// UpdateIsOnJob sets the "is_on_job" field to the value that was provided on create.
func (u *UserUpsert) UpdateIsOnJob() *UserUpsert {
	u.SetExcluded(user.FieldIsOnJob)
	return u
}

// SetFamilyName sets the "family_name" field.
func (u *UserUpsert) SetFamilyName(v string) *UserUpsert {
	u.Set(user.FieldFamilyName, v)
	return u
}

// UpdateFamilyName sets the "family_name" field to the value that was provided on create.
func (u *UserUpsert) UpdateFamilyName() *UserUpsert {
	u.SetExcluded(user.FieldFamilyName)
	return u
}

// SetGivenName sets the "given_name" field.
func (u *UserUpsert) SetGivenName(v string) *UserUpsert {
	u.Set(user.FieldGivenName, v)
	return u
}

// UpdateGivenName sets the "given_name" field to the value that was provided on create.
func (u *UserUpsert) UpdateGivenName() *UserUpsert {
	u.SetExcluded(user.FieldGivenName)
	return u
}

// SetDisplayName sets the "display_name" field.
func (u *UserUpsert) SetDisplayName(v string) *UserUpsert {
	u.Set(user.FieldDisplayName, v)
	return u
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *UserUpsert) UpdateDisplayName() *UserUpsert {
	u.SetExcluded(user.FieldDisplayName)
	return u
}

// SetBirthday sets the "birthday" field.
func (u *UserUpsert) SetBirthday(v time.Time) *UserUpsert {
	u.Set(user.FieldBirthday, v)
	return u
}

// UpdateBirthday sets the "birthday" field to the value that was provided on create.
func (u *UserUpsert) UpdateBirthday() *UserUpsert {
	u.SetExcluded(user.FieldBirthday)
	return u
}

// ClearBirthday clears the value of the "birthday" field.
func (u *UserUpsert) ClearBirthday() *UserUpsert {
	u.SetNull(user.FieldBirthday)
	return u
}

// SetIDNumber sets the "id_number" field.
func (u *UserUpsert) SetIDNumber(v string) *UserUpsert {
	u.Set(user.FieldIDNumber, v)
	return u
}

// UpdateIDNumber sets the "id_number" field to the value that was provided on create.
func (u *UserUpsert) UpdateIDNumber() *UserUpsert {
	u.SetExcluded(user.FieldIDNumber)
	return u
}

// ClearIDNumber clears the value of the "id_number" field.
func (u *UserUpsert) ClearIDNumber() *UserUpsert {
	u.SetNull(user.FieldIDNumber)
	return u
}

// SetSex sets the "sex" field.
func (u *UserUpsert) SetSex(v user.Sex) *UserUpsert {
	u.Set(user.FieldSex, v)
	return u
}

// UpdateSex sets the "sex" field to the value that was provided on create.
func (u *UserUpsert) UpdateSex() *UserUpsert {
	u.SetExcluded(user.FieldSex)
	return u
}

// ClearSex clears the value of the "sex" field.
func (u *UserUpsert) ClearSex() *UserUpsert {
	u.SetNull(user.FieldSex)
	return u
}

// SetPhoneNumber sets the "phone_number" field.
func (u *UserUpsert) SetPhoneNumber(v string) *UserUpsert {
	u.Set(user.FieldPhoneNumber, v)
	return u
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *UserUpsert) UpdatePhoneNumber() *UserUpsert {
	u.SetExcluded(user.FieldPhoneNumber)
	return u
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (u *UserUpsert) ClearPhoneNumber() *UserUpsert {
	u.SetNull(user.FieldPhoneNumber)
	return u
}

// SetAddress sets the "address" field.
func (u *UserUpsert) SetAddress(v string) *UserUpsert {
	u.Set(user.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *UserUpsert) UpdateAddress() *UserUpsert {
	u.SetExcluded(user.FieldAddress)
	return u
}

// ClearAddress clears the value of the "address" field.
func (u *UserUpsert) ClearAddress() *UserUpsert {
	u.SetNull(user.FieldAddress)
	return u
}

// SetStaffID sets the "staff_id" field.
func (u *UserUpsert) SetStaffID(v string) *UserUpsert {
	u.Set(user.FieldStaffID, v)
	return u
}

// UpdateStaffID sets the "staff_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateStaffID() *UserUpsert {
	u.SetExcluded(user.FieldStaffID)
	return u
}

// ClearStaffID clears the value of the "staff_id" field.
func (u *UserUpsert) ClearStaffID() *UserUpsert {
	u.SetNull(user.FieldStaffID)
	return u
}

// SetPersonalEmail sets the "personal_email" field.
func (u *UserUpsert) SetPersonalEmail(v string) *UserUpsert {
	u.Set(user.FieldPersonalEmail, v)
	return u
}

// UpdatePersonalEmail sets the "personal_email" field to the value that was provided on create.
func (u *UserUpsert) UpdatePersonalEmail() *UserUpsert {
	u.SetExcluded(user.FieldPersonalEmail)
	return u
}

// ClearPersonalEmail clears the value of the "personal_email" field.
func (u *UserUpsert) ClearPersonalEmail() *UserUpsert {
	u.SetNull(user.FieldPersonalEmail)
	return u
}

// SetIntranetWorkEmail sets the "intranet_work_email" field.
func (u *UserUpsert) SetIntranetWorkEmail(v string) *UserUpsert {
	u.Set(user.FieldIntranetWorkEmail, v)
	return u
}

// UpdateIntranetWorkEmail sets the "intranet_work_email" field to the value that was provided on create.
func (u *UserUpsert) UpdateIntranetWorkEmail() *UserUpsert {
	u.SetExcluded(user.FieldIntranetWorkEmail)
	return u
}

// SetExtranetWorkEmail sets the "extranet_work_email" field.
func (u *UserUpsert) SetExtranetWorkEmail(v string) *UserUpsert {
	u.Set(user.FieldExtranetWorkEmail, v)
	return u
}

// UpdateExtranetWorkEmail sets the "extranet_work_email" field to the value that was provided on create.
func (u *UserUpsert) UpdateExtranetWorkEmail() *UserUpsert {
	u.SetExcluded(user.FieldExtranetWorkEmail)
	return u
}

// ClearExtranetWorkEmail clears the value of the "extranet_work_email" field.
func (u *UserUpsert) ClearExtranetWorkEmail() *UserUpsert {
	u.SetNull(user.FieldExtranetWorkEmail)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *UserUpsertOne) UpdateNewValues() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.User.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *UserUpsertOne) Ignore() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertOne) DoNothing() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreate.OnConflict
// documentation for more info.
func (u *UserUpsertOne) Update(set func(*UserUpsert)) *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateByUser sets the "create_by_user" field.
func (u *UserUpsertOne) SetCreateByUser(v int) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetCreateByUser(v)
	})
}

// UpdateCreateByUser sets the "create_by_user" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateCreateByUser() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCreateByUser()
	})
}

// ClearCreateByUser clears the value of the "create_by_user" field.
func (u *UserUpsertOne) ClearCreateByUser() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearCreateByUser()
	})
}

// SetUpdateByUser sets the "update_by_user" field.
func (u *UserUpsertOne) SetUpdateByUser(v int) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdateByUser(v)
	})
}

// UpdateUpdateByUser sets the "update_by_user" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUpdateByUser() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdateByUser()
	})
}

// ClearUpdateByUser clears the value of the "update_by_user" field.
func (u *UserUpsertOne) ClearUpdateByUser() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearUpdateByUser()
	})
}

// SetCreateTime sets the "create_time" field.
func (u *UserUpsertOne) SetCreateTime(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateCreateTime() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *UserUpsertOne) SetUpdateTime(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUpdateTime() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *UserUpsertOne) ClearUpdateTime() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearUpdateTime()
	})
}

// SetAccountName sets the "account_name" field.
func (u *UserUpsertOne) SetAccountName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetAccountName(v)
	})
}

// UpdateAccountName sets the "account_name" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateAccountName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAccountName()
	})
}

// SetStaffType sets the "staff_type" field.
func (u *UserUpsertOne) SetStaffType(v user.StaffType) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetStaffType(v)
	})
}

// UpdateStaffType sets the "staff_type" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateStaffType() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStaffType()
	})
}

// SetIsOnJob sets the "is_on_job" field.
func (u *UserUpsertOne) SetIsOnJob(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetIsOnJob(v)
	})
}

// UpdateIsOnJob sets the "is_on_job" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateIsOnJob() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsOnJob()
	})
}

// SetFamilyName sets the "family_name" field.
func (u *UserUpsertOne) SetFamilyName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetFamilyName(v)
	})
}

// UpdateFamilyName sets the "family_name" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateFamilyName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateFamilyName()
	})
}

// SetGivenName sets the "given_name" field.
func (u *UserUpsertOne) SetGivenName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetGivenName(v)
	})
}

// UpdateGivenName sets the "given_name" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateGivenName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateGivenName()
	})
}

// SetDisplayName sets the "display_name" field.
func (u *UserUpsertOne) SetDisplayName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateDisplayName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDisplayName()
	})
}

// SetBirthday sets the "birthday" field.
func (u *UserUpsertOne) SetBirthday(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetBirthday(v)
	})
}

// UpdateBirthday sets the "birthday" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateBirthday() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBirthday()
	})
}

// ClearBirthday clears the value of the "birthday" field.
func (u *UserUpsertOne) ClearBirthday() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearBirthday()
	})
}

// SetIDNumber sets the "id_number" field.
func (u *UserUpsertOne) SetIDNumber(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetIDNumber(v)
	})
}

// UpdateIDNumber sets the "id_number" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateIDNumber() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIDNumber()
	})
}

// ClearIDNumber clears the value of the "id_number" field.
func (u *UserUpsertOne) ClearIDNumber() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearIDNumber()
	})
}

// SetSex sets the "sex" field.
func (u *UserUpsertOne) SetSex(v user.Sex) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetSex(v)
	})
}

// UpdateSex sets the "sex" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateSex() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateSex()
	})
}

// ClearSex clears the value of the "sex" field.
func (u *UserUpsertOne) ClearSex() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearSex()
	})
}

// SetPhoneNumber sets the "phone_number" field.
func (u *UserUpsertOne) SetPhoneNumber(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPhoneNumber(v)
	})
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePhoneNumber() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePhoneNumber()
	})
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (u *UserUpsertOne) ClearPhoneNumber() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearPhoneNumber()
	})
}

// SetAddress sets the "address" field.
func (u *UserUpsertOne) SetAddress(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateAddress() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *UserUpsertOne) ClearAddress() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearAddress()
	})
}

// SetStaffID sets the "staff_id" field.
func (u *UserUpsertOne) SetStaffID(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetStaffID(v)
	})
}

// UpdateStaffID sets the "staff_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateStaffID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStaffID()
	})
}

// ClearStaffID clears the value of the "staff_id" field.
func (u *UserUpsertOne) ClearStaffID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearStaffID()
	})
}

// SetPersonalEmail sets the "personal_email" field.
func (u *UserUpsertOne) SetPersonalEmail(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPersonalEmail(v)
	})
}

// UpdatePersonalEmail sets the "personal_email" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePersonalEmail() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePersonalEmail()
	})
}

// ClearPersonalEmail clears the value of the "personal_email" field.
func (u *UserUpsertOne) ClearPersonalEmail() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearPersonalEmail()
	})
}

// SetIntranetWorkEmail sets the "intranet_work_email" field.
func (u *UserUpsertOne) SetIntranetWorkEmail(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetIntranetWorkEmail(v)
	})
}

// UpdateIntranetWorkEmail sets the "intranet_work_email" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateIntranetWorkEmail() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIntranetWorkEmail()
	})
}

// SetExtranetWorkEmail sets the "extranet_work_email" field.
func (u *UserUpsertOne) SetExtranetWorkEmail(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetExtranetWorkEmail(v)
	})
}

// UpdateExtranetWorkEmail sets the "extranet_work_email" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateExtranetWorkEmail() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateExtranetWorkEmail()
	})
}

// ClearExtranetWorkEmail clears the value of the "extranet_work_email" field.
func (u *UserUpsertOne) ClearExtranetWorkEmail() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearExtranetWorkEmail()
	})
}

// Exec executes the query.
func (u *UserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	builders []*UserCreate
	conflict []sql.ConflictOption
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetCreateByUser(v+v).
//		}).
//		Exec(ctx)
//
func (ucb *UserCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserUpsertBulk {
	ucb.conflict = opts
	return &UserUpsertBulk{
		create: ucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ucb *UserCreateBulk) OnConflictColumns(columns ...string) *UserUpsertBulk {
	ucb.conflict = append(ucb.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertBulk{
		create: ucb,
	}
}

// UserUpsertBulk is the builder for "upsert"-ing
// a bulk of User nodes.
type UserUpsertBulk struct {
	create *UserCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *UserUpsertBulk) UpdateNewValues() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *UserUpsertBulk) Ignore() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertBulk) DoNothing() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreateBulk.OnConflict
// documentation for more info.
func (u *UserUpsertBulk) Update(set func(*UserUpsert)) *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateByUser sets the "create_by_user" field.
func (u *UserUpsertBulk) SetCreateByUser(v int) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetCreateByUser(v)
	})
}

// UpdateCreateByUser sets the "create_by_user" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateCreateByUser() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCreateByUser()
	})
}

// ClearCreateByUser clears the value of the "create_by_user" field.
func (u *UserUpsertBulk) ClearCreateByUser() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearCreateByUser()
	})
}

// SetUpdateByUser sets the "update_by_user" field.
func (u *UserUpsertBulk) SetUpdateByUser(v int) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdateByUser(v)
	})
}

// UpdateUpdateByUser sets the "update_by_user" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUpdateByUser() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdateByUser()
	})
}

// ClearUpdateByUser clears the value of the "update_by_user" field.
func (u *UserUpsertBulk) ClearUpdateByUser() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearUpdateByUser()
	})
}

// SetCreateTime sets the "create_time" field.
func (u *UserUpsertBulk) SetCreateTime(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateCreateTime() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *UserUpsertBulk) SetUpdateTime(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUpdateTime() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *UserUpsertBulk) ClearUpdateTime() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearUpdateTime()
	})
}

// SetAccountName sets the "account_name" field.
func (u *UserUpsertBulk) SetAccountName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetAccountName(v)
	})
}

// UpdateAccountName sets the "account_name" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateAccountName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAccountName()
	})
}

// SetStaffType sets the "staff_type" field.
func (u *UserUpsertBulk) SetStaffType(v user.StaffType) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetStaffType(v)
	})
}

// UpdateStaffType sets the "staff_type" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateStaffType() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStaffType()
	})
}

// SetIsOnJob sets the "is_on_job" field.
func (u *UserUpsertBulk) SetIsOnJob(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetIsOnJob(v)
	})
}

// UpdateIsOnJob sets the "is_on_job" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateIsOnJob() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsOnJob()
	})
}

// SetFamilyName sets the "family_name" field.
func (u *UserUpsertBulk) SetFamilyName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetFamilyName(v)
	})
}

// UpdateFamilyName sets the "family_name" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateFamilyName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateFamilyName()
	})
}

// SetGivenName sets the "given_name" field.
func (u *UserUpsertBulk) SetGivenName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetGivenName(v)
	})
}

// UpdateGivenName sets the "given_name" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateGivenName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateGivenName()
	})
}

// SetDisplayName sets the "display_name" field.
func (u *UserUpsertBulk) SetDisplayName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateDisplayName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDisplayName()
	})
}

// SetBirthday sets the "birthday" field.
func (u *UserUpsertBulk) SetBirthday(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetBirthday(v)
	})
}

// UpdateBirthday sets the "birthday" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateBirthday() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBirthday()
	})
}

// ClearBirthday clears the value of the "birthday" field.
func (u *UserUpsertBulk) ClearBirthday() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearBirthday()
	})
}

// SetIDNumber sets the "id_number" field.
func (u *UserUpsertBulk) SetIDNumber(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetIDNumber(v)
	})
}

// UpdateIDNumber sets the "id_number" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateIDNumber() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIDNumber()
	})
}

// ClearIDNumber clears the value of the "id_number" field.
func (u *UserUpsertBulk) ClearIDNumber() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearIDNumber()
	})
}

// SetSex sets the "sex" field.
func (u *UserUpsertBulk) SetSex(v user.Sex) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetSex(v)
	})
}

// UpdateSex sets the "sex" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateSex() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateSex()
	})
}

// ClearSex clears the value of the "sex" field.
func (u *UserUpsertBulk) ClearSex() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearSex()
	})
}

// SetPhoneNumber sets the "phone_number" field.
func (u *UserUpsertBulk) SetPhoneNumber(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPhoneNumber(v)
	})
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePhoneNumber() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePhoneNumber()
	})
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (u *UserUpsertBulk) ClearPhoneNumber() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearPhoneNumber()
	})
}

// SetAddress sets the "address" field.
func (u *UserUpsertBulk) SetAddress(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateAddress() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *UserUpsertBulk) ClearAddress() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearAddress()
	})
}

// SetStaffID sets the "staff_id" field.
func (u *UserUpsertBulk) SetStaffID(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetStaffID(v)
	})
}

// UpdateStaffID sets the "staff_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateStaffID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStaffID()
	})
}

// ClearStaffID clears the value of the "staff_id" field.
func (u *UserUpsertBulk) ClearStaffID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearStaffID()
	})
}

// SetPersonalEmail sets the "personal_email" field.
func (u *UserUpsertBulk) SetPersonalEmail(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPersonalEmail(v)
	})
}

// UpdatePersonalEmail sets the "personal_email" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePersonalEmail() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePersonalEmail()
	})
}

// ClearPersonalEmail clears the value of the "personal_email" field.
func (u *UserUpsertBulk) ClearPersonalEmail() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearPersonalEmail()
	})
}

// SetIntranetWorkEmail sets the "intranet_work_email" field.
func (u *UserUpsertBulk) SetIntranetWorkEmail(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetIntranetWorkEmail(v)
	})
}

// UpdateIntranetWorkEmail sets the "intranet_work_email" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateIntranetWorkEmail() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIntranetWorkEmail()
	})
}

// SetExtranetWorkEmail sets the "extranet_work_email" field.
func (u *UserUpsertBulk) SetExtranetWorkEmail(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetExtranetWorkEmail(v)
	})
}

// UpdateExtranetWorkEmail sets the "extranet_work_email" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateExtranetWorkEmail() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateExtranetWorkEmail()
	})
}

// ClearExtranetWorkEmail clears the value of the "extranet_work_email" field.
func (u *UserUpsertBulk) ClearExtranetWorkEmail() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearExtranetWorkEmail()
	})
}

// Exec executes the query.
func (u *UserUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
