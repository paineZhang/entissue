// Code generated by entc, DO NOT EDIT.

package ent

import "context"

func (a *Auth) BelongTo(ctx context.Context) (*User, error) {
	result, err := a.Edges.BelongToOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryBelongTo().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (jh *JobHistory) CreateBy(ctx context.Context) (*User, error) {
	result, err := jh.Edges.CreateByOrErr()
	if IsNotLoaded(err) {
		result, err = jh.QueryCreateBy().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (jh *JobHistory) BelongTo(ctx context.Context) (*User, error) {
	result, err := jh.Edges.BelongToOrErr()
	if IsNotLoaded(err) {
		result, err = jh.QueryBelongTo().Only(ctx)
	}
	return result, err
}

func (ou *OrgUnit) CreateBy(ctx context.Context) (*User, error) {
	result, err := ou.Edges.CreateByOrErr()
	if IsNotLoaded(err) {
		result, err = ou.QueryCreateBy().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ou *OrgUnit) UpdateBy(ctx context.Context) (*User, error) {
	result, err := ou.Edges.UpdateByOrErr()
	if IsNotLoaded(err) {
		result, err = ou.QueryUpdateBy().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ou *OrgUnit) Members(ctx context.Context) ([]*OrgUnitMember, error) {
	result, err := ou.Edges.MembersOrErr()
	if IsNotLoaded(err) {
		result, err = ou.QueryMembers().All(ctx)
	}
	return result, err
}

func (ou *OrgUnit) Positions(ctx context.Context) ([]*OrgUnitPosition, error) {
	result, err := ou.Edges.PositionsOrErr()
	if IsNotLoaded(err) {
		result, err = ou.QueryPositions().All(ctx)
	}
	return result, err
}

func (ou *OrgUnit) SupUnit(ctx context.Context) (*OrgUnit, error) {
	result, err := ou.Edges.SupUnitOrErr()
	if IsNotLoaded(err) {
		result, err = ou.QuerySupUnit().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ou *OrgUnit) SubUnits(ctx context.Context) ([]*OrgUnit, error) {
	result, err := ou.Edges.SubUnitsOrErr()
	if IsNotLoaded(err) {
		result, err = ou.QuerySubUnits().All(ctx)
	}
	return result, err
}

func (ou *OrgUnit) BelongToOrg(ctx context.Context) (*Organization, error) {
	result, err := ou.Edges.BelongToOrgOrErr()
	if IsNotLoaded(err) {
		result, err = ou.QueryBelongToOrg().Only(ctx)
	}
	return result, err
}

func (oum *OrgUnitMember) CreateBy(ctx context.Context) (*User, error) {
	result, err := oum.Edges.CreateByOrErr()
	if IsNotLoaded(err) {
		result, err = oum.QueryCreateBy().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (oum *OrgUnitMember) UpdateBy(ctx context.Context) (*User, error) {
	result, err := oum.Edges.UpdateByOrErr()
	if IsNotLoaded(err) {
		result, err = oum.QueryUpdateBy().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (oum *OrgUnitMember) User(ctx context.Context) (*User, error) {
	result, err := oum.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = oum.QueryUser().Only(ctx)
	}
	return result, err
}

func (oum *OrgUnitMember) Position(ctx context.Context) (*OrgUnitPosition, error) {
	result, err := oum.Edges.PositionOrErr()
	if IsNotLoaded(err) {
		result, err = oum.QueryPosition().Only(ctx)
	}
	return result, err
}

func (oum *OrgUnitMember) BelongToOrgUnit(ctx context.Context) (*OrgUnit, error) {
	result, err := oum.Edges.BelongToOrgUnitOrErr()
	if IsNotLoaded(err) {
		result, err = oum.QueryBelongToOrgUnit().Only(ctx)
	}
	return result, err
}

func (oup *OrgUnitPosition) CreateBy(ctx context.Context) (*User, error) {
	result, err := oup.Edges.CreateByOrErr()
	if IsNotLoaded(err) {
		result, err = oup.QueryCreateBy().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (oup *OrgUnitPosition) UpdateBy(ctx context.Context) (*User, error) {
	result, err := oup.Edges.UpdateByOrErr()
	if IsNotLoaded(err) {
		result, err = oup.QueryUpdateBy().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (oup *OrgUnitPosition) BelongToOrgUnitMembers(ctx context.Context) ([]*OrgUnitMember, error) {
	result, err := oup.Edges.BelongToOrgUnitMembersOrErr()
	if IsNotLoaded(err) {
		result, err = oup.QueryBelongToOrgUnitMembers().All(ctx)
	}
	return result, err
}

func (oup *OrgUnitPosition) BelongToOrgUnit(ctx context.Context) (*OrgUnit, error) {
	result, err := oup.Edges.BelongToOrgUnitOrErr()
	if IsNotLoaded(err) {
		result, err = oup.QueryBelongToOrgUnit().Only(ctx)
	}
	return result, err
}

func (o *Organization) CreateBy(ctx context.Context) (*User, error) {
	result, err := o.Edges.CreateByOrErr()
	if IsNotLoaded(err) {
		result, err = o.QueryCreateBy().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (o *Organization) UpdateBy(ctx context.Context) (*User, error) {
	result, err := o.Edges.UpdateByOrErr()
	if IsNotLoaded(err) {
		result, err = o.QueryUpdateBy().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (o *Organization) Units(ctx context.Context) ([]*OrgUnit, error) {
	result, err := o.Edges.UnitsOrErr()
	if IsNotLoaded(err) {
		result, err = o.QueryUnits().All(ctx)
	}
	return result, err
}

func (o *Organization) Staffs(ctx context.Context) ([]*User, error) {
	result, err := o.Edges.StaffsOrErr()
	if IsNotLoaded(err) {
		result, err = o.QueryStaffs().All(ctx)
	}
	return result, err
}

func (s *System) CreateBy(ctx context.Context) (*User, error) {
	result, err := s.Edges.CreateByOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryCreateBy().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *System) UpdateBy(ctx context.Context) (*User, error) {
	result, err := s.Edges.UpdateByOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryUpdateBy().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) CreateBy(ctx context.Context) (*User, error) {
	result, err := u.Edges.CreateByOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryCreateBy().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) UpdateBy(ctx context.Context) (*User, error) {
	result, err := u.Edges.UpdateByOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryUpdateBy().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) AuthHistories(ctx context.Context) ([]*Auth, error) {
	result, err := u.Edges.AuthHistoriesOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryAuthHistories().All(ctx)
	}
	return result, err
}

func (u *User) JobHistories(ctx context.Context) ([]*JobHistory, error) {
	result, err := u.Edges.JobHistoriesOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryJobHistories().All(ctx)
	}
	return result, err
}

func (u *User) Creates(ctx context.Context) ([]*User, error) {
	result, err := u.Edges.CreatesOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryCreates().All(ctx)
	}
	return result, err
}

func (u *User) Updates(ctx context.Context) ([]*User, error) {
	result, err := u.Edges.UpdatesOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryUpdates().All(ctx)
	}
	return result, err
}

func (u *User) BelongToOrgUnitMembers(ctx context.Context) ([]*OrgUnitMember, error) {
	result, err := u.Edges.BelongToOrgUnitMembersOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryBelongToOrgUnitMembers().All(ctx)
	}
	return result, err
}

func (u *User) BelongToOg(ctx context.Context) ([]*Organization, error) {
	result, err := u.Edges.BelongToOgOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryBelongToOg().All(ctx)
	}
	return result, err
}
