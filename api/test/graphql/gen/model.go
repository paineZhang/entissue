//go:build ignore
// +build ignore

// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gen

import (
	"fmt"
	"io"
	"strconv"
	"time"
	"wing/models/ent/auth"
	"wing/models/ent/jobhistory"
	"wing/models/ent/user"
)

// 认证信息
type Auth struct {
	LastAuthTime time.Time     `json:"lastAuthTime"`
	AuthType     auth.AuthType `json:"authType"`
}

type AuthMutation struct {
	// 登录
	Login *LoginResponse `json:"login,omitempty"`
}

// 用户创建输入参数
type CreateUserInput struct {
	// 通常也用与内网工作邮件的用户名一致。
	AccountName string `json:"accountName"`
	// 人员类型：正式、协力（派遣）、实习、外部
	StaffType user.StaffType `json:"staffType"`
	// 姓
	FamilyName string `json:"familyName"`
	// 名
	GivenName string `json:"givenName"`
	// 显示名称
	DisplayName string `json:"displayName"`
	// 出生日期
	Birthday *time.Time `json:"birthday,omitempty"`
	// 身份证号
	IDNumber *string `json:"idNumber,omitempty"`
	// 性别
	Sex *user.Sex `json:"sex,omitempty"`
	// 常用联系电话
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	// 常用住址
	Address *string `json:"address,omitempty"`
	// 员工编号
	StaffID *string `json:"staffId,omitempty"`
	// 个人常用邮箱
	PersonalEmail *string `json:"personalEmail,omitempty"`
	// 内网工作邮箱。与LDAP同步
	IntranetWorkEmail string `json:"intranetWorkEmail"`
	// 外网工作邮箱
	ExtranetWorkEmail *string `json:"extranetWorkEmail,omitempty"`
}

// 工作履历。NOTE 后续可能会需要增加就职的企业/团队/工作室的相关信息，以及职务履历、主要工作内容等。
type JobHistory struct {
	ID int `json:"id"`
	// 日期
	Date time.Time `json:"date"`
	// 离入职类型
	JobEntryLeaveType jobhistory.JobEntryLeaveType `json:"jobEntryLeaveType"`
	// 创建时间
	CreateTime time.Time `json:"createTime"`
	// 创建者
	CreateBy *User `json:"createBy,omitempty"`
}

// 分页连接器
type JobHistoryConnection struct {
	// 最大数量
	TotalCount int `json:"totalCount"`
	// 当前页信息
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
	// 边信息
	Edges []*JobHistoryEdge `json:"edges,omitempty"`
}

// 边信息
type JobHistoryEdge struct {
	// 节点对象
	Node *JobHistory `json:"node,omitempty"`
}

// 筛选条件。
type JobHistoryFilterCondition struct {
	BelongToAccount int `json:"belongToAccount"`
}

type JobHistoryMutation struct {
	// 设置员工的离职、入职。这会参考该员工最后一个job type，如果相同，则返回错误'NOT_ALLOWED'
	Set    bool `json:"set"`
	Delete bool `json:"delete"`
}

// 排序输入
type JobHistoryOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *JobHistoryOrderField `json:"field,omitempty"`
}

type JobHistoryQuery struct {
	// 获取员工的工作履历。如未提供排序条件，则按数据存储模型搜索给出的结果顺序
	Get *JobHistoryConnection `json:"get,omitempty"`
}

// 登录返回信息
type LoginResponse struct {
	// 认证token。在其他接口方法中，增加'Authorization'的header项以及带有'Bearer '前缀的值
	Jwt string `json:"jwt"`
	// 返回当前登录的用户信息。
	CurUser *User `json:"curUser,omitempty"`
}

// 页信息
type PageInfo struct {
	// 是否有下一页
	HasNextPage bool `json:"hasNextPage"`
	// 是否有上一页
	HasPreviousPage bool `json:"hasPreviousPage"`
	// 起始游标
	StartCursor *string `json:"startCursor,omitempty"`
	// 结束游标
	EndCursor *string `json:"endCursor,omitempty"`
}

type System struct {
	Name       string     `json:"name"`
	CreateTime time.Time  `json:"createTime"`
	UpdateTime *time.Time `json:"updateTime,omitempty"`
	CreateBy   *User      `json:"createBy,omitempty"`
	UpdateBy   *User      `json:"updateBy,omitempty"`
}

type SystemMutation struct {
	SetName bool `json:"setName"`
}

type SystemQuery struct {
	// 取系统信息
	System *System `json:"system,omitempty"`
}

// 用户更新输入参数
type UpdateUserInput struct {
	// 通常也用与内网工作邮件的用户名一致。
	AccountName *string `json:"accountName,omitempty"`
	// 人员类型：正式、协力（派遣）、实习、外部
	StaffType *user.StaffType `json:"staffType,omitempty"`
	// 姓
	FamilyName *string `json:"familyName,omitempty"`
	// 名
	GivenName *string `json:"givenName,omitempty"`
	// 显示名称
	DisplayName *string `json:"displayName,omitempty"`
	// 出生日期
	Birthday *time.Time `json:"birthday,omitempty"`
	// 身份证号
	IDNumber *string `json:"idNumber,omitempty"`
	// 性别
	Sex *user.Sex `json:"sex,omitempty"`
	// 常用联系电话
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	// 常用住址
	Address *string `json:"address,omitempty"`
	// 员工编号
	StaffID *string `json:"staffId,omitempty"`
	// 个人常用邮箱
	PersonalEmail *string `json:"personalEmail,omitempty"`
	// 内网工作邮箱。与LDAP同步
	IntranetWorkEmail *string `json:"intranetWorkEmail,omitempty"`
	// 外网工作邮箱
	ExtranetWorkEmail *string `json:"extranetWorkEmail,omitempty"`
}

// 用户
type User struct {
	ID int `json:"id"`
	// 通常也用与内网工作邮件的用户名一致。
	AccountName string `json:"accountName"`
	// 人员类型：正式、协力（派遣）、实习、外部
	StaffType *user.StaffType `json:"staffType,omitempty"`
	// 在职状态
	IsOnJob *bool `json:"isOnJob,omitempty"`
	// 姓
	FamilyName string `json:"familyName"`
	// 名
	GivenName string `json:"givenName"`
	// 显示名称
	DisplayName string `json:"displayName"`
	// 出生日期
	Birthday *time.Time `json:"birthday,omitempty"`
	// 身份证号
	IDNumber *string `json:"idNumber,omitempty"`
	// 性别
	Sex *user.Sex `json:"sex,omitempty"`
	// 常用联系电话
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	// 常用住址
	Address *string `json:"address,omitempty"`
	// 员工编号
	StaffID *string `json:"staffId,omitempty"`
	// 个人常用邮箱
	PersonalEmail *string `json:"personalEmail,omitempty"`
	// 内网工作邮箱。与LDAP同步
	IntranetWorkEmail string `json:"intranetWorkEmail"`
	// 外网工作邮箱
	ExtranetWorkEmail *string `json:"extranetWorkEmail,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"createTime"`
	// 更新时间
	UpdateTime time.Time `json:"updateTime"`
	// 创建者
	CreateBy *User `json:"createBy,omitempty"`
	// 更新者
	UpdateBy *User `json:"updateBy,omitempty"`
	// 认证信息，包括登录和认证刷新
	AuthHistories []*Auth `json:"authHistories,omitempty"`
	// 工作履历
	JobHistories []*JobHistory `json:"jobHistories,omitempty"`
}

// 分页连接器
type UserConnection struct {
	// 最大数量
	TotalCount int `json:"totalCount"`
	// 当前页信息
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
	// 边信息
	Edges []*UserEdge `json:"edges,omitempty"`
}

// 边信息
type UserEdge struct {
	// 节点对象
	Node *User `json:"node,omitempty"`
	// 当前游标
	Cursor string `json:"cursor"`
}

// 筛选条件。每个条件间是“并且”的关系
type UserFilterCondition struct {
	IDIs            *int    `json:"idIs,omitempty"`
	AccountNameLike *string `json:"accountNameLike,omitempty"`
	IsOnJob         *bool   `json:"isOnJob,omitempty"`
}

// 修改接口。 NOTE 唯一字段的约束错误会已未知错误返回，不单独检查和提示了，太多了，例如邮箱。需要终端根据式样，通过获取方法，进行筛选，检查是否有重复项。
type UserMutation struct {
	// 创建用户
	Create *User `json:"create,omitempty"`
	// 更新用户
	Update bool `json:"update"`
	// 批量导入用户信息
	Import []*User `json:"import,omitempty"`
	// 修改当前账户的密码
	ChangePassword bool `json:"changePassword"`
	// 重置密码。不提供用户id，则意味着重置当前用户密码
	ResetPassword bool `json:"resetPassword"`
}

// 排序输入
type UserOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UserOrderField `json:"field,omitempty"`
}

// 请求接口
type UserQuery struct {
	// 获取单个用户信息
	User *User `json:"user,omitempty"`
	// 获取用户信息列表
	Users *UserConnection `json:"users,omitempty"`
	// 是否存在相同的账户名
	IsExistAccountName bool `json:"isExistAccountName"`
}

type UserSubscriptionInfo struct {
	ID int `json:"id"`
}

// 请求错误码。
type ErrorCode string

const (
	// 未知错误，通常是没有被具体定义的错误
	ErrorCodeUnknown ErrorCode = "UNKNOWN"
	// 服务发生错误，这不是由于客户端调用引起的
	ErrorCodeServerError ErrorCode = "SERVER_ERROR"
	// 未认证。需要登录
	ErrorCodeNoAuth ErrorCode = "NO_AUTH"
	// 不存在的账户
	ErrorCodeNotExistAccount ErrorCode = "NOT_EXIST_ACCOUNT"
	// 密码错误
	ErrorCodeWrongPassword ErrorCode = "WRONG_PASSWORD"
	// 存在相同记录
	ErrorCodeAlreadyExist ErrorCode = "ALREADY_EXIST"
)

var AllErrorCode = []ErrorCode{
	ErrorCodeUnknown,
	ErrorCodeServerError,
	ErrorCodeNoAuth,
	ErrorCodeNotExistAccount,
	ErrorCodeWrongPassword,
	ErrorCodeAlreadyExist,
}

func (e ErrorCode) IsValid() bool {
	switch e {
	case ErrorCodeUnknown, ErrorCodeServerError, ErrorCodeNoAuth, ErrorCodeNotExistAccount, ErrorCodeWrongPassword, ErrorCodeAlreadyExist:
		return true
	}
	return false
}

func (e ErrorCode) String() string {
	return string(e)
}

func (e *ErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ErrorCode", str)
	}
	return nil
}

func (e ErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 错误码在返回的错误消息（参考graphql规范中响应信息的错误消息格式）中的扩展信息的关键字
type ErrorCodeKey string

const (
	ErrorCodeKeyErrorCode ErrorCodeKey = "ERROR_CODE"
)

var AllErrorCodeKey = []ErrorCodeKey{
	ErrorCodeKeyErrorCode,
}

func (e ErrorCodeKey) IsValid() bool {
	switch e {
	case ErrorCodeKeyErrorCode:
		return true
	}
	return false
}

func (e ErrorCodeKey) String() string {
	return string(e)
}

func (e *ErrorCodeKey) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ErrorCodeKey(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ErrorCodeKey", str)
	}
	return nil
}

func (e ErrorCodeKey) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 排序字段
type JobHistoryOrderField string

const (
	JobHistoryOrderFieldDate       JobHistoryOrderField = "DATE"
	JobHistoryOrderFieldCreateTime JobHistoryOrderField = "CREATE_TIME"
)

var AllJobHistoryOrderField = []JobHistoryOrderField{
	JobHistoryOrderFieldDate,
	JobHistoryOrderFieldCreateTime,
}

func (e JobHistoryOrderField) IsValid() bool {
	switch e {
	case JobHistoryOrderFieldDate, JobHistoryOrderFieldCreateTime:
		return true
	}
	return false
}

func (e JobHistoryOrderField) String() string {
	return string(e)
}

func (e *JobHistoryOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = JobHistoryOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid JobHistoryOrderField", str)
	}
	return nil
}

func (e JobHistoryOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 排序方向
type OrderDirection string

const (
	// 升序
	OrderDirectionAsc OrderDirection = "ASC"
	// 降序
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 排序字段
type UserOrderField string

const (
	UserOrderFieldAccountName UserOrderField = "ACCOUNT_NAME"
	UserOrderFieldFamilyName  UserOrderField = "FAMILY_NAME"
	UserOrderFieldDisplayName UserOrderField = "DISPLAY_NAME"
	UserOrderFieldCreateTime  UserOrderField = "CREATE_TIME"
)

var AllUserOrderField = []UserOrderField{
	UserOrderFieldAccountName,
	UserOrderFieldFamilyName,
	UserOrderFieldDisplayName,
	UserOrderFieldCreateTime,
}

func (e UserOrderField) IsValid() bool {
	switch e {
	case UserOrderFieldAccountName, UserOrderFieldFamilyName, UserOrderFieldDisplayName, UserOrderFieldCreateTime:
		return true
	}
	return false
}

func (e UserOrderField) String() string {
	return string(e)
}

func (e *UserOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserOrderField", str)
	}
	return nil
}

func (e UserOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
